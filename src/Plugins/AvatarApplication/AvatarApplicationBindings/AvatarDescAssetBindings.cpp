// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "AvatarDescAsset.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif



using namespace Tundra;
using namespace std;

namespace JSBindings
{



static const char* AvatarDescAsset_ID = "AvatarDescAsset";

const char* SignalWrapper_AvatarDescAsset_AppearanceChanged_ID = "SignalWrapper_AvatarDescAsset_AppearanceChanged";

class SignalWrapper_AvatarDescAsset_AppearanceChanged
{
public:
    SignalWrapper_AvatarDescAsset_AppearanceChanged(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_AvatarDescAsset_AppearanceChanged : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_AvatarDescAsset_AppearanceChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_AvatarDescAsset_AppearanceChanged>(ctx, SignalWrapper_AvatarDescAsset_AppearanceChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_AvatarDescAsset_AppearanceChanged_Connect(duk_context* ctx)
{
    SignalWrapper_AvatarDescAsset_AppearanceChanged* wrapper = GetThisValueObject<SignalWrapper_AvatarDescAsset_AppearanceChanged>(ctx, SignalWrapper_AvatarDescAsset_AppearanceChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_AvatarDescAsset_AppearanceChanged* receiver = new SignalReceiver_AvatarDescAsset_AppearanceChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_AvatarDescAsset_AppearanceChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AvatarDescAsset_AppearanceChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_AvatarDescAsset_AppearanceChanged* wrapper = GetThisValueObject<SignalWrapper_AvatarDescAsset_AppearanceChanged>(ctx, SignalWrapper_AvatarDescAsset_AppearanceChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AvatarDescAsset_AppearanceChanged_Emit(duk_context* ctx)
{
    SignalWrapper_AvatarDescAsset_AppearanceChanged* wrapper = GetThisValueObject<SignalWrapper_AvatarDescAsset_AppearanceChanged>(ctx, SignalWrapper_AvatarDescAsset_AppearanceChanged_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t AvatarDescAsset_Get_AppearanceChanged(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    SignalWrapper_AvatarDescAsset_AppearanceChanged* wrapper = new SignalWrapper_AvatarDescAsset_AppearanceChanged(thisObj, &thisObj->AppearanceChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_AvatarDescAsset_AppearanceChanged_ID, SignalWrapper_AvatarDescAsset_AppearanceChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_AppearanceChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_AppearanceChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_AppearanceChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_AppearanceChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_AppearanceChanged_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_ID = "SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged";

class SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged
{
public:
    SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_AvatarDescAsset_DynamicAppearanceChanged : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged>(ctx, SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_Connect(duk_context* ctx)
{
    SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged* wrapper = GetThisValueObject<SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged>(ctx, SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_AvatarDescAsset_DynamicAppearanceChanged* receiver = new SignalReceiver_AvatarDescAsset_DynamicAppearanceChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_AvatarDescAsset_DynamicAppearanceChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged* wrapper = GetThisValueObject<SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged>(ctx, SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_Emit(duk_context* ctx)
{
    SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged* wrapper = GetThisValueObject<SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged>(ctx, SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t AvatarDescAsset_Get_DynamicAppearanceChanged(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged* wrapper = new SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged(thisObj, &thisObj->DynamicAppearanceChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_ID, SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_DynamicAppearanceChanged_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t AvatarDescAsset_Set_avatarAppearanceXML_(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String avatarAppearanceXML_ = duk_require_string(ctx, 0);
    thisObj->avatarAppearanceXML_ = avatarAppearanceXML_;
    return 0;
}

static duk_ret_t AvatarDescAsset_Get_avatarAppearanceXML_(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    duk_push_string(ctx, thisObj->avatarAppearanceXML_.CString());
    return 1;
}

static duk_ret_t AvatarDescAsset_Set_mesh_(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String mesh_ = duk_require_string(ctx, 0);
    thisObj->mesh_ = mesh_;
    return 0;
}

static duk_ret_t AvatarDescAsset_Get_mesh_(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    duk_push_string(ctx, thisObj->mesh_.CString());
    return 1;
}

static duk_ret_t AvatarDescAsset_Set_skeleton_(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String skeleton_ = duk_require_string(ctx, 0);
    thisObj->skeleton_ = skeleton_;
    return 0;
}

static duk_ret_t AvatarDescAsset_Get_skeleton_(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    duk_push_string(ctx, thisObj->skeleton_.CString());
    return 1;
}

static duk_ret_t AvatarDescAsset_Set_materials_(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    StringVector materials_ = GetStringVector(ctx, 0);
    thisObj->materials_ = materials_;
    return 0;
}

static duk_ret_t AvatarDescAsset_Get_materials_(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    PushStringVector(ctx, thisObj->materials_);
    return 1;
}

static duk_ret_t AvatarDescAsset_Set_height_(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    float height_ = (float)duk_require_number(ctx, 0);
    thisObj->height_ = height_;
    return 0;
}

static duk_ret_t AvatarDescAsset_Get_height_(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    duk_push_number(ctx, thisObj->height_);
    return 1;
}

static duk_ret_t AvatarDescAsset_Set_weight_(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    float weight_ = (float)duk_require_number(ctx, 0);
    thisObj->weight_ = weight_;
    return 0;
}

static duk_ret_t AvatarDescAsset_Get_weight_(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    duk_push_number(ctx, thisObj->weight_);
    return 1;
}

const char* SignalWrapper_AvatarDescAsset_Unloaded_ID = "SignalWrapper_AvatarDescAsset_Unloaded";

class SignalWrapper_AvatarDescAsset_Unloaded
{
public:
    SignalWrapper_AvatarDescAsset_Unloaded(Object* owner, Signal1< IAsset * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< IAsset * >* signal_;
};

class SignalReceiver_AvatarDescAsset_Unloaded : public SignalReceiver
{
public:
    void OnSignal(IAsset * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_AvatarDescAsset_Unloaded_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_AvatarDescAsset_Unloaded>(ctx, SignalWrapper_AvatarDescAsset_Unloaded_ID);
    return 0;
}

static duk_ret_t SignalWrapper_AvatarDescAsset_Unloaded_Connect(duk_context* ctx)
{
    SignalWrapper_AvatarDescAsset_Unloaded* wrapper = GetThisValueObject<SignalWrapper_AvatarDescAsset_Unloaded>(ctx, SignalWrapper_AvatarDescAsset_Unloaded_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_AvatarDescAsset_Unloaded* receiver = new SignalReceiver_AvatarDescAsset_Unloaded();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_AvatarDescAsset_Unloaded::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AvatarDescAsset_Unloaded_Disconnect(duk_context* ctx)
{
    SignalWrapper_AvatarDescAsset_Unloaded* wrapper = GetThisValueObject<SignalWrapper_AvatarDescAsset_Unloaded>(ctx, SignalWrapper_AvatarDescAsset_Unloaded_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AvatarDescAsset_Unloaded_Emit(duk_context* ctx)
{
    SignalWrapper_AvatarDescAsset_Unloaded* wrapper = GetThisValueObject<SignalWrapper_AvatarDescAsset_Unloaded>(ctx, SignalWrapper_AvatarDescAsset_Unloaded_ID);
    if (!wrapper->owner_) return 0;
    IAsset* param0 = GetWeakObject<IAsset>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t AvatarDescAsset_Get_Unloaded(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    SignalWrapper_AvatarDescAsset_Unloaded* wrapper = new SignalWrapper_AvatarDescAsset_Unloaded(thisObj, &thisObj->Unloaded);
    PushValueObject(ctx, wrapper, SignalWrapper_AvatarDescAsset_Unloaded_ID, SignalWrapper_AvatarDescAsset_Unloaded_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_Unloaded_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_Unloaded_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_Unloaded_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_Unloaded_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_Unloaded_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_AvatarDescAsset_Loaded_ID = "SignalWrapper_AvatarDescAsset_Loaded";

class SignalWrapper_AvatarDescAsset_Loaded
{
public:
    SignalWrapper_AvatarDescAsset_Loaded(Object* owner, Signal1< AssetPtr >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< AssetPtr >* signal_;
};

class SignalReceiver_AvatarDescAsset_Loaded : public SignalReceiver
{
public:
    void OnSignal(AssetPtr param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0.Get());
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_AvatarDescAsset_Loaded_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_AvatarDescAsset_Loaded>(ctx, SignalWrapper_AvatarDescAsset_Loaded_ID);
    return 0;
}

static duk_ret_t SignalWrapper_AvatarDescAsset_Loaded_Connect(duk_context* ctx)
{
    SignalWrapper_AvatarDescAsset_Loaded* wrapper = GetThisValueObject<SignalWrapper_AvatarDescAsset_Loaded>(ctx, SignalWrapper_AvatarDescAsset_Loaded_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_AvatarDescAsset_Loaded* receiver = new SignalReceiver_AvatarDescAsset_Loaded();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_AvatarDescAsset_Loaded::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AvatarDescAsset_Loaded_Disconnect(duk_context* ctx)
{
    SignalWrapper_AvatarDescAsset_Loaded* wrapper = GetThisValueObject<SignalWrapper_AvatarDescAsset_Loaded>(ctx, SignalWrapper_AvatarDescAsset_Loaded_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AvatarDescAsset_Loaded_Emit(duk_context* ctx)
{
    SignalWrapper_AvatarDescAsset_Loaded* wrapper = GetThisValueObject<SignalWrapper_AvatarDescAsset_Loaded>(ctx, SignalWrapper_AvatarDescAsset_Loaded_ID);
    if (!wrapper->owner_) return 0;
    SharedPtr<IAsset> param0(GetWeakObject<IAsset>(ctx, 0));
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t AvatarDescAsset_Get_Loaded(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    SignalWrapper_AvatarDescAsset_Loaded* wrapper = new SignalWrapper_AvatarDescAsset_Loaded(thisObj, &thisObj->Loaded);
    PushValueObject(ctx, wrapper, SignalWrapper_AvatarDescAsset_Loaded_ID, SignalWrapper_AvatarDescAsset_Loaded_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_Loaded_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_Loaded_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_Loaded_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_Loaded_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_Loaded_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_AvatarDescAsset_PropertyStatusChanged_ID = "SignalWrapper_AvatarDescAsset_PropertyStatusChanged";

class SignalWrapper_AvatarDescAsset_PropertyStatusChanged
{
public:
    SignalWrapper_AvatarDescAsset_PropertyStatusChanged(Object* owner, Signal1< IAsset * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< IAsset * >* signal_;
};

class SignalReceiver_AvatarDescAsset_PropertyStatusChanged : public SignalReceiver
{
public:
    void OnSignal(IAsset * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_AvatarDescAsset_PropertyStatusChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_AvatarDescAsset_PropertyStatusChanged>(ctx, SignalWrapper_AvatarDescAsset_PropertyStatusChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_AvatarDescAsset_PropertyStatusChanged_Connect(duk_context* ctx)
{
    SignalWrapper_AvatarDescAsset_PropertyStatusChanged* wrapper = GetThisValueObject<SignalWrapper_AvatarDescAsset_PropertyStatusChanged>(ctx, SignalWrapper_AvatarDescAsset_PropertyStatusChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_AvatarDescAsset_PropertyStatusChanged* receiver = new SignalReceiver_AvatarDescAsset_PropertyStatusChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_AvatarDescAsset_PropertyStatusChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AvatarDescAsset_PropertyStatusChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_AvatarDescAsset_PropertyStatusChanged* wrapper = GetThisValueObject<SignalWrapper_AvatarDescAsset_PropertyStatusChanged>(ctx, SignalWrapper_AvatarDescAsset_PropertyStatusChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AvatarDescAsset_PropertyStatusChanged_Emit(duk_context* ctx)
{
    SignalWrapper_AvatarDescAsset_PropertyStatusChanged* wrapper = GetThisValueObject<SignalWrapper_AvatarDescAsset_PropertyStatusChanged>(ctx, SignalWrapper_AvatarDescAsset_PropertyStatusChanged_ID);
    if (!wrapper->owner_) return 0;
    IAsset* param0 = GetWeakObject<IAsset>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t AvatarDescAsset_Get_PropertyStatusChanged(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    SignalWrapper_AvatarDescAsset_PropertyStatusChanged* wrapper = new SignalWrapper_AvatarDescAsset_PropertyStatusChanged(thisObj, &thisObj->PropertyStatusChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_AvatarDescAsset_PropertyStatusChanged_ID, SignalWrapper_AvatarDescAsset_PropertyStatusChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_PropertyStatusChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_PropertyStatusChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_PropertyStatusChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_PropertyStatusChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_AvatarDescAsset_PropertyStatusChanged_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t AvatarDescAsset_IsLoaded(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    bool ret = thisObj->IsLoaded();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AvatarDescAsset_SetMasterModifierValue_String_float(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String name = duk_require_string(ctx, 0);
    float value = (float)duk_require_number(ctx, 1);
    thisObj->SetMasterModifierValue(name, value);
    return 0;
}

static duk_ret_t AvatarDescAsset_SetModifierValue_String_float(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String name = duk_require_string(ctx, 0);
    float value = (float)duk_require_number(ctx, 1);
    thisObj->SetModifierValue(name, value);
    return 0;
}

static duk_ret_t AvatarDescAsset_SetMaterial_uint_String(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    uint index = (uint)duk_require_number(ctx, 0);
    String ref = duk_require_string(ctx, 1);
    thisObj->SetMaterial(index, ref);
    return 0;
}

static duk_ret_t AvatarDescAsset_RemoveAttachment_uint(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    uint index = (uint)duk_require_number(ctx, 0);
    thisObj->RemoveAttachment(index);
    return 0;
}

static duk_ret_t AvatarDescAsset_RemoveAttachmentsByCategory_String(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String category = duk_require_string(ctx, 0);
    thisObj->RemoveAttachmentsByCategory(category);
    return 0;
}

static duk_ret_t AvatarDescAsset_AddAttachment_AssetPtr(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    SharedPtr<IAsset> assetPtr(GetWeakObject<IAsset>(ctx, 0));
    thisObj->AddAttachment(assetPtr);
    return 0;
}

static duk_ret_t AvatarDescAsset_HasProperty_String(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String name = duk_require_string(ctx, 0);
    bool ret = thisObj->HasProperty(name);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AvatarDescAsset_GetProperty_String(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String value = duk_require_string(ctx, 0);
    const String & ret = thisObj->GetProperty(value);
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t AvatarDescAsset_Type(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String ret = thisObj->Type();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t AvatarDescAsset_Name(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String ret = thisObj->Name();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t AvatarDescAsset_SetDiskSource_String(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String diskSource = duk_require_string(ctx, 0);
    thisObj->SetDiskSource(diskSource);
    return 0;
}

static duk_ret_t AvatarDescAsset_DiskSource(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String ret = thisObj->DiskSource();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t AvatarDescAsset_LoadFromFile_String(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String filename = duk_require_string(ctx, 0);
    bool ret = thisObj->LoadFromFile(filename);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AvatarDescAsset_LoadFromCache(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    bool ret = thisObj->LoadFromCache();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AvatarDescAsset_Unload(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    thisObj->Unload();
    return 0;
}

static duk_ret_t AvatarDescAsset_IsEmpty(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    bool ret = thisObj->IsEmpty();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AvatarDescAsset_IsTrusted(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    bool ret = thisObj->IsTrusted();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AvatarDescAsset_MarkModified(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    thisObj->MarkModified();
    return 0;
}

static duk_ret_t AvatarDescAsset_ClearModified(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    thisObj->ClearModified();
    return 0;
}

static duk_ret_t AvatarDescAsset_IsModified(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    bool ret = thisObj->IsModified();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AvatarDescAsset_Clone_String(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String newAssetName = duk_require_string(ctx, 0);
    AssetPtr ret = thisObj->Clone(newAssetName);
    PushWeakObject(ctx, ret.Get());
    return 1;
}

static duk_ret_t AvatarDescAsset_SaveToFile_String_String(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String filename = duk_require_string(ctx, 0);
    String serializationParameters = numArgs > 1 ? duk_require_string(ctx, 1) : "";
    bool ret = thisObj->SaveToFile(filename, serializationParameters);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AvatarDescAsset_SaveCachedCopyToFile_String(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String filename = duk_require_string(ctx, 0);
    bool ret = thisObj->SaveCachedCopyToFile(filename);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AvatarDescAsset_AssetStorage(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    AssetStoragePtr ret = thisObj->AssetStorage();
    PushWeakObject(ctx, ret.Get());
    return 1;
}

static duk_ret_t AvatarDescAsset_ToString(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    String ret = thisObj->ToString();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t AvatarDescAsset_LoadCompleted(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    thisObj->LoadCompleted();
    return 0;
}

static duk_ret_t AvatarDescAsset_DependencyLoaded_AssetPtr(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    SharedPtr<IAsset> dependee(GetWeakObject<IAsset>(ctx, 0));
    thisObj->DependencyLoaded(dependee);
    return 0;
}

static duk_ret_t AvatarDescAsset_SetAssetStorage_AssetStoragePtr(duk_context* ctx)
{
    AvatarDescAsset* thisObj = GetThisWeakObject<AvatarDescAsset>(ctx);
    SharedPtr<IAssetStorage> storage(GetWeakObject<IAssetStorage>(ctx, 0));
    thisObj->SetAssetStorage(storage);
    return 0;
}

static const duk_function_list_entry AvatarDescAsset_Functions[] = {
    {"IsLoaded", AvatarDescAsset_IsLoaded, 0}
    ,{"SetMasterModifierValue", AvatarDescAsset_SetMasterModifierValue_String_float, 2}
    ,{"SetModifierValue", AvatarDescAsset_SetModifierValue_String_float, 2}
    ,{"SetMaterial", AvatarDescAsset_SetMaterial_uint_String, 2}
    ,{"RemoveAttachment", AvatarDescAsset_RemoveAttachment_uint, 1}
    ,{"RemoveAttachmentsByCategory", AvatarDescAsset_RemoveAttachmentsByCategory_String, 1}
    ,{"AddAttachment", AvatarDescAsset_AddAttachment_AssetPtr, 1}
    ,{"HasProperty", AvatarDescAsset_HasProperty_String, 1}
    ,{"GetProperty", AvatarDescAsset_GetProperty_String, 1}
    ,{"Type", AvatarDescAsset_Type, 0}
    ,{"Name", AvatarDescAsset_Name, 0}
    ,{"SetDiskSource", AvatarDescAsset_SetDiskSource_String, 1}
    ,{"DiskSource", AvatarDescAsset_DiskSource, 0}
    ,{"LoadFromFile", AvatarDescAsset_LoadFromFile_String, 1}
    ,{"LoadFromCache", AvatarDescAsset_LoadFromCache, 0}
    ,{"Unload", AvatarDescAsset_Unload, 0}
    ,{"IsEmpty", AvatarDescAsset_IsEmpty, 0}
    ,{"IsTrusted", AvatarDescAsset_IsTrusted, 0}
    ,{"MarkModified", AvatarDescAsset_MarkModified, 0}
    ,{"ClearModified", AvatarDescAsset_ClearModified, 0}
    ,{"IsModified", AvatarDescAsset_IsModified, 0}
    ,{"Clone", AvatarDescAsset_Clone_String, 1}
    ,{"SaveToFile", AvatarDescAsset_SaveToFile_String_String, DUK_VARARGS}
    ,{"SaveCachedCopyToFile", AvatarDescAsset_SaveCachedCopyToFile_String, 1}
    ,{"AssetStorage", AvatarDescAsset_AssetStorage, 0}
    ,{"ToString", AvatarDescAsset_ToString, 0}
    ,{"LoadCompleted", AvatarDescAsset_LoadCompleted, 0}
    ,{"DependencyLoaded", AvatarDescAsset_DependencyLoaded_AssetPtr, 1}
    ,{"SetAssetStorage", AvatarDescAsset_SetAssetStorage_AssetStoragePtr, 1}
    ,{nullptr, nullptr, 0}
};

void Expose_AvatarDescAsset(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_number(ctx, 0);
    duk_put_prop_string(ctx, -2, "Original");
    duk_push_number(ctx, 1);
    duk_put_prop_string(ctx, -2, "Cached");
    duk_push_number(ctx, 2);
    duk_put_prop_string(ctx, -2, "Programmatic");
    duk_push_number(ctx, 3);
    duk_put_prop_string(ctx, -2, "Bundle");
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, AvatarDescAsset_Functions);
    DefineProperty(ctx, "AppearanceChanged", AvatarDescAsset_Get_AppearanceChanged, nullptr);
    DefineProperty(ctx, "DynamicAppearanceChanged", AvatarDescAsset_Get_DynamicAppearanceChanged, nullptr);
    DefineProperty(ctx, "avatarAppearanceXML_", AvatarDescAsset_Get_avatarAppearanceXML_, AvatarDescAsset_Set_avatarAppearanceXML_);
    DefineProperty(ctx, "mesh_", AvatarDescAsset_Get_mesh_, AvatarDescAsset_Set_mesh_);
    DefineProperty(ctx, "skeleton_", AvatarDescAsset_Get_skeleton_, AvatarDescAsset_Set_skeleton_);
    DefineProperty(ctx, "materials_", AvatarDescAsset_Get_materials_, AvatarDescAsset_Set_materials_);
    DefineProperty(ctx, "height_", AvatarDescAsset_Get_height_, AvatarDescAsset_Set_height_);
    DefineProperty(ctx, "weight_", AvatarDescAsset_Get_weight_, AvatarDescAsset_Set_weight_);
    DefineProperty(ctx, "Unloaded", AvatarDescAsset_Get_Unloaded, nullptr);
    DefineProperty(ctx, "Loaded", AvatarDescAsset_Get_Loaded, nullptr);
    DefineProperty(ctx, "PropertyStatusChanged", AvatarDescAsset_Get_PropertyStatusChanged, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, AvatarDescAsset_ID);
}

}
