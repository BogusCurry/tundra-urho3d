// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "BindingsHelpers.h"
#include "Geometry/Frustum.h"
#include "Geometry/Plane.h"
#include "Geometry/LineSegment.h"
#include "Math/float3x4.h"
#include "Math/float4x4.h"
#include "Geometry/Ray.h"
#include "Math/float2.h"
#include "Algorithm/Random/LCG.h"
#include "Math/float3x3.h"
#include "Math/Quat.h"
#include "Geometry/AABB.h"
#include "Geometry/OBB.h"
#include "Geometry/Triangle.h"
#include "Geometry/Line.h"
#include "Geometry/Sphere.h"
#include "Geometry/Capsule.h"

namespace JSBindings
{

extern const char* Plane_Id;
extern const char* LineSegment_Id;
extern const char* float3x4_Id;
extern const char* float4x4_Id;
extern const char* Ray_Id;
extern const char* float2_Id;
extern const char* LCG_Id;
extern const char* float3x3_Id;
extern const char* Quat_Id;
extern const char* AABB_Id;
extern const char* OBB_Id;
extern const char* Triangle_Id;
extern const char* Line_Id;
extern const char* Sphere_Id;
extern const char* Capsule_Id;

duk_ret_t Plane_Dtor(duk_context* ctx);
duk_ret_t LineSegment_Dtor(duk_context* ctx);
duk_ret_t float3x4_Dtor(duk_context* ctx);
duk_ret_t float4x4_Dtor(duk_context* ctx);
duk_ret_t Ray_Dtor(duk_context* ctx);
duk_ret_t float2_Dtor(duk_context* ctx);
duk_ret_t LCG_Dtor(duk_context* ctx);
duk_ret_t float3x3_Dtor(duk_context* ctx);
duk_ret_t Quat_Dtor(duk_context* ctx);
duk_ret_t AABB_Dtor(duk_context* ctx);
duk_ret_t OBB_Dtor(duk_context* ctx);
duk_ret_t Triangle_Dtor(duk_context* ctx);
duk_ret_t Line_Dtor(duk_context* ctx);
duk_ret_t Sphere_Dtor(duk_context* ctx);
duk_ret_t Capsule_Dtor(duk_context* ctx);

const char* Frustum_Id = "Frustum";

duk_ret_t Frustum_Dtor(duk_context* ctx)
{
    Frustum* obj = GetObject<Frustum>(ctx, 0, Frustum_Id);
    if (obj)
    {
        delete obj;
        SetObject(ctx, 0, 0, Frustum_Id);
    }
    return 0;
}

static duk_ret_t Frustum_Ctor(duk_context* ctx)
{
    Frustum* newObj = new Frustum();
    duk_push_this(ctx); SetObject(ctx, -1, newObj, Frustum_Id); duk_push_c_function(ctx, Frustum_Dtor, 1); duk_set_finalizer(ctx, -2);
    return 0;
}

static duk_ret_t Frustum_SetViewPlaneDistances_float_float(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float nearPlaneDistance = (float)duk_require_number(ctx, 0);
    float farPlaneDistance = (float)duk_require_number(ctx, 1);
    thisObj->SetViewPlaneDistances(nearPlaneDistance, farPlaneDistance);
    return 0;
}

static duk_ret_t Frustum_SetPerspective_float_float(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float horizontalFov = (float)duk_require_number(ctx, 0);
    float verticalFov = (float)duk_require_number(ctx, 1);
    thisObj->SetPerspective(horizontalFov, verticalFov);
    return 0;
}

static duk_ret_t Frustum_SetOrthographic_float_float(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float orthographicWidth = (float)duk_require_number(ctx, 0);
    float orthographicHeight = (float)duk_require_number(ctx, 1);
    thisObj->SetOrthographic(orthographicWidth, orthographicHeight);
    return 0;
}

static duk_ret_t Frustum_NearPlaneDistance(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->NearPlaneDistance();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_FarPlaneDistance(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->FarPlaneDistance();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_HorizontalFov(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->HorizontalFov();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_VerticalFov(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->VerticalFov();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_OrthographicWidth(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->OrthographicWidth();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_OrthographicHeight(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->OrthographicHeight();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_NumEdges(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    int ret = thisObj->NumEdges();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_AspectRatio(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->AspectRatio();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_SetHorizontalFovAndAspectRatio_float_float(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float horizontalFov = (float)duk_require_number(ctx, 0);
    float aspectRatio = (float)duk_require_number(ctx, 1);
    thisObj->SetHorizontalFovAndAspectRatio(horizontalFov, aspectRatio);
    return 0;
}

static duk_ret_t Frustum_SetVerticalFovAndAspectRatio_float_float(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float verticalFov = (float)duk_require_number(ctx, 0);
    float aspectRatio = (float)duk_require_number(ctx, 1);
    thisObj->SetVerticalFovAndAspectRatio(verticalFov, aspectRatio);
    return 0;
}

static duk_ret_t Frustum_NearPlane(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Plane ret = thisObj->NearPlane();
    duk_push_object(ctx); SetObject(ctx, -1, new Plane(ret), Plane_Id); duk_push_c_function(ctx, Plane_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, Plane_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_NearPlaneWidth(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->NearPlaneWidth();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_NearPlaneHeight(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->NearPlaneHeight();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_FarPlane(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Plane ret = thisObj->FarPlane();
    duk_push_object(ctx); SetObject(ctx, -1, new Plane(ret), Plane_Id); duk_push_c_function(ctx, Plane_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, Plane_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_LeftPlane(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Plane ret = thisObj->LeftPlane();
    duk_push_object(ctx); SetObject(ctx, -1, new Plane(ret), Plane_Id); duk_push_c_function(ctx, Plane_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, Plane_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_RightPlane(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Plane ret = thisObj->RightPlane();
    duk_push_object(ctx); SetObject(ctx, -1, new Plane(ret), Plane_Id); duk_push_c_function(ctx, Plane_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, Plane_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_TopPlane(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Plane ret = thisObj->TopPlane();
    duk_push_object(ctx); SetObject(ctx, -1, new Plane(ret), Plane_Id); duk_push_c_function(ctx, Plane_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, Plane_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_BottomPlane(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Plane ret = thisObj->BottomPlane();
    duk_push_object(ctx); SetObject(ctx, -1, new Plane(ret), Plane_Id); duk_push_c_function(ctx, Plane_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, Plane_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_GetPlane_int(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    int faceIndex = (int)duk_require_number(ctx, 0);
    Plane ret = thisObj->GetPlane(faceIndex);
    duk_push_object(ctx); SetObject(ctx, -1, new Plane(ret), Plane_Id); duk_push_c_function(ctx, Plane_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, Plane_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_Edge_int(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    int edgeIndex = (int)duk_require_number(ctx, 0);
    LineSegment ret = thisObj->Edge(edgeIndex);
    duk_push_object(ctx); SetObject(ctx, -1, new LineSegment(ret), LineSegment_Id); duk_push_c_function(ctx, LineSegment_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, LineSegment_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_SetWorldMatrix_float3x4(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float3x4* worldTransform = GetObject<float3x4>(ctx, 0, float3x4_Id); if (!worldTransform) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    thisObj->SetWorldMatrix(*worldTransform);
    return 0;
}

static duk_ret_t Frustum_WorldMatrix(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float3x4 ret = thisObj->WorldMatrix();
    duk_push_object(ctx); SetObject(ctx, -1, new float3x4(ret), float3x4_Id); duk_push_c_function(ctx, float3x4_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float3x4_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_ComputeWorldMatrix(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float3x4 ret = thisObj->ComputeWorldMatrix();
    duk_push_object(ctx); SetObject(ctx, -1, new float3x4(ret), float3x4_Id); duk_push_c_function(ctx, float3x4_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float3x4_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_ViewMatrix(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float3x4 ret = thisObj->ViewMatrix();
    duk_push_object(ctx); SetObject(ctx, -1, new float3x4(ret), float3x4_Id); duk_push_c_function(ctx, float3x4_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float3x4_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_ComputeViewMatrix(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float3x4 ret = thisObj->ComputeViewMatrix();
    duk_push_object(ctx); SetObject(ctx, -1, new float3x4(ret), float3x4_Id); duk_push_c_function(ctx, float3x4_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float3x4_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_ProjectionMatrix(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float4x4 ret = thisObj->ProjectionMatrix();
    duk_push_object(ctx); SetObject(ctx, -1, new float4x4(ret), float4x4_Id); duk_push_c_function(ctx, float4x4_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float4x4_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_ComputeProjectionMatrix(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float4x4 ret = thisObj->ComputeProjectionMatrix();
    duk_push_object(ctx); SetObject(ctx, -1, new float4x4(ret), float4x4_Id); duk_push_c_function(ctx, float4x4_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float4x4_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_ViewProjMatrix(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float4x4 ret = thisObj->ViewProjMatrix();
    duk_push_object(ctx); SetObject(ctx, -1, new float4x4(ret), float4x4_Id); duk_push_c_function(ctx, float4x4_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float4x4_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_ComputeViewProjMatrix(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float4x4 ret = thisObj->ComputeViewProjMatrix();
    duk_push_object(ctx); SetObject(ctx, -1, new float4x4(ret), float4x4_Id); duk_push_c_function(ctx, float4x4_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float4x4_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_UnProject_float_float(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    Ray ret = thisObj->UnProject(x, y);
    duk_push_object(ctx); SetObject(ctx, -1, new Ray(ret), Ray_Id); duk_push_c_function(ctx, Ray_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, Ray_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_UnProject_float2(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* xy = GetObject<float2>(ctx, 0, float2_Id); if (!xy) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    Ray ret = thisObj->UnProject(*xy);
    duk_push_object(ctx); SetObject(ctx, -1, new Ray(ret), Ray_Id); duk_push_c_function(ctx, Ray_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, Ray_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_UnProjectFromNearPlane_float_float(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    Ray ret = thisObj->UnProjectFromNearPlane(x, y);
    duk_push_object(ctx); SetObject(ctx, -1, new Ray(ret), Ray_Id); duk_push_c_function(ctx, Ray_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, Ray_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_UnProjectLineSegment_float_float(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    LineSegment ret = thisObj->UnProjectLineSegment(x, y);
    duk_push_object(ctx); SetObject(ctx, -1, new LineSegment(ret), LineSegment_Id); duk_push_c_function(ctx, LineSegment_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, LineSegment_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_IsFinite(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    bool ret = thisObj->IsFinite();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Volume(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->Volume();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Transform_float3x3(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float3x3* transform = GetObject<float3x3>(ctx, 0, float3x3_Id); if (!transform) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    thisObj->Transform(*transform);
    return 0;
}

static duk_ret_t Frustum_Transform_float3x4(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float3x4* transform = GetObject<float3x4>(ctx, 0, float3x4_Id); if (!transform) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    thisObj->Transform(*transform);
    return 0;
}

static duk_ret_t Frustum_Transform_float4x4(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float4x4* transform = GetObject<float4x4>(ctx, 0, float4x4_Id); if (!transform) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    thisObj->Transform(*transform);
    return 0;
}

static duk_ret_t Frustum_Transform_Quat(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Quat* transform = GetObject<Quat>(ctx, 0, Quat_Id); if (!transform) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    thisObj->Transform(*transform);
    return 0;
}

static duk_ret_t Frustum_MinimalEnclosingAABB(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    AABB ret = thisObj->MinimalEnclosingAABB();
    duk_push_object(ctx); SetObject(ctx, -1, new AABB(ret), AABB_Id); duk_push_c_function(ctx, AABB_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, AABB_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_MinimalEnclosingOBB_float(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float expandGuardband = (float)duk_require_number(ctx, 0);
    OBB ret = thisObj->MinimalEnclosingOBB(expandGuardband);
    duk_push_object(ctx); SetObject(ctx, -1, new OBB(ret), OBB_Id); duk_push_c_function(ctx, OBB_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, OBB_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_Contains_LineSegment(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    LineSegment* lineSegment = GetObject<LineSegment>(ctx, 0, LineSegment_Id); if (!lineSegment) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->Contains(*lineSegment);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Contains_Triangle(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Triangle* triangle = GetObject<Triangle>(ctx, 0, Triangle_Id); if (!triangle) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->Contains(*triangle);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Contains_AABB(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    AABB* aabb = GetObject<AABB>(ctx, 0, AABB_Id); if (!aabb) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->Contains(*aabb);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Contains_OBB(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    OBB* obb = GetObject<OBB>(ctx, 0, OBB_Id); if (!obb) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->Contains(*obb);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Contains_Frustum(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Frustum* frustum = GetObject<Frustum>(ctx, 0, Frustum_Id); if (!frustum) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->Contains(*frustum);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Intersects_Ray(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Ray* ray = GetObject<Ray>(ctx, 0, Ray_Id); if (!ray) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->Intersects(*ray);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Intersects_Line(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Line* line = GetObject<Line>(ctx, 0, Line_Id); if (!line) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->Intersects(*line);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Intersects_LineSegment(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    LineSegment* lineSegment = GetObject<LineSegment>(ctx, 0, LineSegment_Id); if (!lineSegment) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->Intersects(*lineSegment);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Intersects_AABB(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    AABB* aabb = GetObject<AABB>(ctx, 0, AABB_Id); if (!aabb) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->Intersects(*aabb);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Intersects_OBB(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    OBB* obb = GetObject<OBB>(ctx, 0, OBB_Id); if (!obb) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->Intersects(*obb);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Intersects_Plane(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Plane* plane = GetObject<Plane>(ctx, 0, Plane_Id); if (!plane) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->Intersects(*plane);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Intersects_Triangle(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Triangle* triangle = GetObject<Triangle>(ctx, 0, Triangle_Id); if (!triangle) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->Intersects(*triangle);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Intersects_Sphere(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Sphere* sphere = GetObject<Sphere>(ctx, 0, Sphere_Id); if (!sphere) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->Intersects(*sphere);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Intersects_Capsule(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Capsule* capsule = GetObject<Capsule>(ctx, 0, Capsule_Id); if (!capsule) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->Intersects(*capsule);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_Intersects_Frustum(duk_context* ctx)
{
    Frustum* thisObj = GetThisObject<Frustum>(ctx, Frustum_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    Frustum* frustum = GetObject<Frustum>(ctx, 0, Frustum_Id); if (!frustum) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->Intersects(*frustum);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Frustum_UnProject_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return Frustum_UnProject_float_float(ctx);
    if (numArgs == 1 && GetObject<float2>(ctx, 0, float2_Id))
        return Frustum_UnProject_float2(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Frustum_Transform_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<float3x3>(ctx, 0, float3x3_Id))
        return Frustum_Transform_float3x3(ctx);
    if (numArgs == 1 && GetObject<float3x4>(ctx, 0, float3x4_Id))
        return Frustum_Transform_float3x4(ctx);
    if (numArgs == 1 && GetObject<float4x4>(ctx, 0, float4x4_Id))
        return Frustum_Transform_float4x4(ctx);
    if (numArgs == 1 && GetObject<Quat>(ctx, 0, Quat_Id))
        return Frustum_Transform_Quat(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Frustum_Contains_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<LineSegment>(ctx, 0, LineSegment_Id))
        return Frustum_Contains_LineSegment(ctx);
    if (numArgs == 1 && GetObject<Triangle>(ctx, 0, Triangle_Id))
        return Frustum_Contains_Triangle(ctx);
    if (numArgs == 1 && GetObject<AABB>(ctx, 0, AABB_Id))
        return Frustum_Contains_AABB(ctx);
    if (numArgs == 1 && GetObject<OBB>(ctx, 0, OBB_Id))
        return Frustum_Contains_OBB(ctx);
    if (numArgs == 1 && GetObject<Frustum>(ctx, 0, Frustum_Id))
        return Frustum_Contains_Frustum(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Frustum_Intersects_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<Ray>(ctx, 0, Ray_Id))
        return Frustum_Intersects_Ray(ctx);
    if (numArgs == 1 && GetObject<Line>(ctx, 0, Line_Id))
        return Frustum_Intersects_Line(ctx);
    if (numArgs == 1 && GetObject<LineSegment>(ctx, 0, LineSegment_Id))
        return Frustum_Intersects_LineSegment(ctx);
    if (numArgs == 1 && GetObject<AABB>(ctx, 0, AABB_Id))
        return Frustum_Intersects_AABB(ctx);
    if (numArgs == 1 && GetObject<OBB>(ctx, 0, OBB_Id))
        return Frustum_Intersects_OBB(ctx);
    if (numArgs == 1 && GetObject<Plane>(ctx, 0, Plane_Id))
        return Frustum_Intersects_Plane(ctx);
    if (numArgs == 1 && GetObject<Triangle>(ctx, 0, Triangle_Id))
        return Frustum_Intersects_Triangle(ctx);
    if (numArgs == 1 && GetObject<Sphere>(ctx, 0, Sphere_Id))
        return Frustum_Intersects_Sphere(ctx);
    if (numArgs == 1 && GetObject<Capsule>(ctx, 0, Capsule_Id))
        return Frustum_Intersects_Capsule(ctx);
    if (numArgs == 1 && GetObject<Frustum>(ctx, 0, Frustum_Id))
        return Frustum_Intersects_Frustum(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Frustum_ViewportToScreenSpace_Static_float_float_int_int(duk_context* ctx)
{
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    int screenWidth = (int)duk_require_number(ctx, 2);
    int screenHeight = (int)duk_require_number(ctx, 3);
    float2 ret = Frustum::ViewportToScreenSpace(x, y, screenWidth, screenHeight);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_ViewportToScreenSpace_Static_float2_int_int(duk_context* ctx)
{
    float2* point = GetObject<float2>(ctx, 0, float2_Id); if (!point) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    int screenWidth = (int)duk_require_number(ctx, 1);
    int screenHeight = (int)duk_require_number(ctx, 2);
    float2 ret = Frustum::ViewportToScreenSpace(*point, screenWidth, screenHeight);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_ScreenToViewportSpace_Static_float_float_int_int(duk_context* ctx)
{
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    int screenWidth = (int)duk_require_number(ctx, 2);
    int screenHeight = (int)duk_require_number(ctx, 3);
    float2 ret = Frustum::ScreenToViewportSpace(x, y, screenWidth, screenHeight);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_ScreenToViewportSpace_Static_float2_int_int(duk_context* ctx)
{
    float2* point = GetObject<float2>(ctx, 0, float2_Id); if (!point) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    int screenWidth = (int)duk_require_number(ctx, 1);
    int screenHeight = (int)duk_require_number(ctx, 2);
    float2 ret = Frustum::ScreenToViewportSpace(*point, screenWidth, screenHeight);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t Frustum_ViewportToScreenSpace_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 4 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3))
        return Frustum_ViewportToScreenSpace_Static_float_float_int_int(ctx);
    if (numArgs == 3 && GetObject<float2>(ctx, 0, float2_Id) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return Frustum_ViewportToScreenSpace_Static_float2_int_int(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Frustum_ScreenToViewportSpace_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 4 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3))
        return Frustum_ScreenToViewportSpace_Static_float_float_int_int(ctx);
    if (numArgs == 3 && GetObject<float2>(ctx, 0, float2_Id) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return Frustum_ScreenToViewportSpace_Static_float2_int_int(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static const duk_function_list_entry Frustum_Functions[] = {
    {"SetViewPlaneDistances", Frustum_SetViewPlaneDistances_float_float, 2}
    ,{"SetPerspective", Frustum_SetPerspective_float_float, 2}
    ,{"SetOrthographic", Frustum_SetOrthographic_float_float, 2}
    ,{"NearPlaneDistance", Frustum_NearPlaneDistance, 0}
    ,{"FarPlaneDistance", Frustum_FarPlaneDistance, 0}
    ,{"HorizontalFov", Frustum_HorizontalFov, 0}
    ,{"VerticalFov", Frustum_VerticalFov, 0}
    ,{"OrthographicWidth", Frustum_OrthographicWidth, 0}
    ,{"OrthographicHeight", Frustum_OrthographicHeight, 0}
    ,{"NumEdges", Frustum_NumEdges, 0}
    ,{"AspectRatio", Frustum_AspectRatio, 0}
    ,{"SetHorizontalFovAndAspectRatio", Frustum_SetHorizontalFovAndAspectRatio_float_float, 2}
    ,{"SetVerticalFovAndAspectRatio", Frustum_SetVerticalFovAndAspectRatio_float_float, 2}
    ,{"NearPlane", Frustum_NearPlane, 0}
    ,{"NearPlaneWidth", Frustum_NearPlaneWidth, 0}
    ,{"NearPlaneHeight", Frustum_NearPlaneHeight, 0}
    ,{"FarPlane", Frustum_FarPlane, 0}
    ,{"LeftPlane", Frustum_LeftPlane, 0}
    ,{"RightPlane", Frustum_RightPlane, 0}
    ,{"TopPlane", Frustum_TopPlane, 0}
    ,{"BottomPlane", Frustum_BottomPlane, 0}
    ,{"GetPlane", Frustum_GetPlane_int, 1}
    ,{"Edge", Frustum_Edge_int, 1}
    ,{"SetWorldMatrix", Frustum_SetWorldMatrix_float3x4, 1}
    ,{"WorldMatrix", Frustum_WorldMatrix, 0}
    ,{"ComputeWorldMatrix", Frustum_ComputeWorldMatrix, 0}
    ,{"ViewMatrix", Frustum_ViewMatrix, 0}
    ,{"ComputeViewMatrix", Frustum_ComputeViewMatrix, 0}
    ,{"ProjectionMatrix", Frustum_ProjectionMatrix, 0}
    ,{"ComputeProjectionMatrix", Frustum_ComputeProjectionMatrix, 0}
    ,{"ViewProjMatrix", Frustum_ViewProjMatrix, 0}
    ,{"ComputeViewProjMatrix", Frustum_ComputeViewProjMatrix, 0}
    ,{"UnProject", Frustum_UnProject_Selector, DUK_VARARGS}
    ,{"UnProjectFromNearPlane", Frustum_UnProjectFromNearPlane_float_float, 2}
    ,{"UnProjectLineSegment", Frustum_UnProjectLineSegment_float_float, 2}
    ,{"IsFinite", Frustum_IsFinite, 0}
    ,{"Volume", Frustum_Volume, 0}
    ,{"Transform", Frustum_Transform_Selector, DUK_VARARGS}
    ,{"MinimalEnclosingAABB", Frustum_MinimalEnclosingAABB, 0}
    ,{"MinimalEnclosingOBB", Frustum_MinimalEnclosingOBB_float, 1}
    ,{"Contains", Frustum_Contains_Selector, DUK_VARARGS}
    ,{"Intersects", Frustum_Intersects_Selector, DUK_VARARGS}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry Frustum_StaticFunctions[] = {
    {"ViewportToScreenSpace", Frustum_ViewportToScreenSpace_Static_Selector, DUK_VARARGS}
    ,{"ScreenToViewportSpace", Frustum_ScreenToViewportSpace_Static_Selector, DUK_VARARGS}
    ,{nullptr, nullptr, 0}
};

void Expose_Frustum(duk_context* ctx)
{
    duk_push_c_function(ctx, Frustum_Ctor, DUK_VARARGS);
    duk_put_function_list(ctx, -1, Frustum_StaticFunctions);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Frustum_Functions);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, Frustum_Id);
}

}
