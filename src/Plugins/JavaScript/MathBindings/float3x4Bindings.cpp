// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "Math/float3x4.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Math/float3x3.h"
#include "Math/float3.h"
#include "Math/Quat.h"
#include "Math/float4.h"
#include "Math/float4x4.h"
#include "Algorithm/Random/LCG.h"
#include "Geometry/Plane.h"

using namespace std;

namespace JSBindings
{

extern const char* float3x3_ID;
extern const char* float3_ID;
extern const char* Quat_ID;
extern const char* float4_ID;
extern const char* float4x4_ID;
extern const char* LCG_ID;
extern const char* Plane_ID;

duk_ret_t float3x3_Finalizer(duk_context* ctx);
duk_ret_t float3_Finalizer(duk_context* ctx);
duk_ret_t Quat_Finalizer(duk_context* ctx);
duk_ret_t float4_Finalizer(duk_context* ctx);
duk_ret_t float4x4_Finalizer(duk_context* ctx);
duk_ret_t LCG_Finalizer(duk_context* ctx);
duk_ret_t Plane_Finalizer(duk_context* ctx);

const char* float3x4_ID = "float3x4";

duk_ret_t float3x4_Finalizer(duk_context* ctx)
{
    float3x4* obj = GetValueObject<float3x4>(ctx, 0, float3x4_ID);
    if (obj)
    {
        delete obj;
        SetValueObject(ctx, 0, 0, float3x4_ID);
    }
    return 0;
}

static duk_ret_t float3x4_Ctor(duk_context* ctx)
{
    float3x4* newObj = new float3x4();
    PushConstructorResult<float3x4>(ctx, newObj, float3x4_ID, float3x4_Finalizer);
    return 0;
}

static duk_ret_t float3x4_Ctor_float3x4(duk_context* ctx)
{
    float3x4& rhs = *GetCheckedValueObject<float3x4>(ctx, 0, float3x4_ID);
    float3x4* newObj = new float3x4(rhs);
    PushConstructorResult<float3x4>(ctx, newObj, float3x4_ID, float3x4_Finalizer);
    return 0;
}

static duk_ret_t float3x4_Ctor_float_float_float_float_float_float_float_float_float_float_float_float(duk_context* ctx)
{
    float _00 = (float)duk_require_number(ctx, 0);
    float _01 = (float)duk_require_number(ctx, 1);
    float _02 = (float)duk_require_number(ctx, 2);
    float _03 = (float)duk_require_number(ctx, 3);
    float _10 = (float)duk_require_number(ctx, 4);
    float _11 = (float)duk_require_number(ctx, 5);
    float _12 = (float)duk_require_number(ctx, 6);
    float _13 = (float)duk_require_number(ctx, 7);
    float _20 = (float)duk_require_number(ctx, 8);
    float _21 = (float)duk_require_number(ctx, 9);
    float _22 = (float)duk_require_number(ctx, 10);
    float _23 = (float)duk_require_number(ctx, 11);
    float3x4* newObj = new float3x4(_00, _01, _02, _03, _10, _11, _12, _13, _20, _21, _22, _23);
    PushConstructorResult<float3x4>(ctx, newObj, float3x4_ID, float3x4_Finalizer);
    return 0;
}

static duk_ret_t float3x4_Ctor_float3x3(duk_context* ctx)
{
    float3x3& other = *GetCheckedValueObject<float3x3>(ctx, 0, float3x3_ID);
    float3x4* newObj = new float3x4(other);
    PushConstructorResult<float3x4>(ctx, newObj, float3x4_ID, float3x4_Finalizer);
    return 0;
}

static duk_ret_t float3x4_Ctor_float3x3_float3(duk_context* ctx)
{
    float3x3& other = *GetCheckedValueObject<float3x3>(ctx, 0, float3x3_ID);
    float3& translate = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3x4* newObj = new float3x4(other, translate);
    PushConstructorResult<float3x4>(ctx, newObj, float3x4_ID, float3x4_Finalizer);
    return 0;
}

static duk_ret_t float3x4_Ctor_float3_float3_float3_float3(duk_context* ctx)
{
    float3& col0 = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3& col1 = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3& col2 = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float3& col3 = *GetCheckedValueObject<float3>(ctx, 3, float3_ID);
    float3x4* newObj = new float3x4(col0, col1, col2, col3);
    PushConstructorResult<float3x4>(ctx, newObj, float3x4_ID, float3x4_Finalizer);
    return 0;
}

static duk_ret_t float3x4_Ctor_Quat(duk_context* ctx)
{
    Quat& orientation = *GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    float3x4* newObj = new float3x4(orientation);
    PushConstructorResult<float3x4>(ctx, newObj, float3x4_ID, float3x4_Finalizer);
    return 0;
}

static duk_ret_t float3x4_Ctor_Quat_float3(duk_context* ctx)
{
    Quat& orientation = *GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    float3& translation = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3x4* newObj = new float3x4(orientation, translation);
    PushConstructorResult<float3x4>(ctx, newObj, float3x4_ID, float3x4_Finalizer);
    return 0;
}

static duk_ret_t float3x4_GetScale(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->GetScale();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_At_int_int(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    int col = (int)duk_require_number(ctx, 1);
     float ret = thisObj->At(row, col);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_Row_int(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    const float4 & ret = thisObj->Row(row);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_Row3_int(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    const float3 & ret = thisObj->Row3(row);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_Col_int(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int col = (int)duk_require_number(ctx, 0);
    float3 ret = thisObj->Col(col);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_Col3_int(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int col = (int)duk_require_number(ctx, 0);
    float3 ret = thisObj->Col3(col);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_Diagonal(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->Diagonal();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ScaleRow3_int_float(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    float scalar = (float)duk_require_number(ctx, 1);
    thisObj->ScaleRow3(row, scalar);
    return 0;
}

static duk_ret_t float3x4_ScaleRow_int_float(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    float scalar = (float)duk_require_number(ctx, 1);
    thisObj->ScaleRow(row, scalar);
    return 0;
}

static duk_ret_t float3x4_ScaleCol_int_float(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int col = (int)duk_require_number(ctx, 0);
    float scalar = (float)duk_require_number(ctx, 1);
    thisObj->ScaleCol(col, scalar);
    return 0;
}

static duk_ret_t float3x4_Float3x3Part(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3x3 ret = thisObj->Float3x3Part();
    PushValueObjectCopy<float3x3>(ctx, ret, float3x3_ID, float3x3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_TranslatePart(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->TranslatePart();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_RotatePart(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3x3 ret = thisObj->RotatePart();
    PushValueObjectCopy<float3x3>(ctx, ret, float3x3_ID, float3x3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_WorldX(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->WorldX();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_WorldY(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->WorldY();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_WorldZ(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->WorldZ();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_SetRow_int_float3_float(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    float3& rowVector = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float m_r3 = (float)duk_require_number(ctx, 2);
    thisObj->SetRow(row, rowVector, m_r3);
    return 0;
}

static duk_ret_t float3x4_SetRow_int_float4(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    float4& rowVector = *GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    thisObj->SetRow(row, rowVector);
    return 0;
}

static duk_ret_t float3x4_SetRow_int_float_float_float_float(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    float m_r0 = (float)duk_require_number(ctx, 1);
    float m_r1 = (float)duk_require_number(ctx, 2);
    float m_r2 = (float)duk_require_number(ctx, 3);
    float m_r3 = (float)duk_require_number(ctx, 4);
    thisObj->SetRow(row, m_r0, m_r1, m_r2, m_r3);
    return 0;
}

static duk_ret_t float3x4_SetCol_int_float3(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int column = (int)duk_require_number(ctx, 0);
    float3& columnVector = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    thisObj->SetCol(column, columnVector);
    return 0;
}

static duk_ret_t float3x4_SetCol_int_float_float_float(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int column = (int)duk_require_number(ctx, 0);
    float m_0c = (float)duk_require_number(ctx, 1);
    float m_1c = (float)duk_require_number(ctx, 2);
    float m_2c = (float)duk_require_number(ctx, 3);
    thisObj->SetCol(column, m_0c, m_1c, m_2c);
    return 0;
}

static duk_ret_t float3x4_Set_float_float_float_float_float_float_float_float_float_float_float_float(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float _00 = (float)duk_require_number(ctx, 0);
    float _01 = (float)duk_require_number(ctx, 1);
    float _02 = (float)duk_require_number(ctx, 2);
    float _03 = (float)duk_require_number(ctx, 3);
    float _10 = (float)duk_require_number(ctx, 4);
    float _11 = (float)duk_require_number(ctx, 5);
    float _12 = (float)duk_require_number(ctx, 6);
    float _13 = (float)duk_require_number(ctx, 7);
    float _20 = (float)duk_require_number(ctx, 8);
    float _21 = (float)duk_require_number(ctx, 9);
    float _22 = (float)duk_require_number(ctx, 10);
    float _23 = (float)duk_require_number(ctx, 11);
    thisObj->Set(_00, _01, _02, _03, _10, _11, _12, _13, _20, _21, _22, _23);
    return 0;
}

static duk_ret_t float3x4_Set_float3x4(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3x4& rhs = *GetCheckedValueObject<float3x4>(ctx, 0, float3x4_ID);
    thisObj->Set(rhs);
    return 0;
}

static duk_ret_t float3x4_Set_int_int_float(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    int col = (int)duk_require_number(ctx, 1);
    float value = (float)duk_require_number(ctx, 2);
    thisObj->Set(row, col, value);
    return 0;
}

static duk_ret_t float3x4_Set3x3Part_float3x3(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3x3& rotation = *GetCheckedValueObject<float3x3>(ctx, 0, float3x3_ID);
    thisObj->Set3x3Part(rotation);
    return 0;
}

static duk_ret_t float3x4_SetIdentity(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    thisObj->SetIdentity();
    return 0;
}

static duk_ret_t float3x4_SwapColumns_int_int(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int col1 = (int)duk_require_number(ctx, 0);
    int col2 = (int)duk_require_number(ctx, 1);
    thisObj->SwapColumns(col1, col2);
    return 0;
}

static duk_ret_t float3x4_SwapRows_int_int(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int row1 = (int)duk_require_number(ctx, 0);
    int row2 = (int)duk_require_number(ctx, 1);
    thisObj->SwapRows(row1, row2);
    return 0;
}

static duk_ret_t float3x4_SetTranslatePart_float_float_float(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float tx = (float)duk_require_number(ctx, 0);
    float ty = (float)duk_require_number(ctx, 1);
    float tz = (float)duk_require_number(ctx, 2);
    thisObj->SetTranslatePart(tx, ty, tz);
    return 0;
}

static duk_ret_t float3x4_SetTranslatePart_float3(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3& offset = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->SetTranslatePart(offset);
    return 0;
}

static duk_ret_t float3x4_SetRotatePartX_float(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float angleRadians = (float)duk_require_number(ctx, 0);
    thisObj->SetRotatePartX(angleRadians);
    return 0;
}

static duk_ret_t float3x4_SetRotatePartY_float(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float angleRadians = (float)duk_require_number(ctx, 0);
    thisObj->SetRotatePartY(angleRadians);
    return 0;
}

static duk_ret_t float3x4_SetRotatePartZ_float(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float angleRadians = (float)duk_require_number(ctx, 0);
    thisObj->SetRotatePartZ(angleRadians);
    return 0;
}

static duk_ret_t float3x4_SetRotatePart_float3_float(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3& axisDirection = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float angleRadians = (float)duk_require_number(ctx, 1);
    thisObj->SetRotatePart(axisDirection, angleRadians);
    return 0;
}

static duk_ret_t float3x4_SetRotatePart_Quat(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    Quat& orientation = *GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    thisObj->SetRotatePart(orientation);
    return 0;
}

static duk_ret_t float3x4_SetRotatePart_float3x3(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3x3& rotation = *GetCheckedValueObject<float3x3>(ctx, 0, float3x3_ID);
    thisObj->SetRotatePart(rotation);
    return 0;
}

static duk_ret_t float3x4_Determinant(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float ret = thisObj->Determinant();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_Inverse_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float epsilon = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-6f;
    bool ret = thisObj->Inverse(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_Inverted(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3x4 ret = thisObj->Inverted();
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_InverseColOrthogonal(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    bool ret = thisObj->InverseColOrthogonal();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_InverseOrthogonalUniformScale(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    bool ret = thisObj->InverseOrthogonalUniformScale();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_InverseOrthonormal(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    thisObj->InverseOrthonormal();
    return 0;
}

static duk_ret_t float3x4_Transpose3(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    thisObj->Transpose3();
    return 0;
}

static duk_ret_t float3x4_Transposed3(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3x4 ret = thisObj->Transposed3();
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_InverseTranspose(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    bool ret = thisObj->InverseTranspose();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_InverseTransposed(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3x4 ret = thisObj->InverseTransposed();
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_Trace(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float ret = thisObj->Trace();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_Orthonormalize_int_int_int(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    int firstColumn = (int)duk_require_number(ctx, 0);
    int secondColumn = (int)duk_require_number(ctx, 1);
    int thirdColumn = (int)duk_require_number(ctx, 2);
    thisObj->Orthonormalize(firstColumn, secondColumn, thirdColumn);
    return 0;
}

static duk_ret_t float3x4_RemoveScale(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    thisObj->RemoveScale();
    return 0;
}

static duk_ret_t float3x4_TransformPos_float3(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3& pointVector = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3 ret = thisObj->TransformPos(pointVector);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_TransformPos_float_float_float(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    float3 ret = thisObj->TransformPos(x, y, z);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_TransformDir_float4(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float4& directionVector = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->TransformDir(directionVector);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_TransformDir_float3(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3& directionVector = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3 ret = thisObj->TransformDir(directionVector);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_TransformDir_float_float_float(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    float3 ret = thisObj->TransformDir(x, y, z);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_Transform_float4(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float4& vector = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->Transform(vector);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_IsFinite(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    bool ret = thisObj->IsFinite();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_IsIdentity_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float epsilon = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-3f;
    bool ret = thisObj->IsIdentity(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_IsLowerTriangular_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float epsilon = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-3f;
    bool ret = thisObj->IsLowerTriangular(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_IsUpperTriangular_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float epsilon = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-3f;
    bool ret = thisObj->IsUpperTriangular(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_IsInvertible_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float epsilon = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-3f;
    bool ret = thisObj->IsInvertible(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_IsSymmetric_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float epsilon = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-3f;
    bool ret = thisObj->IsSymmetric(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_IsSkewSymmetric_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float epsilon = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-3f;
    bool ret = thisObj->IsSkewSymmetric(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_HasUnitaryScale_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float epsilonSq = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-6f;
    bool ret = thisObj->HasUnitaryScale(epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_HasNegativeScale(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    bool ret = thisObj->HasNegativeScale();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_HasUniformScale_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float epsilon = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-3f;
    bool ret = thisObj->HasUniformScale(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_IsRowOrthogonal_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float epsilon = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-3f;
    bool ret = thisObj->IsRowOrthogonal(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_IsColOrthogonal_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float epsilon = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-3f;
    bool ret = thisObj->IsColOrthogonal(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_IsColOrthogonal3_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float epsilon = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-3f;
    bool ret = thisObj->IsColOrthogonal3(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_IsOrthonormal_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float epsilon = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-3f;
    bool ret = thisObj->IsOrthonormal(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_Equals_float3x4_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3x4& other = *GetCheckedValueObject<float3x4>(ctx, 0, float3x4_ID);
    float epsilon = numArgs > 1 ? (float)duk_require_number(ctx, 1) : 1e-3f;
    bool ret = thisObj->Equals(other, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3x4_ToString(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    string ret = thisObj->ToString();
    duk_push_string(ctx, ret.c_str());
    return 1;
}

static duk_ret_t float3x4_SerializeToString(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    string ret = thisObj->SerializeToString();
    duk_push_string(ctx, ret.c_str());
    return 1;
}

static duk_ret_t float3x4_ToString2(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    string ret = thisObj->ToString2();
    duk_push_string(ctx, ret.c_str());
    return 1;
}

static duk_ret_t float3x4_ToEulerXYX(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->ToEulerXYX();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ToEulerXZX(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->ToEulerXZX();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ToEulerYXY(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->ToEulerYXY();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ToEulerYZY(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->ToEulerYZY();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ToEulerZXZ(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->ToEulerZXZ();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ToEulerZYZ(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->ToEulerZYZ();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ToEulerXYZ(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->ToEulerXYZ();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ToEulerXZY(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->ToEulerXZY();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ToEulerYXZ(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->ToEulerYXZ();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ToEulerYZX(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->ToEulerYZX();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ToEulerZXY(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->ToEulerZXY();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ToEulerZYX(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->ToEulerZYX();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ExtractScale(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3 ret = thisObj->ExtractScale();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_Decompose_float3_Quat_float3(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3& translate = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    Quat& rotate = *GetCheckedValueObject<Quat>(ctx, 1, Quat_ID);
    float3& scale = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    thisObj->Decompose(translate, rotate, scale);
    return 0;
}

static duk_ret_t float3x4_Decompose_float3_float3x3_float3(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3& translate = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3x3& rotate = *GetCheckedValueObject<float3x3>(ctx, 1, float3x3_ID);
    float3& scale = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    thisObj->Decompose(translate, rotate, scale);
    return 0;
}

static duk_ret_t float3x4_Decompose_float3_float3x4_float3(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3& translate = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3x4& rotate = *GetCheckedValueObject<float3x4>(ctx, 1, float3x4_ID);
    float3& scale = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    thisObj->Decompose(translate, rotate, scale);
    return 0;
}

static duk_ret_t float3x4_Mul_float3x3(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3x3& rhs = *GetCheckedValueObject<float3x3>(ctx, 0, float3x3_ID);
    float3x4 ret = thisObj->Mul(rhs);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_Mul_float3x4(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3x4& rhs = *GetCheckedValueObject<float3x4>(ctx, 0, float3x4_ID);
    float3x4 ret = thisObj->Mul(rhs);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_Mul_float4x4(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float4x4& rhs = *GetCheckedValueObject<float4x4>(ctx, 0, float4x4_ID);
    float4x4 ret = thisObj->Mul(rhs);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_Mul_Quat(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    Quat& rhs = *GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    float3x4 ret = thisObj->Mul(rhs);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_MulPos_float3(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3& pointVector = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3 ret = thisObj->MulPos(pointVector);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_MulPos_float4(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float4& pointVector = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->MulPos(pointVector);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_MulDir_float3(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float3& directionVector = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3 ret = thisObj->MulDir(directionVector);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float3x4_MulDir_float4(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float4& directionVector = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->MulDir(directionVector);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_Mul_float4(duk_context* ctx)
{
    float3x4* thisObj = GetThisValueObject<float3x4>(ctx, float3x4_ID);
    float4& vector = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->Mul(vector);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_Ctor_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 12 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3) && duk_is_number(ctx, 4) && duk_is_number(ctx, 5) && duk_is_number(ctx, 6) && duk_is_number(ctx, 7) && duk_is_number(ctx, 8) && duk_is_number(ctx, 9) && duk_is_number(ctx, 10) && duk_is_number(ctx, 11))
        return float3x4_Ctor_float_float_float_float_float_float_float_float_float_float_float_float(ctx);
    if (numArgs == 4 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3>(ctx, 1, float3_ID) && GetValueObject<float3>(ctx, 2, float3_ID) && GetValueObject<float3>(ctx, 3, float3_ID))
        return float3x4_Ctor_float3_float3_float3_float3(ctx);
    if (numArgs == 2 && GetValueObject<float3x3>(ctx, 0, float3x3_ID) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float3x4_Ctor_float3x3_float3(ctx);
    if (numArgs == 2 && GetValueObject<Quat>(ctx, 0, Quat_ID) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float3x4_Ctor_Quat_float3(ctx);
    if (numArgs == 1 && GetValueObject<Quat>(ctx, 0, Quat_ID))
        return float3x4_Ctor_Quat(ctx);
    if (numArgs == 1 && GetValueObject<float3x4>(ctx, 0, float3x4_ID))
        return float3x4_Ctor_float3x4(ctx);
    if (numArgs == 1 && GetValueObject<float3x3>(ctx, 0, float3x3_ID))
        return float3x4_Ctor_float3x3(ctx);
    if (numArgs == 0)
        return float3x4_Ctor(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_SetRow_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 5 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3) && duk_is_number(ctx, 4))
        return float3x4_SetRow_int_float_float_float_float(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && GetValueObject<float3>(ctx, 1, float3_ID) && duk_is_number(ctx, 2))
        return float3x4_SetRow_int_float3_float(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && GetValueObject<float4>(ctx, 1, float4_ID))
        return float3x4_SetRow_int_float4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_SetCol_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 4 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3))
        return float3x4_SetCol_int_float_float_float(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float3x4_SetCol_int_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_Set_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 12 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3) && duk_is_number(ctx, 4) && duk_is_number(ctx, 5) && duk_is_number(ctx, 6) && duk_is_number(ctx, 7) && duk_is_number(ctx, 8) && duk_is_number(ctx, 9) && duk_is_number(ctx, 10) && duk_is_number(ctx, 11))
        return float3x4_Set_float_float_float_float_float_float_float_float_float_float_float_float(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float3x4_Set_int_int_float(ctx);
    if (numArgs == 1 && GetValueObject<float3x4>(ctx, 0, float3x4_ID))
        return float3x4_Set_float3x4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_SetTranslatePart_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float3x4_SetTranslatePart_float_float_float(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return float3x4_SetTranslatePart_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_SetRotatePart_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && GetValueObject<float3>(ctx, 0, float3_ID) && duk_is_number(ctx, 1))
        return float3x4_SetRotatePart_float3_float(ctx);
    if (numArgs == 1 && GetValueObject<float3x3>(ctx, 0, float3x3_ID))
        return float3x4_SetRotatePart_float3x3(ctx);
    if (numArgs == 1 && GetValueObject<Quat>(ctx, 0, Quat_ID))
        return float3x4_SetRotatePart_Quat(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_TransformPos_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float3x4_TransformPos_float_float_float(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return float3x4_TransformPos_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_TransformDir_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float3x4_TransformDir_float_float_float(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float3x4_TransformDir_float4(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return float3x4_TransformDir_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_Decompose_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3x4>(ctx, 1, float3x4_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float3x4_Decompose_float3_float3x4_float3(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3x3>(ctx, 1, float3x3_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float3x4_Decompose_float3_float3x3_float3(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<Quat>(ctx, 1, Quat_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float3x4_Decompose_float3_Quat_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_Mul_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetValueObject<Quat>(ctx, 0, Quat_ID))
        return float3x4_Mul_Quat(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float3x4_Mul_float4(ctx);
    if (numArgs == 1 && GetValueObject<float4x4>(ctx, 0, float4x4_ID))
        return float3x4_Mul_float4x4(ctx);
    if (numArgs == 1 && GetValueObject<float3x3>(ctx, 0, float3x3_ID))
        return float3x4_Mul_float3x3(ctx);
    if (numArgs == 1 && GetValueObject<float3x4>(ctx, 0, float3x4_ID))
        return float3x4_Mul_float3x4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_MulPos_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float3x4_MulPos_float4(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return float3x4_MulPos_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_MulDir_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float3x4_MulDir_float4(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return float3x4_MulDir_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_RotateX_Static_float_float3(duk_context* ctx)
{
    float angleRadians = (float)duk_require_number(ctx, 0);
    float3& pointOnAxis = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3x4 ret = float3x4::RotateX(angleRadians, pointOnAxis);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_RotateX_Static_float(duk_context* ctx)
{
    float angleRadians = (float)duk_require_number(ctx, 0);
    float3x4 ret = float3x4::RotateX(angleRadians);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_RotateY_Static_float(duk_context* ctx)
{
    float angleRadians = (float)duk_require_number(ctx, 0);
    float3x4 ret = float3x4::RotateY(angleRadians);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_RotateY_Static_float_float3(duk_context* ctx)
{
    float angleRadians = (float)duk_require_number(ctx, 0);
    float3& pointOnAxis = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3x4 ret = float3x4::RotateY(angleRadians, pointOnAxis);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_RotateZ_Static_float(duk_context* ctx)
{
    float angleRadians = (float)duk_require_number(ctx, 0);
    float3x4 ret = float3x4::RotateZ(angleRadians);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_RotateZ_Static_float_float3(duk_context* ctx)
{
    float angleRadians = (float)duk_require_number(ctx, 0);
    float3& pointOnAxis = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3x4 ret = float3x4::RotateZ(angleRadians, pointOnAxis);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_RotateAxisAngle_Static_float3_float_float3(duk_context* ctx)
{
    float3& axisDirection = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float angleRadians = (float)duk_require_number(ctx, 1);
    float3& pointOnAxis = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float3x4 ret = float3x4::RotateAxisAngle(axisDirection, angleRadians, pointOnAxis);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_RotateAxisAngle_Static_float3_float(duk_context* ctx)
{
    float3& axisDirection = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float angleRadians = (float)duk_require_number(ctx, 1);
    float3x4 ret = float3x4::RotateAxisAngle(axisDirection, angleRadians);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_RotateFromTo_Static_float3_float3_float3(duk_context* ctx)
{
    float3& sourceDirection = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3& targetDirection = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3& centerPoint = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float3x4 ret = float3x4::RotateFromTo(sourceDirection, targetDirection, centerPoint);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_RotateFromTo_Static_float3_float3(duk_context* ctx)
{
    float3& sourceDirection = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3& targetDirection = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3x4 ret = float3x4::RotateFromTo(sourceDirection, targetDirection);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_RandomGeneral_Static_LCG_float_float(duk_context* ctx)
{
    LCG& lcg = *GetCheckedValueObject<LCG>(ctx, 0, LCG_ID);
    float minElem = (float)duk_require_number(ctx, 1);
    float maxElem = (float)duk_require_number(ctx, 2);
    float3x4 ret = float3x4::RandomGeneral(lcg, minElem, maxElem);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_RandomRotation_Static_LCG(duk_context* ctx)
{
    LCG& lcg = *GetCheckedValueObject<LCG>(ctx, 0, LCG_ID);
    float3x4 ret = float3x4::RandomRotation(lcg);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromQuat_Static_Quat(duk_context* ctx)
{
    Quat& orientation = *GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    float3x4 ret = float3x4::FromQuat(orientation);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromQuat_Static_Quat_float3(duk_context* ctx)
{
    Quat& orientation = *GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    float3& pointOnAxis = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3x4 ret = float3x4::FromQuat(orientation, pointOnAxis);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromTRS_Static_float3_Quat_float3(duk_context* ctx)
{
    float3& translate = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    Quat& rotate = *GetCheckedValueObject<Quat>(ctx, 1, Quat_ID);
    float3& scale = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float3x4 ret = float3x4::FromTRS(translate, rotate, scale);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromTRS_Static_float3_float3x3_float3(duk_context* ctx)
{
    float3& translate = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3x3& rotate = *GetCheckedValueObject<float3x3>(ctx, 1, float3x3_ID);
    float3& scale = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float3x4 ret = float3x4::FromTRS(translate, rotate, scale);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromTRS_Static_float3_float3x4_float3(duk_context* ctx)
{
    float3& translate = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3x4& rotate = *GetCheckedValueObject<float3x4>(ctx, 1, float3x4_ID);
    float3& scale = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float3x4 ret = float3x4::FromTRS(translate, rotate, scale);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromEulerXYX_Static_float_float_float(duk_context* ctx)
{
    float ex = (float)duk_require_number(ctx, 0);
    float ey = (float)duk_require_number(ctx, 1);
    float ex2 = (float)duk_require_number(ctx, 2);
    float3x4 ret = float3x4::FromEulerXYX(ex, ey, ex2);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromEulerXZX_Static_float_float_float(duk_context* ctx)
{
    float ex = (float)duk_require_number(ctx, 0);
    float ez = (float)duk_require_number(ctx, 1);
    float ex2 = (float)duk_require_number(ctx, 2);
    float3x4 ret = float3x4::FromEulerXZX(ex, ez, ex2);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromEulerYXY_Static_float_float_float(duk_context* ctx)
{
    float ey = (float)duk_require_number(ctx, 0);
    float ex = (float)duk_require_number(ctx, 1);
    float ey2 = (float)duk_require_number(ctx, 2);
    float3x4 ret = float3x4::FromEulerYXY(ey, ex, ey2);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromEulerYZY_Static_float_float_float(duk_context* ctx)
{
    float ey = (float)duk_require_number(ctx, 0);
    float ez = (float)duk_require_number(ctx, 1);
    float ey2 = (float)duk_require_number(ctx, 2);
    float3x4 ret = float3x4::FromEulerYZY(ey, ez, ey2);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromEulerZXZ_Static_float_float_float(duk_context* ctx)
{
    float ez = (float)duk_require_number(ctx, 0);
    float ex = (float)duk_require_number(ctx, 1);
    float ez2 = (float)duk_require_number(ctx, 2);
    float3x4 ret = float3x4::FromEulerZXZ(ez, ex, ez2);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromEulerZYZ_Static_float_float_float(duk_context* ctx)
{
    float ez = (float)duk_require_number(ctx, 0);
    float ey = (float)duk_require_number(ctx, 1);
    float ez2 = (float)duk_require_number(ctx, 2);
    float3x4 ret = float3x4::FromEulerZYZ(ez, ey, ez2);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromEulerXYZ_Static_float_float_float(duk_context* ctx)
{
    float ex = (float)duk_require_number(ctx, 0);
    float ey = (float)duk_require_number(ctx, 1);
    float ez = (float)duk_require_number(ctx, 2);
    float3x4 ret = float3x4::FromEulerXYZ(ex, ey, ez);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromEulerXZY_Static_float_float_float(duk_context* ctx)
{
    float ex = (float)duk_require_number(ctx, 0);
    float ez = (float)duk_require_number(ctx, 1);
    float ey = (float)duk_require_number(ctx, 2);
    float3x4 ret = float3x4::FromEulerXZY(ex, ez, ey);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromEulerYXZ_Static_float_float_float(duk_context* ctx)
{
    float ey = (float)duk_require_number(ctx, 0);
    float ex = (float)duk_require_number(ctx, 1);
    float ez = (float)duk_require_number(ctx, 2);
    float3x4 ret = float3x4::FromEulerYXZ(ey, ex, ez);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromEulerYZX_Static_float_float_float(duk_context* ctx)
{
    float ey = (float)duk_require_number(ctx, 0);
    float ez = (float)duk_require_number(ctx, 1);
    float ex = (float)duk_require_number(ctx, 2);
    float3x4 ret = float3x4::FromEulerYZX(ey, ez, ex);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromEulerZXY_Static_float_float_float(duk_context* ctx)
{
    float ez = (float)duk_require_number(ctx, 0);
    float ex = (float)duk_require_number(ctx, 1);
    float ey = (float)duk_require_number(ctx, 2);
    float3x4 ret = float3x4::FromEulerZXY(ez, ex, ey);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_FromEulerZYX_Static_float_float_float(duk_context* ctx)
{
    float ez = (float)duk_require_number(ctx, 0);
    float ey = (float)duk_require_number(ctx, 1);
    float ex = (float)duk_require_number(ctx, 2);
    float3x4 ret = float3x4::FromEulerZYX(ez, ey, ex);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_Scale_Static_float3_float3(duk_context* ctx)
{
    float3& scale = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3& scaleCenter = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3x4 ret = float3x4::Scale(scale, scaleCenter);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_Scale_Static_float4_float4(duk_context* ctx)
{
    float4& scale = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4& scaleCenter = *GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    float3x4 ret = float3x4::Scale(scale, scaleCenter);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ScaleAlongAxis_Static_float3_float_float3(duk_context* ctx)
{
    float3& axis = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float scalingFactor = (float)duk_require_number(ctx, 1);
    float3& scaleCenter = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float3x4 ret = float3x4::ScaleAlongAxis(axis, scalingFactor, scaleCenter);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ScaleAlongAxis_Static_float3_float(duk_context* ctx)
{
    float3& axis = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float scalingFactor = (float)duk_require_number(ctx, 1);
    float3x4 ret = float3x4::ScaleAlongAxis(axis, scalingFactor);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_UniformScale_Static_float_float3(duk_context* ctx)
{
    float uniformScale = (float)duk_require_number(ctx, 0);
    float3& scaleCenter = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3x4 ret = float3x4::UniformScale(uniformScale, scaleCenter);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ShearX_Static_float_float(duk_context* ctx)
{
    float yFactor = (float)duk_require_number(ctx, 0);
    float zFactor = (float)duk_require_number(ctx, 1);
    float3x4 ret = float3x4::ShearX(yFactor, zFactor);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ShearY_Static_float_float(duk_context* ctx)
{
    float xFactor = (float)duk_require_number(ctx, 0);
    float zFactor = (float)duk_require_number(ctx, 1);
    float3x4 ret = float3x4::ShearY(xFactor, zFactor);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_ShearZ_Static_float_float(duk_context* ctx)
{
    float xFactor = (float)duk_require_number(ctx, 0);
    float yFactor = (float)duk_require_number(ctx, 1);
    float3x4 ret = float3x4::ShearZ(xFactor, yFactor);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_Mirror_Static_Plane(duk_context* ctx)
{
    Plane& p = *GetCheckedValueObject<Plane>(ctx, 0, Plane_ID);
    float3x4 ret = float3x4::Mirror(p);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_OrthographicProjection_Static_Plane(duk_context* ctx)
{
    Plane& target = *GetCheckedValueObject<Plane>(ctx, 0, Plane_ID);
    float3x4 ret = float3x4::OrthographicProjection(target);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_OrthographicProjectionYZ_Static(duk_context* ctx)
{
    float3x4 ret = float3x4::OrthographicProjectionYZ();
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_OrthographicProjectionXZ_Static(duk_context* ctx)
{
    float3x4 ret = float3x4::OrthographicProjectionXZ();
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_OrthographicProjectionXY_Static(duk_context* ctx)
{
    float3x4 ret = float3x4::OrthographicProjectionXY();
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_LookAt_Static_float3_float3_float3_float3(duk_context* ctx)
{
    float3& localForward = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3& targetDirection = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3& localUp = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float3& worldUp = *GetCheckedValueObject<float3>(ctx, 3, float3_ID);
    float3x4 ret = float3x4::LookAt(localForward, targetDirection, localUp, worldUp);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_LookAt_Static_float3_float3_float3_float3_float3(duk_context* ctx)
{
    float3& eyePos = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3& targetPos = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3& localForward = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float3& localUp = *GetCheckedValueObject<float3>(ctx, 3, float3_ID);
    float3& worldUp = *GetCheckedValueObject<float3>(ctx, 4, float3_ID);
    float3x4 ret = float3x4::LookAt(eyePos, targetPos, localForward, localUp, worldUp);
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float3x4_RotateX_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float3x4_RotateX_Static_float_float3(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float3x4_RotateX_Static_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_RotateY_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float3x4_RotateY_Static_float_float3(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float3x4_RotateY_Static_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_RotateZ_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float3x4_RotateZ_Static_float_float3(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float3x4_RotateZ_Static_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_RotateAxisAngle_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && duk_is_number(ctx, 1) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float3x4_RotateAxisAngle_Static_float3_float_float3(ctx);
    if (numArgs == 2 && GetValueObject<float3>(ctx, 0, float3_ID) && duk_is_number(ctx, 1))
        return float3x4_RotateAxisAngle_Static_float3_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_RotateFromTo_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3>(ctx, 1, float3_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float3x4_RotateFromTo_Static_float3_float3_float3(ctx);
    if (numArgs == 2 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float3x4_RotateFromTo_Static_float3_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_FromQuat_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && GetValueObject<Quat>(ctx, 0, Quat_ID) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float3x4_FromQuat_Static_Quat_float3(ctx);
    if (numArgs == 1 && GetValueObject<Quat>(ctx, 0, Quat_ID))
        return float3x4_FromQuat_Static_Quat(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_FromTRS_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3x4>(ctx, 1, float3x4_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float3x4_FromTRS_Static_float3_float3x4_float3(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3x3>(ctx, 1, float3x3_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float3x4_FromTRS_Static_float3_float3x3_float3(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<Quat>(ctx, 1, Quat_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float3x4_FromTRS_Static_float3_Quat_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_Scale_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && GetValueObject<float4>(ctx, 0, float4_ID) && GetValueObject<float4>(ctx, 1, float4_ID))
        return float3x4_Scale_Static_float4_float4(ctx);
    if (numArgs == 2 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float3x4_Scale_Static_float3_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_ScaleAlongAxis_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && duk_is_number(ctx, 1) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float3x4_ScaleAlongAxis_Static_float3_float_float3(ctx);
    if (numArgs == 2 && GetValueObject<float3>(ctx, 0, float3_ID) && duk_is_number(ctx, 1))
        return float3x4_ScaleAlongAxis_Static_float3_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3x4_LookAt_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 5 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3>(ctx, 1, float3_ID) && GetValueObject<float3>(ctx, 2, float3_ID) && GetValueObject<float3>(ctx, 3, float3_ID) && GetValueObject<float3>(ctx, 4, float3_ID))
        return float3x4_LookAt_Static_float3_float3_float3_float3_float3(ctx);
    if (numArgs == 4 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3>(ctx, 1, float3_ID) && GetValueObject<float3>(ctx, 2, float3_ID) && GetValueObject<float3>(ctx, 3, float3_ID))
        return float3x4_LookAt_Static_float3_float3_float3_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static const duk_function_list_entry float3x4_Functions[] = {
    {"GetScale", float3x4_GetScale, 0}
    ,{"At", float3x4_At_int_int, 2}
    ,{"Row", float3x4_Row_int, 1}
    ,{"Row3", float3x4_Row3_int, 1}
    ,{"Col", float3x4_Col_int, 1}
    ,{"Col3", float3x4_Col3_int, 1}
    ,{"Diagonal", float3x4_Diagonal, 0}
    ,{"ScaleRow3", float3x4_ScaleRow3_int_float, 2}
    ,{"ScaleRow", float3x4_ScaleRow_int_float, 2}
    ,{"ScaleCol", float3x4_ScaleCol_int_float, 2}
    ,{"Float3x3Part", float3x4_Float3x3Part, 0}
    ,{"TranslatePart", float3x4_TranslatePart, 0}
    ,{"RotatePart", float3x4_RotatePart, 0}
    ,{"WorldX", float3x4_WorldX, 0}
    ,{"WorldY", float3x4_WorldY, 0}
    ,{"WorldZ", float3x4_WorldZ, 0}
    ,{"SetRow", float3x4_SetRow_Selector, DUK_VARARGS}
    ,{"SetCol", float3x4_SetCol_Selector, DUK_VARARGS}
    ,{"Set", float3x4_Set_Selector, DUK_VARARGS}
    ,{"Set3x3Part", float3x4_Set3x3Part_float3x3, 1}
    ,{"SetIdentity", float3x4_SetIdentity, 0}
    ,{"SwapColumns", float3x4_SwapColumns_int_int, 2}
    ,{"SwapRows", float3x4_SwapRows_int_int, 2}
    ,{"SetTranslatePart", float3x4_SetTranslatePart_Selector, DUK_VARARGS}
    ,{"SetRotatePartX", float3x4_SetRotatePartX_float, 1}
    ,{"SetRotatePartY", float3x4_SetRotatePartY_float, 1}
    ,{"SetRotatePartZ", float3x4_SetRotatePartZ_float, 1}
    ,{"SetRotatePart", float3x4_SetRotatePart_Selector, DUK_VARARGS}
    ,{"Determinant", float3x4_Determinant, 0}
    ,{"Inverse", float3x4_Inverse_float, DUK_VARARGS}
    ,{"Inverted", float3x4_Inverted, 0}
    ,{"InverseColOrthogonal", float3x4_InverseColOrthogonal, 0}
    ,{"InverseOrthogonalUniformScale", float3x4_InverseOrthogonalUniformScale, 0}
    ,{"InverseOrthonormal", float3x4_InverseOrthonormal, 0}
    ,{"Transpose3", float3x4_Transpose3, 0}
    ,{"Transposed3", float3x4_Transposed3, 0}
    ,{"InverseTranspose", float3x4_InverseTranspose, 0}
    ,{"InverseTransposed", float3x4_InverseTransposed, 0}
    ,{"Trace", float3x4_Trace, 0}
    ,{"Orthonormalize", float3x4_Orthonormalize_int_int_int, 3}
    ,{"RemoveScale", float3x4_RemoveScale, 0}
    ,{"TransformPos", float3x4_TransformPos_Selector, DUK_VARARGS}
    ,{"TransformDir", float3x4_TransformDir_Selector, DUK_VARARGS}
    ,{"Transform", float3x4_Transform_float4, 1}
    ,{"IsFinite", float3x4_IsFinite, 0}
    ,{"IsIdentity", float3x4_IsIdentity_float, DUK_VARARGS}
    ,{"IsLowerTriangular", float3x4_IsLowerTriangular_float, DUK_VARARGS}
    ,{"IsUpperTriangular", float3x4_IsUpperTriangular_float, DUK_VARARGS}
    ,{"IsInvertible", float3x4_IsInvertible_float, DUK_VARARGS}
    ,{"IsSymmetric", float3x4_IsSymmetric_float, DUK_VARARGS}
    ,{"IsSkewSymmetric", float3x4_IsSkewSymmetric_float, DUK_VARARGS}
    ,{"HasUnitaryScale", float3x4_HasUnitaryScale_float, DUK_VARARGS}
    ,{"HasNegativeScale", float3x4_HasNegativeScale, 0}
    ,{"HasUniformScale", float3x4_HasUniformScale_float, DUK_VARARGS}
    ,{"IsRowOrthogonal", float3x4_IsRowOrthogonal_float, DUK_VARARGS}
    ,{"IsColOrthogonal", float3x4_IsColOrthogonal_float, DUK_VARARGS}
    ,{"IsColOrthogonal3", float3x4_IsColOrthogonal3_float, DUK_VARARGS}
    ,{"IsOrthonormal", float3x4_IsOrthonormal_float, DUK_VARARGS}
    ,{"Equals", float3x4_Equals_float3x4_float, DUK_VARARGS}
    ,{"ToString", float3x4_ToString, 0}
    ,{"SerializeToString", float3x4_SerializeToString, 0}
    ,{"ToString2", float3x4_ToString2, 0}
    ,{"ToEulerXYX", float3x4_ToEulerXYX, 0}
    ,{"ToEulerXZX", float3x4_ToEulerXZX, 0}
    ,{"ToEulerYXY", float3x4_ToEulerYXY, 0}
    ,{"ToEulerYZY", float3x4_ToEulerYZY, 0}
    ,{"ToEulerZXZ", float3x4_ToEulerZXZ, 0}
    ,{"ToEulerZYZ", float3x4_ToEulerZYZ, 0}
    ,{"ToEulerXYZ", float3x4_ToEulerXYZ, 0}
    ,{"ToEulerXZY", float3x4_ToEulerXZY, 0}
    ,{"ToEulerYXZ", float3x4_ToEulerYXZ, 0}
    ,{"ToEulerYZX", float3x4_ToEulerYZX, 0}
    ,{"ToEulerZXY", float3x4_ToEulerZXY, 0}
    ,{"ToEulerZYX", float3x4_ToEulerZYX, 0}
    ,{"ExtractScale", float3x4_ExtractScale, 0}
    ,{"Decompose", float3x4_Decompose_Selector, DUK_VARARGS}
    ,{"Mul", float3x4_Mul_Selector, DUK_VARARGS}
    ,{"MulPos", float3x4_MulPos_Selector, DUK_VARARGS}
    ,{"MulDir", float3x4_MulDir_Selector, DUK_VARARGS}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry float3x4_StaticFunctions[] = {
    {"RotateX", float3x4_RotateX_Static_Selector, DUK_VARARGS}
    ,{"RotateY", float3x4_RotateY_Static_Selector, DUK_VARARGS}
    ,{"RotateZ", float3x4_RotateZ_Static_Selector, DUK_VARARGS}
    ,{"RotateAxisAngle", float3x4_RotateAxisAngle_Static_Selector, DUK_VARARGS}
    ,{"RotateFromTo", float3x4_RotateFromTo_Static_Selector, DUK_VARARGS}
    ,{"RandomGeneral", float3x4_RandomGeneral_Static_LCG_float_float, 3}
    ,{"RandomRotation", float3x4_RandomRotation_Static_LCG, 1}
    ,{"FromQuat", float3x4_FromQuat_Static_Selector, DUK_VARARGS}
    ,{"FromTRS", float3x4_FromTRS_Static_Selector, DUK_VARARGS}
    ,{"FromEulerXYX", float3x4_FromEulerXYX_Static_float_float_float, 3}
    ,{"FromEulerXZX", float3x4_FromEulerXZX_Static_float_float_float, 3}
    ,{"FromEulerYXY", float3x4_FromEulerYXY_Static_float_float_float, 3}
    ,{"FromEulerYZY", float3x4_FromEulerYZY_Static_float_float_float, 3}
    ,{"FromEulerZXZ", float3x4_FromEulerZXZ_Static_float_float_float, 3}
    ,{"FromEulerZYZ", float3x4_FromEulerZYZ_Static_float_float_float, 3}
    ,{"FromEulerXYZ", float3x4_FromEulerXYZ_Static_float_float_float, 3}
    ,{"FromEulerXZY", float3x4_FromEulerXZY_Static_float_float_float, 3}
    ,{"FromEulerYXZ", float3x4_FromEulerYXZ_Static_float_float_float, 3}
    ,{"FromEulerYZX", float3x4_FromEulerYZX_Static_float_float_float, 3}
    ,{"FromEulerZXY", float3x4_FromEulerZXY_Static_float_float_float, 3}
    ,{"FromEulerZYX", float3x4_FromEulerZYX_Static_float_float_float, 3}
    ,{"Scale", float3x4_Scale_Static_Selector, DUK_VARARGS}
    ,{"ScaleAlongAxis", float3x4_ScaleAlongAxis_Static_Selector, DUK_VARARGS}
    ,{"UniformScale", float3x4_UniformScale_Static_float_float3, 2}
    ,{"ShearX", float3x4_ShearX_Static_float_float, 2}
    ,{"ShearY", float3x4_ShearY_Static_float_float, 2}
    ,{"ShearZ", float3x4_ShearZ_Static_float_float, 2}
    ,{"Mirror", float3x4_Mirror_Static_Plane, 1}
    ,{"OrthographicProjection", float3x4_OrthographicProjection_Static_Plane, 1}
    ,{"OrthographicProjectionYZ", float3x4_OrthographicProjectionYZ_Static, 0}
    ,{"OrthographicProjectionXZ", float3x4_OrthographicProjectionXZ_Static, 0}
    ,{"OrthographicProjectionXY", float3x4_OrthographicProjectionXY_Static, 0}
    ,{"LookAt", float3x4_LookAt_Static_Selector, DUK_VARARGS}
    ,{nullptr, nullptr, 0}
};

void Expose_float3x4(duk_context* ctx)
{
    duk_push_c_function(ctx, float3x4_Ctor_Selector, DUK_VARARGS);
    duk_put_function_list(ctx, -1, float3x4_StaticFunctions);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, float3x4_Functions);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, float3x4_ID);
}

}
