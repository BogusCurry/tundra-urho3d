// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "BindingsHelpers.h"
#include "Math/float3.h"
#include "Math/float2.h"
#include "Math/float4.h"
#include "Geometry/Line.h"
#include "Geometry/Ray.h"
#include "Geometry/LineSegment.h"
#include "Geometry/Plane.h"
#include "Geometry/Triangle.h"
#include "Geometry/AABB.h"
#include "Geometry/OBB.h"
#include "Geometry/Sphere.h"
#include "Geometry/Capsule.h"
#include "Math/float3x3.h"
#include "Algorithm/Random/LCG.h"

using namespace std;

namespace JSBindings
{

extern const char* float2_Id;
extern const char* float4_Id;
extern const char* Line_Id;
extern const char* Ray_Id;
extern const char* LineSegment_Id;
extern const char* Plane_Id;
extern const char* Triangle_Id;
extern const char* AABB_Id;
extern const char* OBB_Id;
extern const char* Sphere_Id;
extern const char* Capsule_Id;
extern const char* float3x3_Id;
extern const char* LCG_Id;

duk_ret_t float2_Dtor(duk_context* ctx);
duk_ret_t float4_Dtor(duk_context* ctx);
duk_ret_t Line_Dtor(duk_context* ctx);
duk_ret_t Ray_Dtor(duk_context* ctx);
duk_ret_t LineSegment_Dtor(duk_context* ctx);
duk_ret_t Plane_Dtor(duk_context* ctx);
duk_ret_t Triangle_Dtor(duk_context* ctx);
duk_ret_t AABB_Dtor(duk_context* ctx);
duk_ret_t OBB_Dtor(duk_context* ctx);
duk_ret_t Sphere_Dtor(duk_context* ctx);
duk_ret_t Capsule_Dtor(duk_context* ctx);
duk_ret_t float3x3_Dtor(duk_context* ctx);
duk_ret_t LCG_Dtor(duk_context* ctx);

const char* float3_Id = "float3";

duk_ret_t float3_Dtor(duk_context* ctx)
{
    float3* obj = GetObject<float3>(ctx, 0, float3_Id);
    if (obj)
    {
        delete obj;
        SetObject(ctx, 0, 0, float3_Id);
    }
    return 0;
}

static duk_ret_t float3_Set_x(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float x = (float)duk_require_number(ctx, 0);
    thisObj->x = x;
    return 0;
}

static duk_ret_t float3_Get_x(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    duk_push_number(ctx, thisObj->x);
    return 1;
}

static duk_ret_t float3_Set_y(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float y = (float)duk_require_number(ctx, 0);
    thisObj->y = y;
    return 0;
}

static duk_ret_t float3_Get_y(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    duk_push_number(ctx, thisObj->y);
    return 1;
}

static duk_ret_t float3_Set_z(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float z = (float)duk_require_number(ctx, 0);
    thisObj->z = z;
    return 0;
}

static duk_ret_t float3_Get_z(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    duk_push_number(ctx, thisObj->z);
    return 1;
}

static duk_ret_t float3_Ctor(duk_context* ctx)
{
    float3* newObj = new float3();
    PushConstructorResult<float3>(ctx, newObj, float3_Id, float3_Dtor);
    return 0;
}

static duk_ret_t float3_Ctor_float3(duk_context* ctx)
{
    float3* rhs = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* newObj = new float3(*rhs);
    PushConstructorResult<float3>(ctx, newObj, float3_Id, float3_Dtor);
    return 0;
}

static duk_ret_t float3_Ctor_float_float_float(duk_context* ctx)
{
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    float3* newObj = new float3(x, y, z);
    PushConstructorResult<float3>(ctx, newObj, float3_Id, float3_Dtor);
    return 0;
}

static duk_ret_t float3_Ctor_float(duk_context* ctx)
{
    float scalar = (float)duk_require_number(ctx, 0);
    float3* newObj = new float3(scalar);
    PushConstructorResult<float3>(ctx, newObj, float3_Id, float3_Dtor);
    return 0;
}

static duk_ret_t float3_Ctor_float2_float(duk_context* ctx)
{
    float2* xy = GetCheckedObject<float2>(ctx, 0, float2_Id);
    float z = (float)duk_require_number(ctx, 1);
    float3* newObj = new float3(*xy, z);
    PushConstructorResult<float3>(ctx, newObj, float3_Id, float3_Dtor);
    return 0;
}

static duk_ret_t float3_At_int(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    int index = (int)duk_require_number(ctx, 0);
    float & ret = thisObj->At(index);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Add_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* v = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3 ret = thisObj->Add(*v);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Add_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float s = (float)duk_require_number(ctx, 0);
    float3 ret = thisObj->Add(s);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Sub_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* v = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3 ret = thisObj->Sub(*v);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Sub_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float s = (float)duk_require_number(ctx, 0);
    float3 ret = thisObj->Sub(s);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_SubLeft_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float s = (float)duk_require_number(ctx, 0);
    float3 ret = thisObj->SubLeft(s);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Mul_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* v = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3 ret = thisObj->Mul(*v);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Mul_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float s = (float)duk_require_number(ctx, 0);
    float3 ret = thisObj->Mul(s);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Div_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* v = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3 ret = thisObj->Div(*v);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Div_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float s = (float)duk_require_number(ctx, 0);
    float3 ret = thisObj->Div(s);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_DivLeft_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float s = (float)duk_require_number(ctx, 0);
    float3 ret = thisObj->DivLeft(s);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_xx(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float2 ret = thisObj->xx();
    PushValueObjectCopy<float2>(ctx, ret, float2_Id, float2_Dtor);
    return 1;
}

static duk_ret_t float3_xy(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float2 ret = thisObj->xy();
    PushValueObjectCopy<float2>(ctx, ret, float2_Id, float2_Dtor);
    return 1;
}

static duk_ret_t float3_xz(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float2 ret = thisObj->xz();
    PushValueObjectCopy<float2>(ctx, ret, float2_Id, float2_Dtor);
    return 1;
}

static duk_ret_t float3_yx(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float2 ret = thisObj->yx();
    PushValueObjectCopy<float2>(ctx, ret, float2_Id, float2_Dtor);
    return 1;
}

static duk_ret_t float3_yy(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float2 ret = thisObj->yy();
    PushValueObjectCopy<float2>(ctx, ret, float2_Id, float2_Dtor);
    return 1;
}

static duk_ret_t float3_yz(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float2 ret = thisObj->yz();
    PushValueObjectCopy<float2>(ctx, ret, float2_Id, float2_Dtor);
    return 1;
}

static duk_ret_t float3_zx(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float2 ret = thisObj->zx();
    PushValueObjectCopy<float2>(ctx, ret, float2_Id, float2_Dtor);
    return 1;
}

static duk_ret_t float3_zy(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float2 ret = thisObj->zy();
    PushValueObjectCopy<float2>(ctx, ret, float2_Id, float2_Dtor);
    return 1;
}

static duk_ret_t float3_zz(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float2 ret = thisObj->zz();
    PushValueObjectCopy<float2>(ctx, ret, float2_Id, float2_Dtor);
    return 1;
}

static duk_ret_t float3_xxx(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->xxx();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_xxy(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->xxy();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_xxz(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->xxz();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_xyx(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->xyx();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_xyy(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->xyy();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_xyz(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->xyz();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_xzx(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->xzx();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_xzy(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->xzy();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_xzz(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->xzz();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_yxx(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->yxx();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_yxy(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->yxy();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_yxz(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->yxz();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_yyx(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->yyx();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_yyy(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->yyy();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_yyz(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->yyz();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_yzx(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->yzx();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_yzy(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->yzy();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_yzz(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->yzz();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_zxx(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->zxx();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_zxy(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->zxy();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_zxz(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->zxz();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_zyx(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->zyx();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_zyy(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->zyy();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_zyz(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->zyz();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_zzx(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->zzx();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_zzy(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->zzy();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_zzz(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->zzz();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Swizzled_int_int_int_int(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    int i = (int)duk_require_number(ctx, 0);
    int j = (int)duk_require_number(ctx, 1);
    int k = (int)duk_require_number(ctx, 2);
    int l = (int)duk_require_number(ctx, 3);
    float4 ret = thisObj->Swizzled(i, j, k, l);
    PushValueObjectCopy<float4>(ctx, ret, float4_Id, float4_Dtor);
    return 1;
}

static duk_ret_t float3_Swizzled_int_int_int(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    int i = (int)duk_require_number(ctx, 0);
    int j = (int)duk_require_number(ctx, 1);
    int k = (int)duk_require_number(ctx, 2);
    float3 ret = thisObj->Swizzled(i, j, k);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Swizzled_int_int(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    int i = (int)duk_require_number(ctx, 0);
    int j = (int)duk_require_number(ctx, 1);
    float2 ret = thisObj->Swizzled(i, j);
    PushValueObjectCopy<float2>(ctx, ret, float2_Id, float2_Dtor);
    return 1;
}

static duk_ret_t float3_SetFromScalar_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float scalar = (float)duk_require_number(ctx, 0);
    thisObj->SetFromScalar(scalar);
    return 0;
}

static duk_ret_t float3_Set_float_float_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    thisObj->Set(x, y, z);
    return 0;
}

static duk_ret_t float3_SetFromSphericalCoordinates_float_float_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float azimuth = (float)duk_require_number(ctx, 0);
    float inclination = (float)duk_require_number(ctx, 1);
    float radius = (float)duk_require_number(ctx, 2);
    thisObj->SetFromSphericalCoordinates(azimuth, inclination, radius);
    return 0;
}

static duk_ret_t float3_SetFromSphericalCoordinates_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* spherical = GetCheckedObject<float3>(ctx, 0, float3_Id);
    thisObj->SetFromSphericalCoordinates(*spherical);
    return 0;
}

static duk_ret_t float3_SetFromSphericalCoordinates_float_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float azimuth = (float)duk_require_number(ctx, 0);
    float inclination = (float)duk_require_number(ctx, 1);
    thisObj->SetFromSphericalCoordinates(azimuth, inclination);
    return 0;
}

static duk_ret_t float3_ToPos4(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float4 ret = thisObj->ToPos4();
    PushValueObjectCopy<float4>(ctx, ret, float4_Id, float4_Dtor);
    return 1;
}

static duk_ret_t float3_ToDir4(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float4 ret = thisObj->ToDir4();
    PushValueObjectCopy<float4>(ctx, ret, float4_Id, float4_Dtor);
    return 1;
}

static duk_ret_t float3_ToSphericalCoordinates(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->ToSphericalCoordinates();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_ToSphericalCoordinatesNormalized(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float2 ret = thisObj->ToSphericalCoordinatesNormalized();
    PushValueObjectCopy<float2>(ctx, ret, float2_Id, float2_Dtor);
    return 1;
}

static duk_ret_t float3_Length(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float ret = thisObj->Length();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_LengthSq(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float ret = thisObj->LengthSq();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Normalize(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float ret = thisObj->Normalize();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Normalized(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->Normalized();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_ScaleToLength_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float newLength = (float)duk_require_number(ctx, 0);
    float ret = thisObj->ScaleToLength(newLength);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_ScaledToLength_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float newLength = (float)duk_require_number(ctx, 0);
    float3 ret = thisObj->ScaledToLength(newLength);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_IsNormalized_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float epsilonSq = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->IsNormalized(epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3_IsZero_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float epsilonSq = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->IsZero(epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3_IsFinite(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    bool ret = thisObj->IsFinite();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3_IsPerpendicular_float3_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* other = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float epsilonSq = (float)duk_require_number(ctx, 1);
    bool ret = thisObj->IsPerpendicular(*other, epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3_Equals_float3_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* other = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float epsilon = (float)duk_require_number(ctx, 1);
    bool ret = thisObj->Equals(*other, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3_Equals_float_float_float_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    float epsilon = (float)duk_require_number(ctx, 3);
    bool ret = thisObj->Equals(x, y, z, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3_BitEquals_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* other = GetCheckedObject<float3>(ctx, 0, float3_Id);
    bool ret = thisObj->BitEquals(*other);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3_ToString(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    std::string ret = thisObj->ToString();
    duk_push_string(ctx, ret.c_str());
    return 1;
}

static duk_ret_t float3_SerializeToString(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    std::string ret = thisObj->SerializeToString();
    duk_push_string(ctx, ret.c_str());
    return 1;
}

static duk_ret_t float3_SerializeToCodeString(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    std::string ret = thisObj->SerializeToCodeString();
    duk_push_string(ctx, ret.c_str());
    return 1;
}

static duk_ret_t float3_SumOfElements(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float ret = thisObj->SumOfElements();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_ProductOfElements(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float ret = thisObj->ProductOfElements();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_AverageOfElements(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float ret = thisObj->AverageOfElements();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_MinElement(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float ret = thisObj->MinElement();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_MinElementIndex(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    int ret = thisObj->MinElementIndex();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_MaxElement(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float ret = thisObj->MaxElement();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_MaxElementIndex(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    int ret = thisObj->MaxElementIndex();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Abs(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->Abs();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Neg(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->Neg();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Recip(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->Recip();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Min_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float ceil = (float)duk_require_number(ctx, 0);
    float3 ret = thisObj->Min(ceil);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Min_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* ceil = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3 ret = thisObj->Min(*ceil);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Max_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float floor = (float)duk_require_number(ctx, 0);
    float3 ret = thisObj->Max(floor);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Max_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* floor = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3 ret = thisObj->Max(*floor);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Clamp_float_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float floor = (float)duk_require_number(ctx, 0);
    float ceil = (float)duk_require_number(ctx, 1);
    float3 ret = thisObj->Clamp(floor, ceil);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Clamp_float3_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* floor = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* ceil = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float3 ret = thisObj->Clamp(*floor, *ceil);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Clamp01(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3 ret = thisObj->Clamp01();
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_ClampLength_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float maxLength = (float)duk_require_number(ctx, 0);
    float3 ret = thisObj->ClampLength(maxLength);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_ClampLength_float_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float minLength = (float)duk_require_number(ctx, 0);
    float maxLength = (float)duk_require_number(ctx, 1);
    float3 ret = thisObj->ClampLength(minLength, maxLength);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Distance_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* point = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float ret = thisObj->Distance(*point);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Distance_Line(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    Line* line = GetCheckedObject<Line>(ctx, 0, Line_Id);
    float ret = thisObj->Distance(*line);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Distance_Ray(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    Ray* ray = GetCheckedObject<Ray>(ctx, 0, Ray_Id);
    float ret = thisObj->Distance(*ray);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Distance_LineSegment(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    LineSegment* lineSegment = GetCheckedObject<LineSegment>(ctx, 0, LineSegment_Id);
    float ret = thisObj->Distance(*lineSegment);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Distance_Plane(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    Plane* plane = GetCheckedObject<Plane>(ctx, 0, Plane_Id);
    float ret = thisObj->Distance(*plane);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Distance_Triangle(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    Triangle* triangle = GetCheckedObject<Triangle>(ctx, 0, Triangle_Id);
    float ret = thisObj->Distance(*triangle);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Distance_AABB(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    AABB* aabb = GetCheckedObject<AABB>(ctx, 0, AABB_Id);
    float ret = thisObj->Distance(*aabb);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Distance_OBB(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    OBB* obb = GetCheckedObject<OBB>(ctx, 0, OBB_Id);
    float ret = thisObj->Distance(*obb);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Distance_Sphere(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    Sphere* sphere = GetCheckedObject<Sphere>(ctx, 0, Sphere_Id);
    float ret = thisObj->Distance(*sphere);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Distance_Capsule(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    Capsule* capsule = GetCheckedObject<Capsule>(ctx, 0, Capsule_Id);
    float ret = thisObj->Distance(*capsule);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_DistanceSq_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* point = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float ret = thisObj->DistanceSq(*point);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Dot_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* v = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float ret = thisObj->Dot(*v);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Cross_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* v = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3 ret = thisObj->Cross(*v);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_OuterProduct_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* rhs = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3x3 ret = thisObj->OuterProduct(*rhs);
    PushValueObjectCopy<float3x3>(ctx, ret, float3x3_Id, float3x3_Dtor);
    return 1;
}

static duk_ret_t float3_Perpendicular_float3_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* hint = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* hint2 = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float3 ret = thisObj->Perpendicular(*hint, *hint2);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_AnotherPerpendicular_float3_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* hint = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* hint2 = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float3 ret = thisObj->AnotherPerpendicular(*hint, *hint2);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_PerpendicularBasis_float3_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* outB = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* outC = GetCheckedObject<float3>(ctx, 1, float3_Id);
    thisObj->PerpendicularBasis(*outB, *outC);
    return 0;
}

static duk_ret_t float3_RandomPerpendicular_LCG(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    LCG* rng = GetCheckedObject<LCG>(ctx, 0, LCG_Id);
    float3 ret = thisObj->RandomPerpendicular(*rng);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Reflect_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* normal = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3 ret = thisObj->Reflect(*normal);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Refract_float3_float_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* normal = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float negativeSideRefractionIndex = (float)duk_require_number(ctx, 1);
    float positiveSideRefractionIndex = (float)duk_require_number(ctx, 2);
    float3 ret = thisObj->Refract(*normal, negativeSideRefractionIndex, positiveSideRefractionIndex);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_ProjectTo_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* direction = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3 ret = thisObj->ProjectTo(*direction);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_ProjectToNorm_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* direction = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3 ret = thisObj->ProjectToNorm(*direction);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_AngleBetween_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* other = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float ret = thisObj->AngleBetween(*other);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_AngleBetweenNorm_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* normalizedVector = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float ret = thisObj->AngleBetweenNorm(*normalizedVector);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Decompose_float3_float3_float3(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* direction = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* outParallel = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float3* outPerpendicular = GetCheckedObject<float3>(ctx, 2, float3_Id);
    thisObj->Decompose(*direction, *outParallel, *outPerpendicular);
    return 0;
}

static duk_ret_t float3_Lerp_float3_float(duk_context* ctx)
{
    float3* thisObj = GetThisObject<float3>(ctx, float3_Id);
    float3* b = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float t = (float)duk_require_number(ctx, 1);
    float3 ret = thisObj->Lerp(*b, t);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Ctor_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 0)
        return float3_Ctor(ctx);
    if (numArgs == 1 && GetObject<float3>(ctx, 0, float3_Id))
        return float3_Ctor_float3(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float3_Ctor_float_float_float(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float3_Ctor_float(ctx);
    if (numArgs == 2 && GetObject<float2>(ctx, 0, float2_Id) && duk_is_number(ctx, 1))
        return float3_Ctor_float2_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_Add_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<float3>(ctx, 0, float3_Id))
        return float3_Add_float3(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float3_Add_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_Sub_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<float3>(ctx, 0, float3_Id))
        return float3_Sub_float3(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float3_Sub_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_Mul_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<float3>(ctx, 0, float3_Id))
        return float3_Mul_float3(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float3_Mul_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_Div_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<float3>(ctx, 0, float3_Id))
        return float3_Div_float3(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float3_Div_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_Swizzled_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 4 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3))
        return float3_Swizzled_int_int_int_int(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float3_Swizzled_int_int_int(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float3_Swizzled_int_int(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_SetFromSphericalCoordinates_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float3_SetFromSphericalCoordinates_float_float_float(ctx);
    if (numArgs == 1 && GetObject<float3>(ctx, 0, float3_Id))
        return float3_SetFromSphericalCoordinates_float3(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float3_SetFromSphericalCoordinates_float_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_Equals_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && GetObject<float3>(ctx, 0, float3_Id) && duk_is_number(ctx, 1))
        return float3_Equals_float3_float(ctx);
    if (numArgs == 4 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3))
        return float3_Equals_float_float_float_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_Min_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float3_Min_float(ctx);
    if (numArgs == 1 && GetObject<float3>(ctx, 0, float3_Id))
        return float3_Min_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_Max_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float3_Max_float(ctx);
    if (numArgs == 1 && GetObject<float3>(ctx, 0, float3_Id))
        return float3_Max_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_Clamp_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float3_Clamp_float_float(ctx);
    if (numArgs == 2 && GetObject<float3>(ctx, 0, float3_Id) && GetObject<float3>(ctx, 1, float3_Id))
        return float3_Clamp_float3_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_ClampLength_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float3_ClampLength_float(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float3_ClampLength_float_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_Distance_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<float3>(ctx, 0, float3_Id))
        return float3_Distance_float3(ctx);
    if (numArgs == 1 && GetObject<Line>(ctx, 0, Line_Id))
        return float3_Distance_Line(ctx);
    if (numArgs == 1 && GetObject<Ray>(ctx, 0, Ray_Id))
        return float3_Distance_Ray(ctx);
    if (numArgs == 1 && GetObject<LineSegment>(ctx, 0, LineSegment_Id))
        return float3_Distance_LineSegment(ctx);
    if (numArgs == 1 && GetObject<Plane>(ctx, 0, Plane_Id))
        return float3_Distance_Plane(ctx);
    if (numArgs == 1 && GetObject<Triangle>(ctx, 0, Triangle_Id))
        return float3_Distance_Triangle(ctx);
    if (numArgs == 1 && GetObject<AABB>(ctx, 0, AABB_Id))
        return float3_Distance_AABB(ctx);
    if (numArgs == 1 && GetObject<OBB>(ctx, 0, OBB_Id))
        return float3_Distance_OBB(ctx);
    if (numArgs == 1 && GetObject<Sphere>(ctx, 0, Sphere_Id))
        return float3_Distance_Sphere(ctx);
    if (numArgs == 1 && GetObject<Capsule>(ctx, 0, Capsule_Id))
        return float3_Distance_Capsule(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_FromScalar_Static_float(duk_context* ctx)
{
    float scalar = (float)duk_require_number(ctx, 0);
    float3 ret = float3::FromScalar(scalar);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_FromSphericalCoordinates_Static_float_float_float(duk_context* ctx)
{
    float azimuth = (float)duk_require_number(ctx, 0);
    float inclination = (float)duk_require_number(ctx, 1);
    float radius = (float)duk_require_number(ctx, 2);
    float3 ret = float3::FromSphericalCoordinates(azimuth, inclination, radius);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_FromSphericalCoordinates_Static_float3(duk_context* ctx)
{
    float3* spherical = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3 ret = float3::FromSphericalCoordinates(*spherical);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_FromSphericalCoordinates_Static_float_float(duk_context* ctx)
{
    float azimuth = (float)duk_require_number(ctx, 0);
    float inclination = (float)duk_require_number(ctx, 1);
    float3 ret = float3::FromSphericalCoordinates(azimuth, inclination);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_AreCollinear_Static_float3_float3_float3_float(duk_context* ctx)
{
    float3* p1 = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* p2 = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float3* p3 = GetCheckedObject<float3>(ctx, 2, float3_Id);
    float epsilonSq = (float)duk_require_number(ctx, 3);
     bool ret = float3::AreCollinear(*p1, *p2, *p3, epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3_FromString_Static_string(duk_context* ctx)
{
    string str(duk_require_string(ctx, 0));
    float3 ret = float3::FromString(str);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_ScalarTripleProduct_Static_float3_float3_float3(duk_context* ctx)
{
    float3* u = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* v = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float3* w = GetCheckedObject<float3>(ctx, 2, float3_Id);
     float ret = float3::ScalarTripleProduct(*u, *v, *w);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float3_Lerp_Static_float3_float3_float(duk_context* ctx)
{
    float3* a = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* b = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float t = (float)duk_require_number(ctx, 2);
    float3 ret = float3::Lerp(*a, *b, t);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_Orthogonalize_Static_float3_float3(duk_context* ctx)
{
    float3* a = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* b = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float3::Orthogonalize(*a, *b);
    return 0;
}

static duk_ret_t float3_Orthogonalize_Static_float3_float3_float3(duk_context* ctx)
{
    float3* a = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* b = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float3* c = GetCheckedObject<float3>(ctx, 2, float3_Id);
    float3::Orthogonalize(*a, *b, *c);
    return 0;
}

static duk_ret_t float3_AreOrthogonal_Static_float3_float3_float(duk_context* ctx)
{
    float3* a = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* b = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float epsilon = (float)duk_require_number(ctx, 2);
     bool ret = float3::AreOrthogonal(*a, *b, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3_AreOrthogonal_Static_float3_float3_float3_float(duk_context* ctx)
{
    float3* a = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* b = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float3* c = GetCheckedObject<float3>(ctx, 2, float3_Id);
    float epsilon = (float)duk_require_number(ctx, 3);
     bool ret = float3::AreOrthogonal(*a, *b, *c, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3_Orthonormalize_Static_float3_float3(duk_context* ctx)
{
    float3* a = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* b = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float3::Orthonormalize(*a, *b);
    return 0;
}

static duk_ret_t float3_Orthonormalize_Static_float3_float3_float3(duk_context* ctx)
{
    float3* a = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* b = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float3* c = GetCheckedObject<float3>(ctx, 2, float3_Id);
    float3::Orthonormalize(*a, *b, *c);
    return 0;
}

static duk_ret_t float3_AreOrthonormal_Static_float3_float3_float(duk_context* ctx)
{
    float3* a = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* b = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float epsilon = (float)duk_require_number(ctx, 2);
     bool ret = float3::AreOrthonormal(*a, *b, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3_AreOrthonormal_Static_float3_float3_float3_float(duk_context* ctx)
{
    float3* a = GetCheckedObject<float3>(ctx, 0, float3_Id);
    float3* b = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float3* c = GetCheckedObject<float3>(ctx, 2, float3_Id);
    float epsilon = (float)duk_require_number(ctx, 3);
     bool ret = float3::AreOrthonormal(*a, *b, *c, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float3_RandomDir_Static_LCG_float(duk_context* ctx)
{
    LCG* lcg = GetCheckedObject<LCG>(ctx, 0, LCG_Id);
    float length = (float)duk_require_number(ctx, 1);
    float3 ret = float3::RandomDir(*lcg, length);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_RandomSphere_Static_LCG_float3_float(duk_context* ctx)
{
    LCG* lcg = GetCheckedObject<LCG>(ctx, 0, LCG_Id);
    float3* center = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float radius = (float)duk_require_number(ctx, 2);
    float3 ret = float3::RandomSphere(*lcg, *center, radius);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_RandomBox_Static_LCG_float_float_float_float_float_float(duk_context* ctx)
{
    LCG* lcg = GetCheckedObject<LCG>(ctx, 0, LCG_Id);
    float xmin = (float)duk_require_number(ctx, 1);
    float xmax = (float)duk_require_number(ctx, 2);
    float ymin = (float)duk_require_number(ctx, 3);
    float ymax = (float)duk_require_number(ctx, 4);
    float zmin = (float)duk_require_number(ctx, 5);
    float zmax = (float)duk_require_number(ctx, 6);
    float3 ret = float3::RandomBox(*lcg, xmin, xmax, ymin, ymax, zmin, zmax);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_RandomBox_Static_LCG_float3_float3(duk_context* ctx)
{
    LCG* lcg = GetCheckedObject<LCG>(ctx, 0, LCG_Id);
    float3* minValues = GetCheckedObject<float3>(ctx, 1, float3_Id);
    float3* maxValues = GetCheckedObject<float3>(ctx, 2, float3_Id);
    float3 ret = float3::RandomBox(*lcg, *minValues, *maxValues);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_RandomBox_Static_LCG_float_float(duk_context* ctx)
{
    LCG* lcg = GetCheckedObject<LCG>(ctx, 0, LCG_Id);
    float minElem = (float)duk_require_number(ctx, 1);
    float maxElem = (float)duk_require_number(ctx, 2);
    float3 ret = float3::RandomBox(*lcg, minElem, maxElem);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_RandomGeneral_Static_LCG_float_float(duk_context* ctx)
{
    LCG* lcg = GetCheckedObject<LCG>(ctx, 0, LCG_Id);
    float minElem = (float)duk_require_number(ctx, 1);
    float maxElem = (float)duk_require_number(ctx, 2);
    float3 ret = float3::RandomGeneral(*lcg, minElem, maxElem);
    PushValueObjectCopy<float3>(ctx, ret, float3_Id, float3_Dtor);
    return 1;
}

static duk_ret_t float3_FromSphericalCoordinates_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float3_FromSphericalCoordinates_Static_float_float_float(ctx);
    if (numArgs == 1 && GetObject<float3>(ctx, 0, float3_Id))
        return float3_FromSphericalCoordinates_Static_float3(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float3_FromSphericalCoordinates_Static_float_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_Orthogonalize_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && GetObject<float3>(ctx, 0, float3_Id) && GetObject<float3>(ctx, 1, float3_Id))
        return float3_Orthogonalize_Static_float3_float3(ctx);
    if (numArgs == 3 && GetObject<float3>(ctx, 0, float3_Id) && GetObject<float3>(ctx, 1, float3_Id) && GetObject<float3>(ctx, 2, float3_Id))
        return float3_Orthogonalize_Static_float3_float3_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_AreOrthogonal_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetObject<float3>(ctx, 0, float3_Id) && GetObject<float3>(ctx, 1, float3_Id) && duk_is_number(ctx, 2))
        return float3_AreOrthogonal_Static_float3_float3_float(ctx);
    if (numArgs == 4 && GetObject<float3>(ctx, 0, float3_Id) && GetObject<float3>(ctx, 1, float3_Id) && GetObject<float3>(ctx, 2, float3_Id) && duk_is_number(ctx, 3))
        return float3_AreOrthogonal_Static_float3_float3_float3_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_Orthonormalize_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && GetObject<float3>(ctx, 0, float3_Id) && GetObject<float3>(ctx, 1, float3_Id))
        return float3_Orthonormalize_Static_float3_float3(ctx);
    if (numArgs == 3 && GetObject<float3>(ctx, 0, float3_Id) && GetObject<float3>(ctx, 1, float3_Id) && GetObject<float3>(ctx, 2, float3_Id))
        return float3_Orthonormalize_Static_float3_float3_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_AreOrthonormal_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetObject<float3>(ctx, 0, float3_Id) && GetObject<float3>(ctx, 1, float3_Id) && duk_is_number(ctx, 2))
        return float3_AreOrthonormal_Static_float3_float3_float(ctx);
    if (numArgs == 4 && GetObject<float3>(ctx, 0, float3_Id) && GetObject<float3>(ctx, 1, float3_Id) && GetObject<float3>(ctx, 2, float3_Id) && duk_is_number(ctx, 3))
        return float3_AreOrthonormal_Static_float3_float3_float3_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float3_RandomBox_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 7 && GetObject<LCG>(ctx, 0, LCG_Id) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3) && duk_is_number(ctx, 4) && duk_is_number(ctx, 5) && duk_is_number(ctx, 6))
        return float3_RandomBox_Static_LCG_float_float_float_float_float_float(ctx);
    if (numArgs == 3 && GetObject<LCG>(ctx, 0, LCG_Id) && GetObject<float3>(ctx, 1, float3_Id) && GetObject<float3>(ctx, 2, float3_Id))
        return float3_RandomBox_Static_LCG_float3_float3(ctx);
    if (numArgs == 3 && GetObject<LCG>(ctx, 0, LCG_Id) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float3_RandomBox_Static_LCG_float_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static const duk_function_list_entry float3_Functions[] = {
    {"At", float3_At_int, 1}
    ,{"Add", float3_Add_Selector, DUK_VARARGS}
    ,{"Sub", float3_Sub_Selector, DUK_VARARGS}
    ,{"SubLeft", float3_SubLeft_float, 1}
    ,{"Mul", float3_Mul_Selector, DUK_VARARGS}
    ,{"Div", float3_Div_Selector, DUK_VARARGS}
    ,{"DivLeft", float3_DivLeft_float, 1}
    ,{"xx", float3_xx, 0}
    ,{"xy", float3_xy, 0}
    ,{"xz", float3_xz, 0}
    ,{"yx", float3_yx, 0}
    ,{"yy", float3_yy, 0}
    ,{"yz", float3_yz, 0}
    ,{"zx", float3_zx, 0}
    ,{"zy", float3_zy, 0}
    ,{"zz", float3_zz, 0}
    ,{"xxx", float3_xxx, 0}
    ,{"xxy", float3_xxy, 0}
    ,{"xxz", float3_xxz, 0}
    ,{"xyx", float3_xyx, 0}
    ,{"xyy", float3_xyy, 0}
    ,{"xyz", float3_xyz, 0}
    ,{"xzx", float3_xzx, 0}
    ,{"xzy", float3_xzy, 0}
    ,{"xzz", float3_xzz, 0}
    ,{"yxx", float3_yxx, 0}
    ,{"yxy", float3_yxy, 0}
    ,{"yxz", float3_yxz, 0}
    ,{"yyx", float3_yyx, 0}
    ,{"yyy", float3_yyy, 0}
    ,{"yyz", float3_yyz, 0}
    ,{"yzx", float3_yzx, 0}
    ,{"yzy", float3_yzy, 0}
    ,{"yzz", float3_yzz, 0}
    ,{"zxx", float3_zxx, 0}
    ,{"zxy", float3_zxy, 0}
    ,{"zxz", float3_zxz, 0}
    ,{"zyx", float3_zyx, 0}
    ,{"zyy", float3_zyy, 0}
    ,{"zyz", float3_zyz, 0}
    ,{"zzx", float3_zzx, 0}
    ,{"zzy", float3_zzy, 0}
    ,{"zzz", float3_zzz, 0}
    ,{"Swizzled", float3_Swizzled_Selector, DUK_VARARGS}
    ,{"SetFromScalar", float3_SetFromScalar_float, 1}
    ,{"Set", float3_Set_float_float_float, 3}
    ,{"SetFromSphericalCoordinates", float3_SetFromSphericalCoordinates_Selector, DUK_VARARGS}
    ,{"ToPos4", float3_ToPos4, 0}
    ,{"ToDir4", float3_ToDir4, 0}
    ,{"ToSphericalCoordinates", float3_ToSphericalCoordinates, 0}
    ,{"ToSphericalCoordinatesNormalized", float3_ToSphericalCoordinatesNormalized, 0}
    ,{"Length", float3_Length, 0}
    ,{"LengthSq", float3_LengthSq, 0}
    ,{"Normalize", float3_Normalize, 0}
    ,{"Normalized", float3_Normalized, 0}
    ,{"ScaleToLength", float3_ScaleToLength_float, 1}
    ,{"ScaledToLength", float3_ScaledToLength_float, 1}
    ,{"IsNormalized", float3_IsNormalized_float, 1}
    ,{"IsZero", float3_IsZero_float, 1}
    ,{"IsFinite", float3_IsFinite, 0}
    ,{"IsPerpendicular", float3_IsPerpendicular_float3_float, 2}
    ,{"Equals", float3_Equals_Selector, DUK_VARARGS}
    ,{"BitEquals", float3_BitEquals_float3, 1}
    ,{"ToString", float3_ToString, 0}
    ,{"SerializeToString", float3_SerializeToString, 0}
    ,{"SerializeToCodeString", float3_SerializeToCodeString, 0}
    ,{"SumOfElements", float3_SumOfElements, 0}
    ,{"ProductOfElements", float3_ProductOfElements, 0}
    ,{"AverageOfElements", float3_AverageOfElements, 0}
    ,{"MinElement", float3_MinElement, 0}
    ,{"MinElementIndex", float3_MinElementIndex, 0}
    ,{"MaxElement", float3_MaxElement, 0}
    ,{"MaxElementIndex", float3_MaxElementIndex, 0}
    ,{"Abs", float3_Abs, 0}
    ,{"Neg", float3_Neg, 0}
    ,{"Recip", float3_Recip, 0}
    ,{"Min", float3_Min_Selector, DUK_VARARGS}
    ,{"Max", float3_Max_Selector, DUK_VARARGS}
    ,{"Clamp", float3_Clamp_Selector, DUK_VARARGS}
    ,{"Clamp01", float3_Clamp01, 0}
    ,{"ClampLength", float3_ClampLength_Selector, DUK_VARARGS}
    ,{"Distance", float3_Distance_Selector, DUK_VARARGS}
    ,{"DistanceSq", float3_DistanceSq_float3, 1}
    ,{"Dot", float3_Dot_float3, 1}
    ,{"Cross", float3_Cross_float3, 1}
    ,{"OuterProduct", float3_OuterProduct_float3, 1}
    ,{"Perpendicular", float3_Perpendicular_float3_float3, 2}
    ,{"AnotherPerpendicular", float3_AnotherPerpendicular_float3_float3, 2}
    ,{"PerpendicularBasis", float3_PerpendicularBasis_float3_float3, 2}
    ,{"RandomPerpendicular", float3_RandomPerpendicular_LCG, 1}
    ,{"Reflect", float3_Reflect_float3, 1}
    ,{"Refract", float3_Refract_float3_float_float, 3}
    ,{"ProjectTo", float3_ProjectTo_float3, 1}
    ,{"ProjectToNorm", float3_ProjectToNorm_float3, 1}
    ,{"AngleBetween", float3_AngleBetween_float3, 1}
    ,{"AngleBetweenNorm", float3_AngleBetweenNorm_float3, 1}
    ,{"Decompose", float3_Decompose_float3_float3_float3, 3}
    ,{"Lerp", float3_Lerp_float3_float, 2}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry float3_StaticFunctions[] = {
    {"FromScalar", float3_FromScalar_Static_float, 1}
    ,{"FromSphericalCoordinates", float3_FromSphericalCoordinates_Static_Selector, DUK_VARARGS}
    ,{"AreCollinear", float3_AreCollinear_Static_float3_float3_float3_float, 4}
    ,{"FromString", float3_FromString_Static_string, 1}
    ,{"ScalarTripleProduct", float3_ScalarTripleProduct_Static_float3_float3_float3, 3}
    ,{"Lerp", float3_Lerp_Static_float3_float3_float, 3}
    ,{"Orthogonalize", float3_Orthogonalize_Static_Selector, DUK_VARARGS}
    ,{"AreOrthogonal", float3_AreOrthogonal_Static_Selector, DUK_VARARGS}
    ,{"Orthonormalize", float3_Orthonormalize_Static_Selector, DUK_VARARGS}
    ,{"AreOrthonormal", float3_AreOrthonormal_Static_Selector, DUK_VARARGS}
    ,{"RandomDir", float3_RandomDir_Static_LCG_float, 2}
    ,{"RandomSphere", float3_RandomSphere_Static_LCG_float3_float, 3}
    ,{"RandomBox", float3_RandomBox_Static_Selector, DUK_VARARGS}
    ,{"RandomGeneral", float3_RandomGeneral_Static_LCG_float_float, 3}
    ,{nullptr, nullptr, 0}
};

void Expose_float3(duk_context* ctx)
{
    duk_push_c_function(ctx, float3_Ctor_Selector, DUK_VARARGS);
    duk_put_function_list(ctx, -1, float3_StaticFunctions);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, float3_Functions);
    DefineProperty(ctx, "x", float3_Get_x, float3_Set_x);
    DefineProperty(ctx, "y", float3_Get_y, float3_Set_y);
    DefineProperty(ctx, "z", float3_Get_z, float3_Set_z);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, float3_Id);
}

}
