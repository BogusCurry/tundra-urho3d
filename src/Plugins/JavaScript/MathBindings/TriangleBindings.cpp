// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "BindingsHelpers.h"
#include "Geometry/Triangle.h"
#include "Math/float3x3.h"
#include "Math/float3x4.h"
#include "Math/float4x4.h"
#include "Math/Quat.h"
#include "Math/float3.h"
#include "Math/float2.h"
#include "Geometry/LineSegment.h"
#include "Geometry/Plane.h"
#include "Geometry/AABB.h"
#include "Geometry/Sphere.h"
#include "Geometry/Capsule.h"
#include "Geometry/OBB.h"
#include "Geometry/Frustum.h"
#include "Geometry/Line.h"
#include "Algorithm/Random/LCG.h"

namespace JSBindings
{

extern const char* float3x3_Id;
extern const char* float3x4_Id;
extern const char* float4x4_Id;
extern const char* Quat_Id;
extern const char* float3_Id;
extern const char* float2_Id;
extern const char* LineSegment_Id;
extern const char* Plane_Id;
extern const char* AABB_Id;
extern const char* Sphere_Id;
extern const char* Capsule_Id;
extern const char* OBB_Id;
extern const char* Frustum_Id;
extern const char* Line_Id;
extern const char* LCG_Id;

duk_ret_t float3x3_Dtor(duk_context* ctx);
duk_ret_t float3x4_Dtor(duk_context* ctx);
duk_ret_t float4x4_Dtor(duk_context* ctx);
duk_ret_t Quat_Dtor(duk_context* ctx);
duk_ret_t float3_Dtor(duk_context* ctx);
duk_ret_t float2_Dtor(duk_context* ctx);
duk_ret_t LineSegment_Dtor(duk_context* ctx);
duk_ret_t Plane_Dtor(duk_context* ctx);
duk_ret_t AABB_Dtor(duk_context* ctx);
duk_ret_t Sphere_Dtor(duk_context* ctx);
duk_ret_t Capsule_Dtor(duk_context* ctx);
duk_ret_t OBB_Dtor(duk_context* ctx);
duk_ret_t Frustum_Dtor(duk_context* ctx);
duk_ret_t Line_Dtor(duk_context* ctx);
duk_ret_t LCG_Dtor(duk_context* ctx);

const char* Triangle_Id = "Triangle";

duk_ret_t Triangle_Dtor(duk_context* ctx)
{
    Triangle* obj = GetObject<Triangle>(ctx, 0, Triangle_Id);
    if (obj)
    {
        delete obj;
        SetObject(ctx, 0, 0, Triangle_Id);
    }
    return 0;
}

static duk_ret_t Triangle_Ctor(duk_context* ctx)
{
    Triangle* newObj = new Triangle();
    PushConstructorResult<Triangle>(ctx, newObj, Triangle_Id, Triangle_Dtor);
    return 0;
}

static duk_ret_t Triangle_Transform_float3x3(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    float3x3* transform = GetCheckedObject<float3x3>(ctx, 0, float3x3_Id);
    thisObj->Transform(*transform);
    return 0;
}

static duk_ret_t Triangle_Transform_float3x4(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    float3x4* transform = GetCheckedObject<float3x4>(ctx, 0, float3x4_Id);
    thisObj->Transform(*transform);
    return 0;
}

static duk_ret_t Triangle_Transform_float4x4(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    float4x4* transform = GetCheckedObject<float4x4>(ctx, 0, float4x4_Id);
    thisObj->Transform(*transform);
    return 0;
}

static duk_ret_t Triangle_Transform_Quat(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    Quat* transform = GetCheckedObject<Quat>(ctx, 0, Quat_Id);
    thisObj->Transform(*transform);
    return 0;
}

static duk_ret_t Triangle_Area(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    float ret = thisObj->Area();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_Perimeter(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    float ret = thisObj->Perimeter();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_Edge_int(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    int i = (int)duk_require_number(ctx, 0);
    LineSegment ret = thisObj->Edge(i);
    PushValueObjectCopy<LineSegment>(ctx, ret, LineSegment_Id, LineSegment_Dtor);
    return 1;
}

static duk_ret_t Triangle_PlaneCCW(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    Plane ret = thisObj->PlaneCCW();
    PushValueObjectCopy<Plane>(ctx, ret, Plane_Id, Plane_Dtor);
    return 1;
}

static duk_ret_t Triangle_PlaneCW(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    Plane ret = thisObj->PlaneCW();
    PushValueObjectCopy<Plane>(ctx, ret, Plane_Id, Plane_Dtor);
    return 1;
}

static duk_ret_t Triangle_BoundingAABB(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    AABB ret = thisObj->BoundingAABB();
    PushValueObjectCopy<AABB>(ctx, ret, AABB_Id, AABB_Dtor);
    return 1;
}

static duk_ret_t Triangle_IsFinite(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    bool ret = thisObj->IsFinite();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_IsDegenerate_float(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    float epsilon = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->IsDegenerate(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_Contains_LineSegment_float(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    LineSegment* lineSegment = GetCheckedObject<LineSegment>(ctx, 0, LineSegment_Id);
    float triangleThickness = (float)duk_require_number(ctx, 1);
    bool ret = thisObj->Contains(*lineSegment, triangleThickness);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_Contains_Triangle_float(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    Triangle* triangle = GetCheckedObject<Triangle>(ctx, 0, Triangle_Id);
    float triangleThickness = (float)duk_require_number(ctx, 1);
    bool ret = thisObj->Contains(*triangle, triangleThickness);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_Distance_Sphere(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    Sphere* sphere = GetCheckedObject<Sphere>(ctx, 0, Sphere_Id);
    float ret = thisObj->Distance(*sphere);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_Distance_Capsule(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    Capsule* capsule = GetCheckedObject<Capsule>(ctx, 0, Capsule_Id);
    float ret = thisObj->Distance(*capsule);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_Intersects_Plane(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    Plane* plane = GetCheckedObject<Plane>(ctx, 0, Plane_Id);
    bool ret = thisObj->Intersects(*plane);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_Intersects_Sphere(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    Sphere* sphere = GetCheckedObject<Sphere>(ctx, 0, Sphere_Id);
    bool ret = thisObj->Intersects(*sphere);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_Intersects_AABB(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    AABB* aabb = GetCheckedObject<AABB>(ctx, 0, AABB_Id);
    bool ret = thisObj->Intersects(*aabb);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_Intersects_OBB(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    OBB* obb = GetCheckedObject<OBB>(ctx, 0, OBB_Id);
    bool ret = thisObj->Intersects(*obb);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_Intersects_Frustum(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    Frustum* frustum = GetCheckedObject<Frustum>(ctx, 0, Frustum_Id);
    bool ret = thisObj->Intersects(*frustum);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_Intersects_Capsule(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    Capsule* capsule = GetCheckedObject<Capsule>(ctx, 0, Capsule_Id);
    bool ret = thisObj->Intersects(*capsule);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_Equals_Triangle_float(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    Triangle* rhs = GetCheckedObject<Triangle>(ctx, 0, Triangle_Id);
    float epsilon = (float)duk_require_number(ctx, 1);
    bool ret = thisObj->Equals(*rhs, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_BitEquals_Triangle(duk_context* ctx)
{
    Triangle* thisObj = GetThisObject<Triangle>(ctx, Triangle_Id);
    Triangle* other = GetCheckedObject<Triangle>(ctx, 0, Triangle_Id);
    bool ret = thisObj->BitEquals(*other);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_Transform_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<float3x3>(ctx, 0, float3x3_Id))
        return Triangle_Transform_float3x3(ctx);
    if (numArgs == 1 && GetObject<float3x4>(ctx, 0, float3x4_Id))
        return Triangle_Transform_float3x4(ctx);
    if (numArgs == 1 && GetObject<float4x4>(ctx, 0, float4x4_Id))
        return Triangle_Transform_float4x4(ctx);
    if (numArgs == 1 && GetObject<Quat>(ctx, 0, Quat_Id))
        return Triangle_Transform_Quat(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Triangle_Contains_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && GetObject<LineSegment>(ctx, 0, LineSegment_Id) && duk_is_number(ctx, 1))
        return Triangle_Contains_LineSegment_float(ctx);
    if (numArgs == 2 && GetObject<Triangle>(ctx, 0, Triangle_Id) && duk_is_number(ctx, 1))
        return Triangle_Contains_Triangle_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Triangle_Distance_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<Sphere>(ctx, 0, Sphere_Id))
        return Triangle_Distance_Sphere(ctx);
    if (numArgs == 1 && GetObject<Capsule>(ctx, 0, Capsule_Id))
        return Triangle_Distance_Capsule(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Triangle_Intersects_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<Plane>(ctx, 0, Plane_Id))
        return Triangle_Intersects_Plane(ctx);
    if (numArgs == 1 && GetObject<Sphere>(ctx, 0, Sphere_Id))
        return Triangle_Intersects_Sphere(ctx);
    if (numArgs == 1 && GetObject<AABB>(ctx, 0, AABB_Id))
        return Triangle_Intersects_AABB(ctx);
    if (numArgs == 1 && GetObject<OBB>(ctx, 0, OBB_Id))
        return Triangle_Intersects_OBB(ctx);
    if (numArgs == 1 && GetObject<Frustum>(ctx, 0, Frustum_Id))
        return Triangle_Intersects_Frustum(ctx);
    if (numArgs == 1 && GetObject<Capsule>(ctx, 0, Capsule_Id))
        return Triangle_Intersects_Capsule(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Triangle_BarycentricInsideTriangle_Static_float3(duk_context* ctx)
{
    float3* uvw = GetCheckedObject<float3>(ctx, 0, float3_Id);
    bool ret = Triangle::BarycentricInsideTriangle(*uvw);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Triangle_Area2D_Static_float2_float2_float2(duk_context* ctx)
{
    float2* p1 = GetCheckedObject<float2>(ctx, 0, float2_Id);
    float2* p2 = GetCheckedObject<float2>(ctx, 1, float2_Id);
    float2* p3 = GetCheckedObject<float2>(ctx, 2, float2_Id);
    float ret = Triangle::Area2D(*p1, *p2, *p3);
    duk_push_number(ctx, ret);
    return 1;
}

static const duk_function_list_entry Triangle_Functions[] = {
    {"Transform", Triangle_Transform_Selector, DUK_VARARGS}
    ,{"Area", Triangle_Area, 0}
    ,{"Perimeter", Triangle_Perimeter, 0}
    ,{"Edge", Triangle_Edge_int, 1}
    ,{"PlaneCCW", Triangle_PlaneCCW, 0}
    ,{"PlaneCW", Triangle_PlaneCW, 0}
    ,{"BoundingAABB", Triangle_BoundingAABB, 0}
    ,{"IsFinite", Triangle_IsFinite, 0}
    ,{"IsDegenerate", Triangle_IsDegenerate_float, 1}
    ,{"Contains", Triangle_Contains_Selector, DUK_VARARGS}
    ,{"Distance", Triangle_Distance_Selector, DUK_VARARGS}
    ,{"Intersects", Triangle_Intersects_Selector, DUK_VARARGS}
    ,{"Equals", Triangle_Equals_Triangle_float, 2}
    ,{"BitEquals", Triangle_BitEquals_Triangle, 1}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry Triangle_StaticFunctions[] = {
    {"BarycentricInsideTriangle", Triangle_BarycentricInsideTriangle_Static_float3, 1}
    ,{"Area2D", Triangle_Area2D_Static_float2_float2_float2, 3}
    ,{nullptr, nullptr, 0}
};

void Expose_Triangle(duk_context* ctx)
{
    duk_push_c_function(ctx, Triangle_Ctor, DUK_VARARGS);
    duk_put_function_list(ctx, -1, Triangle_StaticFunctions);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Triangle_Functions);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, Triangle_Id);
}

}
