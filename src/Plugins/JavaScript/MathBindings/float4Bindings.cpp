// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "Math/float4.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Math/float3.h"
#include "Math/float2.h"
#include "Math/float4x4.h"
#include "Algorithm/Random/LCG.h"

using namespace std;

namespace JSBindings
{

extern const char* float3_ID;
extern const char* float2_ID;
extern const char* float4x4_ID;
extern const char* LCG_ID;

duk_ret_t float3_Finalizer(duk_context* ctx);
duk_ret_t float2_Finalizer(duk_context* ctx);
duk_ret_t float4x4_Finalizer(duk_context* ctx);
duk_ret_t LCG_Finalizer(duk_context* ctx);

const char* float4_ID = "float4";

duk_ret_t float4_Finalizer(duk_context* ctx)
{
    float4* obj = GetValueObject<float4>(ctx, 0, float4_ID);
    if (obj)
    {
        delete obj;
        SetValueObject(ctx, 0, 0, float4_ID);
    }
    return 0;
}

static duk_ret_t float4_Set_x(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float x = (float)duk_require_number(ctx, 0);
    thisObj->x = x;
    return 0;
}

static duk_ret_t float4_Get_x(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    duk_push_number(ctx, thisObj->x);
    return 1;
}

static duk_ret_t float4_Set_y(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float y = (float)duk_require_number(ctx, 0);
    thisObj->y = y;
    return 0;
}

static duk_ret_t float4_Get_y(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    duk_push_number(ctx, thisObj->y);
    return 1;
}

static duk_ret_t float4_Set_z(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float z = (float)duk_require_number(ctx, 0);
    thisObj->z = z;
    return 0;
}

static duk_ret_t float4_Get_z(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    duk_push_number(ctx, thisObj->z);
    return 1;
}

static duk_ret_t float4_Set_w(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float w = (float)duk_require_number(ctx, 0);
    thisObj->w = w;
    return 0;
}

static duk_ret_t float4_Get_w(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    duk_push_number(ctx, thisObj->w);
    return 1;
}

static duk_ret_t float4_Ctor(duk_context* ctx)
{
    float4* newObj = new float4();
    PushConstructorResult<float4>(ctx, newObj, float4_ID, float4_Finalizer);
    return 0;
}

static duk_ret_t float4_Ctor_float4(duk_context* ctx)
{
    float4& rhs = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4* newObj = new float4(rhs);
    PushConstructorResult<float4>(ctx, newObj, float4_ID, float4_Finalizer);
    return 0;
}

static duk_ret_t float4_Ctor_float_float_float_float(duk_context* ctx)
{
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    float w = (float)duk_require_number(ctx, 3);
    float4* newObj = new float4(x, y, z, w);
    PushConstructorResult<float4>(ctx, newObj, float4_ID, float4_Finalizer);
    return 0;
}

static duk_ret_t float4_Ctor_float3_float(duk_context* ctx)
{
    float3& xyz = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float w = (float)duk_require_number(ctx, 1);
    float4* newObj = new float4(xyz, w);
    PushConstructorResult<float4>(ctx, newObj, float4_ID, float4_Finalizer);
    return 0;
}

static duk_ret_t float4_Ctor_float_float_float2(duk_context* ctx)
{
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float2& zw = *GetCheckedValueObject<float2>(ctx, 2, float2_ID);
    float4* newObj = new float4(x, y, zw);
    PushConstructorResult<float4>(ctx, newObj, float4_ID, float4_Finalizer);
    return 0;
}

static duk_ret_t float4_Ctor_float_float2_float(duk_context* ctx)
{
    float x = (float)duk_require_number(ctx, 0);
    float2& yz = *GetCheckedValueObject<float2>(ctx, 1, float2_ID);
    float w = (float)duk_require_number(ctx, 2);
    float4* newObj = new float4(x, yz, w);
    PushConstructorResult<float4>(ctx, newObj, float4_ID, float4_Finalizer);
    return 0;
}

static duk_ret_t float4_Ctor_float_float3(duk_context* ctx)
{
    float x = (float)duk_require_number(ctx, 0);
    float3& yzw = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float4* newObj = new float4(x, yzw);
    PushConstructorResult<float4>(ctx, newObj, float4_ID, float4_Finalizer);
    return 0;
}

static duk_ret_t float4_Ctor_float2_float2(duk_context* ctx)
{
    float2& xy = *GetCheckedValueObject<float2>(ctx, 0, float2_ID);
    float2& zw = *GetCheckedValueObject<float2>(ctx, 1, float2_ID);
    float4* newObj = new float4(xy, zw);
    PushConstructorResult<float4>(ctx, newObj, float4_ID, float4_Finalizer);
    return 0;
}

static duk_ret_t float4_Ctor_float2_float_float(duk_context* ctx)
{
    float2& xy = *GetCheckedValueObject<float2>(ctx, 0, float2_ID);
    float z = (float)duk_require_number(ctx, 1);
    float w = (float)duk_require_number(ctx, 2);
    float4* newObj = new float4(xy, z, w);
    PushConstructorResult<float4>(ctx, newObj, float4_ID, float4_Finalizer);
    return 0;
}

static duk_ret_t float4_At_int(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    int index = (int)duk_require_number(ctx, 0);
    float & ret = thisObj->At(index);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Add_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& rhs = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->Add(rhs);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Add_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float s = (float)duk_require_number(ctx, 0);
    float4 ret = thisObj->Add(s);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Sub_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& rhs = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->Sub(rhs);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Sub_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float s = (float)duk_require_number(ctx, 0);
    float4 ret = thisObj->Sub(s);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_SubLeft_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float s = (float)duk_require_number(ctx, 0);
    float4 ret = thisObj->SubLeft(s);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Mul_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& v = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->Mul(v);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Mul_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float s = (float)duk_require_number(ctx, 0);
    float4 ret = thisObj->Mul(s);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Div_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& v = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->Div(v);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Div_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float s = (float)duk_require_number(ctx, 0);
    float4 ret = thisObj->Div(s);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_DivLeft_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float s = (float)duk_require_number(ctx, 0);
    float4 ret = thisObj->DivLeft(s);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_xy(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float2 ret = thisObj->xy();
    PushValueObjectCopy<float2>(ctx, ret, float2_ID, float2_Finalizer);
    return 1;
}

static duk_ret_t float4_xyz(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float3 ret = thisObj->xyz();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4_Float3Part(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float3 & ret = thisObj->Float3Part();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4_Swizzled_int_int_int_int(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    int i = (int)duk_require_number(ctx, 0);
    int j = (int)duk_require_number(ctx, 1);
    int k = (int)duk_require_number(ctx, 2);
    int l = (int)duk_require_number(ctx, 3);
    float4 ret = thisObj->Swizzled(i, j, k, l);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Swizzled_int_int_int(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    int i = (int)duk_require_number(ctx, 0);
    int j = (int)duk_require_number(ctx, 1);
    int k = (int)duk_require_number(ctx, 2);
    float3 ret = thisObj->Swizzled(i, j, k);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4_Swizzled_int_int(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    int i = (int)duk_require_number(ctx, 0);
    int j = (int)duk_require_number(ctx, 1);
    float2 ret = thisObj->Swizzled(i, j);
    PushValueObjectCopy<float2>(ctx, ret, float2_ID, float2_Finalizer);
    return 1;
}

static duk_ret_t float4_xxxx(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->xxxx();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_xxxw(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->xxxw();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_yyyy(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->yyyy();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_yyyw(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->yyyw();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_zzzz(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->zzzz();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_zzzw(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->zzzw();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_wwww(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->wwww();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_SetFromScalar_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float scalar = (float)duk_require_number(ctx, 0);
    thisObj->SetFromScalar(scalar);
    return 0;
}

static duk_ret_t float4_SetFromScalar_float_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float scalar = (float)duk_require_number(ctx, 0);
    float w = (float)duk_require_number(ctx, 1);
    thisObj->SetFromScalar(scalar, w);
    return 0;
}

static duk_ret_t float4_SetFromSphericalCoordinates_float_float_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float azimuth = (float)duk_require_number(ctx, 0);
    float inclination = (float)duk_require_number(ctx, 1);
    float radius = (float)duk_require_number(ctx, 2);
    thisObj->SetFromSphericalCoordinates(azimuth, inclination, radius);
    return 0;
}

static duk_ret_t float4_SetFromSphericalCoordinates_float3(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float3& spherical = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->SetFromSphericalCoordinates(spherical);
    return 0;
}

static duk_ret_t float4_SetFromSphericalCoordinates_float_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float azimuth = (float)duk_require_number(ctx, 0);
    float inclination = (float)duk_require_number(ctx, 1);
    thisObj->SetFromSphericalCoordinates(azimuth, inclination);
    return 0;
}

static duk_ret_t float4_ToSphericalCoordinates(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float3 ret = thisObj->ToSphericalCoordinates();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4_ToSphericalCoordinatesNormalized(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float2 ret = thisObj->ToSphericalCoordinatesNormalized();
    PushValueObjectCopy<float2>(ctx, ret, float2_ID, float2_Finalizer);
    return 1;
}

static duk_ret_t float4_Set_float_float_float_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    float w = (float)duk_require_number(ctx, 3);
    thisObj->Set(x, y, z, w);
    return 0;
}

static duk_ret_t float4_LengthSq3(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float ret = thisObj->LengthSq3();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Length3(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float ret = thisObj->Length3();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_LengthSq4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float ret = thisObj->LengthSq4();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_LengthSq(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float ret = thisObj->LengthSq();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Length4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float ret = thisObj->Length4();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Length(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float ret = thisObj->Length();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Normalize3(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float ret = thisObj->Normalize3();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Normalize4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float ret = thisObj->Normalize4();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Normalize(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float ret = thisObj->Normalize();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Normalized3(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->Normalized3();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Normalized4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->Normalized4();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Normalized(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->Normalized();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_NormalizeW(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    thisObj->NormalizeW();
    return 0;
}

static duk_ret_t float4_IsWZeroOrOne_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float epsilon = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-3f;
    bool ret = thisObj->IsWZeroOrOne(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_IsZero3_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float epsilonSq = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-6f;
    bool ret = thisObj->IsZero3(epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_IsZero4_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float epsilonSq = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-6f;
    bool ret = thisObj->IsZero4(epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_IsZero_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float epsilonSq = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-6f;
    bool ret = thisObj->IsZero(epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_IsNormalized3_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float epsilonSq = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-5f;
    bool ret = thisObj->IsNormalized3(epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_IsNormalized4_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float epsilonSq = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-5f;
    bool ret = thisObj->IsNormalized4(epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_IsNormalized_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float epsilonSq = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 1e-5f;
    bool ret = thisObj->IsNormalized(epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_Scale3_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float scalar = (float)duk_require_number(ctx, 0);
    thisObj->Scale3(scalar);
    return 0;
}

static duk_ret_t float4_ScaleToLength3_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float newLength = (float)duk_require_number(ctx, 0);
    float ret = thisObj->ScaleToLength3(newLength);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_ScaleToLength_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float newLength = (float)duk_require_number(ctx, 0);
    float ret = thisObj->ScaleToLength(newLength);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_ScaledToLength3_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float newLength = (float)duk_require_number(ctx, 0);
    float4 ret = thisObj->ScaledToLength3(newLength);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_ScaledToLength_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float newLength = (float)duk_require_number(ctx, 0);
    float4 ret = thisObj->ScaledToLength(newLength);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_IsFinite(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    bool ret = thisObj->IsFinite();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_IsPerpendicular3_float4_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& other = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float epsilonSq = numArgs > 1 ? (float)duk_require_number(ctx, 1) : 1e-5f;
    bool ret = thisObj->IsPerpendicular3(other, epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_IsPerpendicular_float4_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& other = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float epsilonSq = numArgs > 1 ? (float)duk_require_number(ctx, 1) : 1e-5f;
    bool ret = thisObj->IsPerpendicular(other, epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_ToString(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    string ret = thisObj->ToString();
    duk_push_string(ctx, ret.c_str());
    return 1;
}

static duk_ret_t float4_SerializeToString(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    string ret = thisObj->SerializeToString();
    duk_push_string(ctx, ret.c_str());
    return 1;
}

static duk_ret_t float4_SerializeToCodeString(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    string ret = thisObj->SerializeToCodeString();
    duk_push_string(ctx, ret.c_str());
    return 1;
}

static duk_ret_t float4_SumOfElements(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float ret = thisObj->SumOfElements();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_ProductOfElements(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float ret = thisObj->ProductOfElements();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_AverageOfElements(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float ret = thisObj->AverageOfElements();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_MinElement(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float ret = thisObj->MinElement();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_MinElementIndex(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    int ret = thisObj->MinElementIndex();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_MaxElement(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float ret = thisObj->MaxElement();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_MaxElementIndex(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    int ret = thisObj->MaxElementIndex();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Abs(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->Abs();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Neg3(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->Neg3();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Neg4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->Neg4();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Recip3(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->Recip3();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Recip4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->Recip4();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_RecipFast4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->RecipFast4();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Min_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float ceil = (float)duk_require_number(ctx, 0);
    float4 ret = thisObj->Min(ceil);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Min_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& ceil = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->Min(ceil);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Max_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float floor = (float)duk_require_number(ctx, 0);
    float4 ret = thisObj->Max(floor);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Max_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& floor = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->Max(floor);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Clamp_float_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float floor = (float)duk_require_number(ctx, 0);
    float ceil = (float)duk_require_number(ctx, 1);
    float4 ret = thisObj->Clamp(floor, ceil);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Clamp_float4_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& floor = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4& ceil = *GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    float4 ret = thisObj->Clamp(floor, ceil);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Clamp01(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 ret = thisObj->Clamp01();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Lerp_float4_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& b = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float t = (float)duk_require_number(ctx, 1);
    float4 ret = thisObj->Lerp(b, t);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Distance3Sq_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& rhs = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float ret = thisObj->Distance3Sq(rhs);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Distance3_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& rhs = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float ret = thisObj->Distance3(rhs);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Distance4Sq_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& rhs = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float ret = thisObj->Distance4Sq(rhs);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_DistanceSq_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& rhs = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float ret = thisObj->DistanceSq(rhs);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Distance4_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& rhs = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float ret = thisObj->Distance4(rhs);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Distance_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& rhs = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float ret = thisObj->Distance(rhs);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Dot3_float3(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float3& rhs = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float ret = thisObj->Dot3(rhs);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Dot3_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& rhs = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float ret = thisObj->Dot3(rhs);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Dot4_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& rhs = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float ret = thisObj->Dot4(rhs);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Dot_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& rhs = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float ret = thisObj->Dot(rhs);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_Cross3_float3(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float3& rhs = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float4 ret = thisObj->Cross3(rhs);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Cross3_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& rhs = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->Cross3(rhs);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Cross_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& rhs = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->Cross(rhs);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_OuterProduct_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& rhs = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4x4 ret = thisObj->OuterProduct(rhs);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4_Perpendicular3_float3_float3(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float3 hint = numArgs > 0 ? *GetCheckedValueObject<float3>(ctx, 0, float3_ID) : float3(0, 1, 0);
    float3 hint2 = numArgs > 1 ? *GetCheckedValueObject<float3>(ctx, 1, float3_ID) : float3(0, 0, 1);
    float4 ret = thisObj->Perpendicular3(hint, hint2);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Perpendicular_float4_float4(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 hint = numArgs > 0 ? *GetCheckedValueObject<float4>(ctx, 0, float4_ID) : float4(0, 1, 0, 0);
    float4 hint2 = numArgs > 1 ? *GetCheckedValueObject<float4>(ctx, 1, float4_ID) : float4(0, 0, 1, 0);
    float4 ret = thisObj->Perpendicular(hint, hint2);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_AnotherPerpendicular3_float3_float3(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float3 hint = numArgs > 0 ? *GetCheckedValueObject<float3>(ctx, 0, float3_ID) : float3(0, 1, 0);
    float3 hint2 = numArgs > 1 ? *GetCheckedValueObject<float3>(ctx, 1, float3_ID) : float3(0, 0, 1);
    float4 ret = thisObj->AnotherPerpendicular3(hint, hint2);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_AnotherPerpendicular_float4_float4(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4 hint = numArgs > 0 ? *GetCheckedValueObject<float4>(ctx, 0, float4_ID) : float4(0, 1, 0, 0);
    float4 hint2 = numArgs > 1 ? *GetCheckedValueObject<float4>(ctx, 1, float4_ID) : float4(0, 0, 1, 0);
    float4 ret = thisObj->AnotherPerpendicular(hint, hint2);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_PerpendicularBasis_float4_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& outB = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4& outC = *GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    thisObj->PerpendicularBasis(outB, outC);
    return 0;
}

static duk_ret_t float4_RandomPerpendicular_LCG(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    LCG& rng = *GetCheckedValueObject<LCG>(ctx, 0, LCG_ID);
    float4 ret = thisObj->RandomPerpendicular(rng);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Reflect3_float3(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float3& normal = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float4 ret = thisObj->Reflect3(normal);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Reflect_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& normal = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->Reflect(normal);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Refract_float4_float_float(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& normal = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float negativeSideRefractionIndex = (float)duk_require_number(ctx, 1);
    float positiveSideRefractionIndex = (float)duk_require_number(ctx, 2);
    float4 ret = thisObj->Refract(normal, negativeSideRefractionIndex, positiveSideRefractionIndex);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_AngleBetween3_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& other = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float ret = thisObj->AngleBetween3(other);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_AngleBetweenNorm3_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& normalizedVector = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float ret = thisObj->AngleBetweenNorm3(normalizedVector);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_AngleBetween4_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& other = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float ret = thisObj->AngleBetween4(other);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_AngleBetweenNorm4_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& normalizedVector = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float ret = thisObj->AngleBetweenNorm4(normalizedVector);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4_ProjectTo3_float3(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float3& target = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float4 ret = thisObj->ProjectTo3(target);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_ProjectTo_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& target = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->ProjectTo(target);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_ProjectToNorm3_float3(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float3& target = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float4 ret = thisObj->ProjectToNorm3(target);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_ProjectToNorm_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& target = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->ProjectToNorm(target);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Equals_float4_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& other = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float epsilon = numArgs > 1 ? (float)duk_require_number(ctx, 1) : 1e-3f;
    bool ret = thisObj->Equals(other, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_Equals_float_float_float_float_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    float w = (float)duk_require_number(ctx, 3);
    float epsilon = numArgs > 4 ? (float)duk_require_number(ctx, 4) : 1e-3f;
    bool ret = thisObj->Equals(x, y, z, w, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_BitEquals_float4(duk_context* ctx)
{
    float4* thisObj = GetThisValueObject<float4>(ctx, float4_ID);
    float4& other = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    bool ret = thisObj->BitEquals(other);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_Ctor_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 4 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3))
        return float4_Ctor_float_float_float_float(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && GetValueObject<float2>(ctx, 1, float2_ID) && duk_is_number(ctx, 2))
        return float4_Ctor_float_float2_float(ctx);
    if (numArgs == 3 && GetValueObject<float2>(ctx, 0, float2_ID) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float4_Ctor_float2_float_float(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && GetValueObject<float2>(ctx, 2, float2_ID))
        return float4_Ctor_float_float_float2(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float4_Ctor_float_float3(ctx);
    if (numArgs == 2 && GetValueObject<float2>(ctx, 0, float2_ID) && GetValueObject<float2>(ctx, 1, float2_ID))
        return float4_Ctor_float2_float2(ctx);
    if (numArgs == 2 && GetValueObject<float3>(ctx, 0, float3_ID) && duk_is_number(ctx, 1))
        return float4_Ctor_float3_float(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4_Ctor_float4(ctx);
    if (numArgs == 0)
        return float4_Ctor(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_Add_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float4_Add_float(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4_Add_float4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_Sub_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float4_Sub_float(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4_Sub_float4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_Mul_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float4_Mul_float(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4_Mul_float4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_Div_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float4_Div_float(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4_Div_float4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_Swizzled_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 4 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3))
        return float4_Swizzled_int_int_int_int(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float4_Swizzled_int_int_int(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float4_Swizzled_int_int(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_SetFromScalar_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float4_SetFromScalar_float_float(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float4_SetFromScalar_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_SetFromSphericalCoordinates_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float4_SetFromSphericalCoordinates_float_float_float(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float4_SetFromSphericalCoordinates_float_float(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return float4_SetFromSphericalCoordinates_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_Min_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4_Min_float4(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float4_Min_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_Max_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4_Max_float4(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float4_Max_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_Clamp_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && GetValueObject<float4>(ctx, 0, float4_ID) && GetValueObject<float4>(ctx, 1, float4_ID))
        return float4_Clamp_float4_float4(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float4_Clamp_float_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_Dot3_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4_Dot3_float4(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return float4_Dot3_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_Cross3_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4_Cross3_float4(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return float4_Cross3_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_Equals_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs >= 4 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3))
        return float4_Equals_float_float_float_float_float(ctx);
    if (numArgs >= 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4_Equals_float4_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_FromScalar_Static_float(duk_context* ctx)
{
    float scalar = (float)duk_require_number(ctx, 0);
    float4 ret = float4::FromScalar(scalar);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_FromScalar_Static_float_float(duk_context* ctx)
{
    float scalar = (float)duk_require_number(ctx, 0);
    float w = (float)duk_require_number(ctx, 1);
    float4 ret = float4::FromScalar(scalar, w);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_FromSphericalCoordinates_Static_float_float_float(duk_context* ctx)
{
    float azimuth = (float)duk_require_number(ctx, 0);
    float inclination = (float)duk_require_number(ctx, 1);
    float radius = (float)duk_require_number(ctx, 2);
    float4 ret = float4::FromSphericalCoordinates(azimuth, inclination, radius);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_FromSphericalCoordinates_Static_float3(duk_context* ctx)
{
    float3& spherical = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float4 ret = float4::FromSphericalCoordinates(spherical);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_FromSphericalCoordinates_Static_float_float(duk_context* ctx)
{
    float azimuth = (float)duk_require_number(ctx, 0);
    float inclination = (float)duk_require_number(ctx, 1);
    float4 ret = float4::FromSphericalCoordinates(azimuth, inclination);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_AreOrthogonal_Static_float4_float4_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4& a = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4& b = *GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    float epsilon = numArgs > 2 ? (float)duk_require_number(ctx, 2) : 1e-3f;
     bool ret = float4::AreOrthogonal(a, b, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_AreOrthogonal_Static_float4_float4_float4_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4& a = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4& b = *GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    float4& c = *GetCheckedValueObject<float4>(ctx, 2, float4_ID);
    float epsilon = numArgs > 3 ? (float)duk_require_number(ctx, 3) : 1e-3f;
     bool ret = float4::AreOrthogonal(a, b, c, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_AreCollinear_Static_float4_float4_float4_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4& p1 = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4& p2 = *GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    float4& p3 = *GetCheckedValueObject<float4>(ctx, 2, float4_ID);
    float epsilon = numArgs > 3 ? (float)duk_require_number(ctx, 3) : 1e-7f;
     bool ret = float4::AreCollinear(p1, p2, p3, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_Orthonormalize_Static_float4_float4(duk_context* ctx)
{
    float4& a = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4& b = *GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    float4::Orthonormalize(a, b);
    return 0;
}

static duk_ret_t float4_Orthonormalize_Static_float4_float4_float4(duk_context* ctx)
{
    float4& a = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4& b = *GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    float4& c = *GetCheckedValueObject<float4>(ctx, 2, float4_ID);
    float4::Orthonormalize(a, b, c);
    return 0;
}

static duk_ret_t float4_AreOrthonormal_Static_float4_float4_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4& a = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4& b = *GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    float epsilon = numArgs > 2 ? (float)duk_require_number(ctx, 2) : 1e-3f;
     bool ret = float4::AreOrthonormal(a, b, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_AreOrthonormal_Static_float4_float4_float4_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    float4& a = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4& b = *GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    float4& c = *GetCheckedValueObject<float4>(ctx, 2, float4_ID);
    float epsilon = numArgs > 3 ? (float)duk_require_number(ctx, 3) : 1e-3f;
     bool ret = float4::AreOrthonormal(a, b, c, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4_FromString_Static_string(duk_context* ctx)
{
    string str = duk_require_string(ctx, 0);
    float4 ret = float4::FromString(str);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_Lerp_Static_float4_float4_float(duk_context* ctx)
{
    float4& a = *GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4& b = *GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    float t = (float)duk_require_number(ctx, 2);
    float4 ret = float4::Lerp(a, b, t);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_RandomDir_Static_LCG_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    LCG& lcg = *GetCheckedValueObject<LCG>(ctx, 0, LCG_ID);
    float length = numArgs > 1 ? (float)duk_require_number(ctx, 1) : 1.f;
    float4 ret = float4::RandomDir(lcg, length);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_RandomSphere_Static_LCG_float4_float(duk_context* ctx)
{
    LCG& lcg = *GetCheckedValueObject<LCG>(ctx, 0, LCG_ID);
    float4& center = *GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    float radius = (float)duk_require_number(ctx, 2);
    float4 ret = float4::RandomSphere(lcg, center, radius);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_RandomBox_Static_LCG_float_float_float_float_float_float(duk_context* ctx)
{
    LCG& lcg = *GetCheckedValueObject<LCG>(ctx, 0, LCG_ID);
    float xmin = (float)duk_require_number(ctx, 1);
    float xmax = (float)duk_require_number(ctx, 2);
    float ymin = (float)duk_require_number(ctx, 3);
    float ymax = (float)duk_require_number(ctx, 4);
    float zmin = (float)duk_require_number(ctx, 5);
    float zmax = (float)duk_require_number(ctx, 6);
    float4 ret = float4::RandomBox(lcg, xmin, xmax, ymin, ymax, zmin, zmax);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_RandomBox_Static_LCG_float4_float4(duk_context* ctx)
{
    LCG& lcg = *GetCheckedValueObject<LCG>(ctx, 0, LCG_ID);
    float4& minValues = *GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    float4& maxValues = *GetCheckedValueObject<float4>(ctx, 2, float4_ID);
    float4 ret = float4::RandomBox(lcg, minValues, maxValues);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_RandomBox_Static_LCG_float_float(duk_context* ctx)
{
    LCG& lcg = *GetCheckedValueObject<LCG>(ctx, 0, LCG_ID);
    float minElem = (float)duk_require_number(ctx, 1);
    float maxElem = (float)duk_require_number(ctx, 2);
    float4 ret = float4::RandomBox(lcg, minElem, maxElem);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_RandomGeneral_Static_LCG_float_float(duk_context* ctx)
{
    LCG& lcg = *GetCheckedValueObject<LCG>(ctx, 0, LCG_ID);
    float minElem = (float)duk_require_number(ctx, 1);
    float maxElem = (float)duk_require_number(ctx, 2);
    float4 ret = float4::RandomGeneral(lcg, minElem, maxElem);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4_FromScalar_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float4_FromScalar_Static_float_float(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float4_FromScalar_Static_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_FromSphericalCoordinates_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float4_FromSphericalCoordinates_Static_float_float_float(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float4_FromSphericalCoordinates_Static_float_float(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return float4_FromSphericalCoordinates_Static_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_AreOrthogonal_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs >= 3 && GetValueObject<float4>(ctx, 0, float4_ID) && GetValueObject<float4>(ctx, 1, float4_ID) && GetValueObject<float4>(ctx, 2, float4_ID))
        return float4_AreOrthogonal_Static_float4_float4_float4_float(ctx);
    if (numArgs >= 2 && GetValueObject<float4>(ctx, 0, float4_ID) && GetValueObject<float4>(ctx, 1, float4_ID))
        return float4_AreOrthogonal_Static_float4_float4_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_Orthonormalize_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetValueObject<float4>(ctx, 0, float4_ID) && GetValueObject<float4>(ctx, 1, float4_ID) && GetValueObject<float4>(ctx, 2, float4_ID))
        return float4_Orthonormalize_Static_float4_float4_float4(ctx);
    if (numArgs == 2 && GetValueObject<float4>(ctx, 0, float4_ID) && GetValueObject<float4>(ctx, 1, float4_ID))
        return float4_Orthonormalize_Static_float4_float4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_AreOrthonormal_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs >= 3 && GetValueObject<float4>(ctx, 0, float4_ID) && GetValueObject<float4>(ctx, 1, float4_ID) && GetValueObject<float4>(ctx, 2, float4_ID))
        return float4_AreOrthonormal_Static_float4_float4_float4_float(ctx);
    if (numArgs >= 2 && GetValueObject<float4>(ctx, 0, float4_ID) && GetValueObject<float4>(ctx, 1, float4_ID))
        return float4_AreOrthonormal_Static_float4_float4_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4_RandomBox_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 7 && GetValueObject<LCG>(ctx, 0, LCG_ID) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3) && duk_is_number(ctx, 4) && duk_is_number(ctx, 5) && duk_is_number(ctx, 6))
        return float4_RandomBox_Static_LCG_float_float_float_float_float_float(ctx);
    if (numArgs == 3 && GetValueObject<LCG>(ctx, 0, LCG_ID) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float4_RandomBox_Static_LCG_float_float(ctx);
    if (numArgs == 3 && GetValueObject<LCG>(ctx, 0, LCG_ID) && GetValueObject<float4>(ctx, 1, float4_ID) && GetValueObject<float4>(ctx, 2, float4_ID))
        return float4_RandomBox_Static_LCG_float4_float4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static const duk_function_list_entry float4_Functions[] = {
    {"At", float4_At_int, 1}
    ,{"Add", float4_Add_Selector, DUK_VARARGS}
    ,{"Sub", float4_Sub_Selector, DUK_VARARGS}
    ,{"SubLeft", float4_SubLeft_float, 1}
    ,{"Mul", float4_Mul_Selector, DUK_VARARGS}
    ,{"Div", float4_Div_Selector, DUK_VARARGS}
    ,{"DivLeft", float4_DivLeft_float, 1}
    ,{"xy", float4_xy, 0}
    ,{"xyz", float4_xyz, 0}
    ,{"Float3Part", float4_Float3Part, 0}
    ,{"Swizzled", float4_Swizzled_Selector, DUK_VARARGS}
    ,{"xxxx", float4_xxxx, 0}
    ,{"xxxw", float4_xxxw, 0}
    ,{"yyyy", float4_yyyy, 0}
    ,{"yyyw", float4_yyyw, 0}
    ,{"zzzz", float4_zzzz, 0}
    ,{"zzzw", float4_zzzw, 0}
    ,{"wwww", float4_wwww, 0}
    ,{"SetFromScalar", float4_SetFromScalar_Selector, DUK_VARARGS}
    ,{"SetFromSphericalCoordinates", float4_SetFromSphericalCoordinates_Selector, DUK_VARARGS}
    ,{"ToSphericalCoordinates", float4_ToSphericalCoordinates, 0}
    ,{"ToSphericalCoordinatesNormalized", float4_ToSphericalCoordinatesNormalized, 0}
    ,{"Set", float4_Set_float_float_float_float, 4}
    ,{"LengthSq3", float4_LengthSq3, 0}
    ,{"Length3", float4_Length3, 0}
    ,{"LengthSq4", float4_LengthSq4, 0}
    ,{"LengthSq", float4_LengthSq, 0}
    ,{"Length4", float4_Length4, 0}
    ,{"Length", float4_Length, 0}
    ,{"Normalize3", float4_Normalize3, 0}
    ,{"Normalize4", float4_Normalize4, 0}
    ,{"Normalize", float4_Normalize, 0}
    ,{"Normalized3", float4_Normalized3, 0}
    ,{"Normalized4", float4_Normalized4, 0}
    ,{"Normalized", float4_Normalized, 0}
    ,{"NormalizeW", float4_NormalizeW, 0}
    ,{"IsWZeroOrOne", float4_IsWZeroOrOne_float, DUK_VARARGS}
    ,{"IsZero3", float4_IsZero3_float, DUK_VARARGS}
    ,{"IsZero4", float4_IsZero4_float, DUK_VARARGS}
    ,{"IsZero", float4_IsZero_float, DUK_VARARGS}
    ,{"IsNormalized3", float4_IsNormalized3_float, DUK_VARARGS}
    ,{"IsNormalized4", float4_IsNormalized4_float, DUK_VARARGS}
    ,{"IsNormalized", float4_IsNormalized_float, DUK_VARARGS}
    ,{"Scale3", float4_Scale3_float, 1}
    ,{"ScaleToLength3", float4_ScaleToLength3_float, 1}
    ,{"ScaleToLength", float4_ScaleToLength_float, 1}
    ,{"ScaledToLength3", float4_ScaledToLength3_float, 1}
    ,{"ScaledToLength", float4_ScaledToLength_float, 1}
    ,{"IsFinite", float4_IsFinite, 0}
    ,{"IsPerpendicular3", float4_IsPerpendicular3_float4_float, DUK_VARARGS}
    ,{"IsPerpendicular", float4_IsPerpendicular_float4_float, DUK_VARARGS}
    ,{"ToString", float4_ToString, 0}
    ,{"SerializeToString", float4_SerializeToString, 0}
    ,{"SerializeToCodeString", float4_SerializeToCodeString, 0}
    ,{"SumOfElements", float4_SumOfElements, 0}
    ,{"ProductOfElements", float4_ProductOfElements, 0}
    ,{"AverageOfElements", float4_AverageOfElements, 0}
    ,{"MinElement", float4_MinElement, 0}
    ,{"MinElementIndex", float4_MinElementIndex, 0}
    ,{"MaxElement", float4_MaxElement, 0}
    ,{"MaxElementIndex", float4_MaxElementIndex, 0}
    ,{"Abs", float4_Abs, 0}
    ,{"Neg3", float4_Neg3, 0}
    ,{"Neg4", float4_Neg4, 0}
    ,{"Recip3", float4_Recip3, 0}
    ,{"Recip4", float4_Recip4, 0}
    ,{"RecipFast4", float4_RecipFast4, 0}
    ,{"Min", float4_Min_Selector, DUK_VARARGS}
    ,{"Max", float4_Max_Selector, DUK_VARARGS}
    ,{"Clamp", float4_Clamp_Selector, DUK_VARARGS}
    ,{"Clamp01", float4_Clamp01, 0}
    ,{"Lerp", float4_Lerp_float4_float, 2}
    ,{"Distance3Sq", float4_Distance3Sq_float4, 1}
    ,{"Distance3", float4_Distance3_float4, 1}
    ,{"Distance4Sq", float4_Distance4Sq_float4, 1}
    ,{"DistanceSq", float4_DistanceSq_float4, 1}
    ,{"Distance4", float4_Distance4_float4, 1}
    ,{"Distance", float4_Distance_float4, 1}
    ,{"Dot3", float4_Dot3_Selector, DUK_VARARGS}
    ,{"Dot4", float4_Dot4_float4, 1}
    ,{"Dot", float4_Dot_float4, 1}
    ,{"Cross3", float4_Cross3_Selector, DUK_VARARGS}
    ,{"Cross", float4_Cross_float4, 1}
    ,{"OuterProduct", float4_OuterProduct_float4, 1}
    ,{"Perpendicular3", float4_Perpendicular3_float3_float3, DUK_VARARGS}
    ,{"Perpendicular", float4_Perpendicular_float4_float4, DUK_VARARGS}
    ,{"AnotherPerpendicular3", float4_AnotherPerpendicular3_float3_float3, DUK_VARARGS}
    ,{"AnotherPerpendicular", float4_AnotherPerpendicular_float4_float4, DUK_VARARGS}
    ,{"PerpendicularBasis", float4_PerpendicularBasis_float4_float4, 2}
    ,{"RandomPerpendicular", float4_RandomPerpendicular_LCG, 1}
    ,{"Reflect3", float4_Reflect3_float3, 1}
    ,{"Reflect", float4_Reflect_float4, 1}
    ,{"Refract", float4_Refract_float4_float_float, 3}
    ,{"AngleBetween3", float4_AngleBetween3_float4, 1}
    ,{"AngleBetweenNorm3", float4_AngleBetweenNorm3_float4, 1}
    ,{"AngleBetween4", float4_AngleBetween4_float4, 1}
    ,{"AngleBetweenNorm4", float4_AngleBetweenNorm4_float4, 1}
    ,{"ProjectTo3", float4_ProjectTo3_float3, 1}
    ,{"ProjectTo", float4_ProjectTo_float4, 1}
    ,{"ProjectToNorm3", float4_ProjectToNorm3_float3, 1}
    ,{"ProjectToNorm", float4_ProjectToNorm_float4, 1}
    ,{"Equals", float4_Equals_Selector, DUK_VARARGS}
    ,{"BitEquals", float4_BitEquals_float4, 1}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry float4_StaticFunctions[] = {
    {"FromScalar", float4_FromScalar_Static_Selector, DUK_VARARGS}
    ,{"FromSphericalCoordinates", float4_FromSphericalCoordinates_Static_Selector, DUK_VARARGS}
    ,{"AreOrthogonal", float4_AreOrthogonal_Static_Selector, DUK_VARARGS}
    ,{"AreCollinear", float4_AreCollinear_Static_float4_float4_float4_float, DUK_VARARGS}
    ,{"Orthonormalize", float4_Orthonormalize_Static_Selector, DUK_VARARGS}
    ,{"AreOrthonormal", float4_AreOrthonormal_Static_Selector, DUK_VARARGS}
    ,{"FromString", float4_FromString_Static_string, 1}
    ,{"Lerp", float4_Lerp_Static_float4_float4_float, 3}
    ,{"RandomDir", float4_RandomDir_Static_LCG_float, DUK_VARARGS}
    ,{"RandomSphere", float4_RandomSphere_Static_LCG_float4_float, 3}
    ,{"RandomBox", float4_RandomBox_Static_Selector, DUK_VARARGS}
    ,{"RandomGeneral", float4_RandomGeneral_Static_LCG_float_float, 3}
    ,{nullptr, nullptr, 0}
};

void Expose_float4(duk_context* ctx)
{
    duk_push_c_function(ctx, float4_Ctor_Selector, DUK_VARARGS);
    duk_put_function_list(ctx, -1, float4_StaticFunctions);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, float4_Functions);
    DefineProperty(ctx, "x", float4_Get_x, float4_Set_x);
    DefineProperty(ctx, "y", float4_Get_y, float4_Set_y);
    DefineProperty(ctx, "z", float4_Get_z, float4_Set_z);
    DefineProperty(ctx, "w", float4_Get_w, float4_Set_w);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, float4_ID);
}

}
