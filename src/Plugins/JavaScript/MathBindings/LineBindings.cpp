// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "BindingsHelpers.h"
#include "Geometry/Line.h"
#include "Geometry/Ray.h"
#include "Geometry/LineSegment.h"
#include "Math/float3x3.h"
#include "Math/float3x4.h"
#include "Math/float4x4.h"
#include "Math/Quat.h"
#include "Geometry/Sphere.h"
#include "Geometry/Capsule.h"
#include "Geometry/Triangle.h"
#include "Math/float2.h"
#include "Geometry/AABB.h"
#include "Geometry/OBB.h"
#include "Geometry/Frustum.h"
#include "Geometry/Circle.h"

using namespace std;

namespace JSBindings
{

extern const char* Ray_Id;
extern const char* LineSegment_Id;
extern const char* float3x3_Id;
extern const char* float3x4_Id;
extern const char* float4x4_Id;
extern const char* Quat_Id;
extern const char* Sphere_Id;
extern const char* Capsule_Id;
extern const char* Triangle_Id;
extern const char* float2_Id;
extern const char* AABB_Id;
extern const char* OBB_Id;
extern const char* Frustum_Id;
extern const char* Circle_Id;

duk_ret_t Ray_Dtor(duk_context* ctx);
duk_ret_t LineSegment_Dtor(duk_context* ctx);
duk_ret_t float3x3_Dtor(duk_context* ctx);
duk_ret_t float3x4_Dtor(duk_context* ctx);
duk_ret_t float4x4_Dtor(duk_context* ctx);
duk_ret_t Quat_Dtor(duk_context* ctx);
duk_ret_t Sphere_Dtor(duk_context* ctx);
duk_ret_t Capsule_Dtor(duk_context* ctx);
duk_ret_t Triangle_Dtor(duk_context* ctx);
duk_ret_t float2_Dtor(duk_context* ctx);
duk_ret_t AABB_Dtor(duk_context* ctx);
duk_ret_t OBB_Dtor(duk_context* ctx);
duk_ret_t Frustum_Dtor(duk_context* ctx);
duk_ret_t Circle_Dtor(duk_context* ctx);

const char* Line_Id = "Line";

duk_ret_t Line_Dtor(duk_context* ctx)
{
    Line* obj = GetObject<Line>(ctx, 0, Line_Id);
    if (obj)
    {
        delete obj;
        SetObject(ctx, 0, 0, Line_Id);
    }
    return 0;
}

static duk_ret_t Line_Ctor(duk_context* ctx)
{
    Line* newObj = new Line();
    PushConstructorResult<Line>(ctx, newObj, Line_Id, Line_Dtor);
    return 0;
}

static duk_ret_t Line_Ctor_Ray(duk_context* ctx)
{
    Ray* ray = GetCheckedObject<Ray>(ctx, 0, Ray_Id);
    Line* newObj = new Line(*ray);
    PushConstructorResult<Line>(ctx, newObj, Line_Id, Line_Dtor);
    return 0;
}

static duk_ret_t Line_Ctor_LineSegment(duk_context* ctx)
{
    LineSegment* lineSegment = GetCheckedObject<LineSegment>(ctx, 0, LineSegment_Id);
    Line* newObj = new Line(*lineSegment);
    PushConstructorResult<Line>(ctx, newObj, Line_Id, Line_Dtor);
    return 0;
}

static duk_ret_t Line_IsFinite(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    bool ret = thisObj->IsFinite();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Line_Transform_float3x3(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    float3x3* transform = GetCheckedObject<float3x3>(ctx, 0, float3x3_Id);
    thisObj->Transform(*transform);
    return 0;
}

static duk_ret_t Line_Transform_float3x4(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    float3x4* transform = GetCheckedObject<float3x4>(ctx, 0, float3x4_Id);
    thisObj->Transform(*transform);
    return 0;
}

static duk_ret_t Line_Transform_float4x4(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    float4x4* transform = GetCheckedObject<float4x4>(ctx, 0, float4x4_Id);
    thisObj->Transform(*transform);
    return 0;
}

static duk_ret_t Line_Transform_Quat(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Quat* transform = GetCheckedObject<Quat>(ctx, 0, Quat_Id);
    thisObj->Transform(*transform);
    return 0;
}

static duk_ret_t Line_Contains_Ray_float(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Ray* ray = GetCheckedObject<Ray>(ctx, 0, Ray_Id);
    float distanceThreshold = (float)duk_require_number(ctx, 1);
    bool ret = thisObj->Contains(*ray, distanceThreshold);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Line_Contains_LineSegment_float(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    LineSegment* lineSegment = GetCheckedObject<LineSegment>(ctx, 0, LineSegment_Id);
    float distanceThreshold = (float)duk_require_number(ctx, 1);
    bool ret = thisObj->Contains(*lineSegment, distanceThreshold);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Line_Equals_Line_float(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Line* line = GetCheckedObject<Line>(ctx, 0, Line_Id);
    float epsilon = (float)duk_require_number(ctx, 1);
    bool ret = thisObj->Equals(*line, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Line_BitEquals_Line(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Line* other = GetCheckedObject<Line>(ctx, 0, Line_Id);
    bool ret = thisObj->BitEquals(*other);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Line_Distance_Ray(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Ray* other = GetCheckedObject<Ray>(ctx, 0, Ray_Id);
    float ret = thisObj->Distance(*other);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Line_Distance_Ray_float(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Ray* other = GetCheckedObject<Ray>(ctx, 0, Ray_Id);
    float d = (float)duk_require_number(ctx, 1);
    float ret = thisObj->Distance(*other, d);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Line_Distance_Ray_float_float(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Ray* other = GetCheckedObject<Ray>(ctx, 0, Ray_Id);
    float d = (float)duk_require_number(ctx, 1);
    float d2 = (float)duk_require_number(ctx, 2);
    float ret = thisObj->Distance(*other, d, d2);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Line_Distance_Line(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Line* other = GetCheckedObject<Line>(ctx, 0, Line_Id);
    float ret = thisObj->Distance(*other);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Line_Distance_Line_float(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Line* other = GetCheckedObject<Line>(ctx, 0, Line_Id);
    float d = (float)duk_require_number(ctx, 1);
    float ret = thisObj->Distance(*other, d);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Line_Distance_Line_float_float(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Line* other = GetCheckedObject<Line>(ctx, 0, Line_Id);
    float d = (float)duk_require_number(ctx, 1);
    float d2 = (float)duk_require_number(ctx, 2);
    float ret = thisObj->Distance(*other, d, d2);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Line_Distance_LineSegment(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    LineSegment* other = GetCheckedObject<LineSegment>(ctx, 0, LineSegment_Id);
    float ret = thisObj->Distance(*other);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Line_Distance_LineSegment_float(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    LineSegment* other = GetCheckedObject<LineSegment>(ctx, 0, LineSegment_Id);
    float d = (float)duk_require_number(ctx, 1);
    float ret = thisObj->Distance(*other, d);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Line_Distance_LineSegment_float_float(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    LineSegment* other = GetCheckedObject<LineSegment>(ctx, 0, LineSegment_Id);
    float d = (float)duk_require_number(ctx, 1);
    float d2 = (float)duk_require_number(ctx, 2);
    float ret = thisObj->Distance(*other, d, d2);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Line_Distance_Sphere(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Sphere* other = GetCheckedObject<Sphere>(ctx, 0, Sphere_Id);
    float ret = thisObj->Distance(*other);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Line_Distance_Capsule(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Capsule* other = GetCheckedObject<Capsule>(ctx, 0, Capsule_Id);
    float ret = thisObj->Distance(*other);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Line_Intersects_AABB_float_float(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    AABB* aabb = GetCheckedObject<AABB>(ctx, 0, AABB_Id);
    float dNear = (float)duk_require_number(ctx, 1);
    float dFar = (float)duk_require_number(ctx, 2);
    bool ret = thisObj->Intersects(*aabb, dNear, dFar);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Line_Intersects_AABB(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    AABB* aabb = GetCheckedObject<AABB>(ctx, 0, AABB_Id);
    bool ret = thisObj->Intersects(*aabb);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Line_Intersects_OBB_float_float(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    OBB* obb = GetCheckedObject<OBB>(ctx, 0, OBB_Id);
    float dNear = (float)duk_require_number(ctx, 1);
    float dFar = (float)duk_require_number(ctx, 2);
    bool ret = thisObj->Intersects(*obb, dNear, dFar);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Line_Intersects_OBB(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    OBB* obb = GetCheckedObject<OBB>(ctx, 0, OBB_Id);
    bool ret = thisObj->Intersects(*obb);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Line_Intersects_Capsule(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Capsule* capsule = GetCheckedObject<Capsule>(ctx, 0, Capsule_Id);
    bool ret = thisObj->Intersects(*capsule);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Line_Intersects_Frustum(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Frustum* frustum = GetCheckedObject<Frustum>(ctx, 0, Frustum_Id);
    bool ret = thisObj->Intersects(*frustum);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Line_IntersectsDisc_Circle(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Circle* disc = GetCheckedObject<Circle>(ctx, 0, Circle_Id);
    bool ret = thisObj->IntersectsDisc(*disc);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Line_ToRay(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    Ray ret = thisObj->ToRay();
    PushValueObjectCopy<Ray>(ctx, ret, Ray_Id, Ray_Dtor);
    return 1;
}

static duk_ret_t Line_ToLineSegment_float(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    float d = (float)duk_require_number(ctx, 0);
    LineSegment ret = thisObj->ToLineSegment(d);
    PushValueObjectCopy<LineSegment>(ctx, ret, LineSegment_Id, LineSegment_Dtor);
    return 1;
}

static duk_ret_t Line_ToLineSegment_float_float(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    float dStart = (float)duk_require_number(ctx, 0);
    float dEnd = (float)duk_require_number(ctx, 1);
    LineSegment ret = thisObj->ToLineSegment(dStart, dEnd);
    PushValueObjectCopy<LineSegment>(ctx, ret, LineSegment_Id, LineSegment_Dtor);
    return 1;
}

static duk_ret_t Line_ToString(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    std::string ret = thisObj->ToString();
    duk_push_string(ctx, ret.c_str());
    return 1;
}

static duk_ret_t Line_SerializeToString(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    std::string ret = thisObj->SerializeToString();
    duk_push_string(ctx, ret.c_str());
    return 1;
}

static duk_ret_t Line_SerializeToCodeString(duk_context* ctx)
{
    Line* thisObj = GetThisObject<Line>(ctx, Line_Id);
    std::string ret = thisObj->SerializeToCodeString();
    duk_push_string(ctx, ret.c_str());
    return 1;
}

static duk_ret_t Line_Ctor_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 0)
        return Line_Ctor(ctx);
    if (numArgs == 1 && GetObject<Ray>(ctx, 0, Ray_Id))
        return Line_Ctor_Ray(ctx);
    if (numArgs == 1 && GetObject<LineSegment>(ctx, 0, LineSegment_Id))
        return Line_Ctor_LineSegment(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Line_Transform_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<float3x3>(ctx, 0, float3x3_Id))
        return Line_Transform_float3x3(ctx);
    if (numArgs == 1 && GetObject<float3x4>(ctx, 0, float3x4_Id))
        return Line_Transform_float3x4(ctx);
    if (numArgs == 1 && GetObject<float4x4>(ctx, 0, float4x4_Id))
        return Line_Transform_float4x4(ctx);
    if (numArgs == 1 && GetObject<Quat>(ctx, 0, Quat_Id))
        return Line_Transform_Quat(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Line_Contains_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && GetObject<Ray>(ctx, 0, Ray_Id) && duk_is_number(ctx, 1))
        return Line_Contains_Ray_float(ctx);
    if (numArgs == 2 && GetObject<LineSegment>(ctx, 0, LineSegment_Id) && duk_is_number(ctx, 1))
        return Line_Contains_LineSegment_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Line_Distance_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<Ray>(ctx, 0, Ray_Id))
        return Line_Distance_Ray(ctx);
    if (numArgs == 2 && GetObject<Ray>(ctx, 0, Ray_Id) && duk_is_number(ctx, 1))
        return Line_Distance_Ray_float(ctx);
    if (numArgs == 3 && GetObject<Ray>(ctx, 0, Ray_Id) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return Line_Distance_Ray_float_float(ctx);
    if (numArgs == 1 && GetObject<Line>(ctx, 0, Line_Id))
        return Line_Distance_Line(ctx);
    if (numArgs == 2 && GetObject<Line>(ctx, 0, Line_Id) && duk_is_number(ctx, 1))
        return Line_Distance_Line_float(ctx);
    if (numArgs == 3 && GetObject<Line>(ctx, 0, Line_Id) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return Line_Distance_Line_float_float(ctx);
    if (numArgs == 1 && GetObject<LineSegment>(ctx, 0, LineSegment_Id))
        return Line_Distance_LineSegment(ctx);
    if (numArgs == 2 && GetObject<LineSegment>(ctx, 0, LineSegment_Id) && duk_is_number(ctx, 1))
        return Line_Distance_LineSegment_float(ctx);
    if (numArgs == 3 && GetObject<LineSegment>(ctx, 0, LineSegment_Id) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return Line_Distance_LineSegment_float_float(ctx);
    if (numArgs == 1 && GetObject<Sphere>(ctx, 0, Sphere_Id))
        return Line_Distance_Sphere(ctx);
    if (numArgs == 1 && GetObject<Capsule>(ctx, 0, Capsule_Id))
        return Line_Distance_Capsule(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Line_Intersects_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetObject<AABB>(ctx, 0, AABB_Id) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return Line_Intersects_AABB_float_float(ctx);
    if (numArgs == 1 && GetObject<AABB>(ctx, 0, AABB_Id))
        return Line_Intersects_AABB(ctx);
    if (numArgs == 3 && GetObject<OBB>(ctx, 0, OBB_Id) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return Line_Intersects_OBB_float_float(ctx);
    if (numArgs == 1 && GetObject<OBB>(ctx, 0, OBB_Id))
        return Line_Intersects_OBB(ctx);
    if (numArgs == 1 && GetObject<Capsule>(ctx, 0, Capsule_Id))
        return Line_Intersects_Capsule(ctx);
    if (numArgs == 1 && GetObject<Frustum>(ctx, 0, Frustum_Id))
        return Line_Intersects_Frustum(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Line_ToLineSegment_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return Line_ToLineSegment_float(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return Line_ToLineSegment_float_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Line_FromString_Static_string(duk_context* ctx)
{
    string str(duk_require_string(ctx, 0));
    Line ret = Line::FromString(str);
    PushValueObjectCopy<Line>(ctx, ret, Line_Id, Line_Dtor);
    return 1;
}

static const duk_function_list_entry Line_Functions[] = {
    {"IsFinite", Line_IsFinite, 0}
    ,{"Transform", Line_Transform_Selector, DUK_VARARGS}
    ,{"Contains", Line_Contains_Selector, DUK_VARARGS}
    ,{"Equals", Line_Equals_Line_float, 2}
    ,{"BitEquals", Line_BitEquals_Line, 1}
    ,{"Distance", Line_Distance_Selector, DUK_VARARGS}
    ,{"Intersects", Line_Intersects_Selector, DUK_VARARGS}
    ,{"IntersectsDisc", Line_IntersectsDisc_Circle, 1}
    ,{"ToRay", Line_ToRay, 0}
    ,{"ToLineSegment", Line_ToLineSegment_Selector, DUK_VARARGS}
    ,{"ToString", Line_ToString, 0}
    ,{"SerializeToString", Line_SerializeToString, 0}
    ,{"SerializeToCodeString", Line_SerializeToCodeString, 0}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry Line_StaticFunctions[] = {
    {"FromString", Line_FromString_Static_string, 1}
    ,{nullptr, nullptr, 0}
};

void Expose_Line(duk_context* ctx)
{
    duk_push_c_function(ctx, Line_Ctor_Selector, DUK_VARARGS);
    duk_put_function_list(ctx, -1, Line_StaticFunctions);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Line_Functions);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, Line_Id);
}

}
