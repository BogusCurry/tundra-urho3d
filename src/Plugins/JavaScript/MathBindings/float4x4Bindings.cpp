// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "BindingsHelpers.h"
#include "Math/float4x4.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Math/float3x3.h"
#include "Math/float3x4.h"
#include "Math/float4.h"
#include "Math/Quat.h"
#include "Math/float3.h"
#include "Algorithm/Random/LCG.h"
#include "Geometry/Plane.h"

using namespace std;

namespace JSBindings
{

extern const char* float3x3_ID;
extern const char* float3x4_ID;
extern const char* float4_ID;
extern const char* Quat_ID;
extern const char* float3_ID;
extern const char* LCG_ID;
extern const char* Plane_ID;

duk_ret_t float3x3_Finalizer(duk_context* ctx);
duk_ret_t float3x4_Finalizer(duk_context* ctx);
duk_ret_t float4_Finalizer(duk_context* ctx);
duk_ret_t Quat_Finalizer(duk_context* ctx);
duk_ret_t float3_Finalizer(duk_context* ctx);
duk_ret_t LCG_Finalizer(duk_context* ctx);
duk_ret_t Plane_Finalizer(duk_context* ctx);

const char* float4x4_ID = "float4x4";

duk_ret_t float4x4_Finalizer(duk_context* ctx)
{
    float4x4* obj = GetValueObject<float4x4>(ctx, 0, float4x4_ID);
    if (obj)
    {
        delete obj;
        SetValueObject(ctx, 0, 0, float4x4_ID);
    }
    return 0;
}

static duk_ret_t float4x4_Ctor(duk_context* ctx)
{
    float4x4* newObj = new float4x4();
    PushConstructorResult<float4x4>(ctx, newObj, float4x4_ID, float4x4_Finalizer);
    return 0;
}

static duk_ret_t float4x4_Ctor_float4x4(duk_context* ctx)
{
    float4x4* rhs = GetCheckedValueObject<float4x4>(ctx, 0, float4x4_ID);
    float4x4* newObj = new float4x4(*rhs);
    PushConstructorResult<float4x4>(ctx, newObj, float4x4_ID, float4x4_Finalizer);
    return 0;
}

static duk_ret_t float4x4_Ctor_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float(duk_context* ctx)
{
    float _00 = (float)duk_require_number(ctx, 0);
    float _01 = (float)duk_require_number(ctx, 1);
    float _02 = (float)duk_require_number(ctx, 2);
    float _03 = (float)duk_require_number(ctx, 3);
    float _10 = (float)duk_require_number(ctx, 4);
    float _11 = (float)duk_require_number(ctx, 5);
    float _12 = (float)duk_require_number(ctx, 6);
    float _13 = (float)duk_require_number(ctx, 7);
    float _20 = (float)duk_require_number(ctx, 8);
    float _21 = (float)duk_require_number(ctx, 9);
    float _22 = (float)duk_require_number(ctx, 10);
    float _23 = (float)duk_require_number(ctx, 11);
    float _30 = (float)duk_require_number(ctx, 12);
    float _31 = (float)duk_require_number(ctx, 13);
    float _32 = (float)duk_require_number(ctx, 14);
    float _33 = (float)duk_require_number(ctx, 15);
    float4x4* newObj = new float4x4(_00, _01, _02, _03, _10, _11, _12, _13, _20, _21, _22, _23, _30, _31, _32, _33);
    PushConstructorResult<float4x4>(ctx, newObj, float4x4_ID, float4x4_Finalizer);
    return 0;
}

static duk_ret_t float4x4_Ctor_float3x3(duk_context* ctx)
{
    float3x3* other = GetCheckedValueObject<float3x3>(ctx, 0, float3x3_ID);
    float4x4* newObj = new float4x4(*other);
    PushConstructorResult<float4x4>(ctx, newObj, float4x4_ID, float4x4_Finalizer);
    return 0;
}

static duk_ret_t float4x4_Ctor_float3x4(duk_context* ctx)
{
    float3x4* other = GetCheckedValueObject<float3x4>(ctx, 0, float3x4_ID);
    float4x4* newObj = new float4x4(*other);
    PushConstructorResult<float4x4>(ctx, newObj, float4x4_ID, float4x4_Finalizer);
    return 0;
}

static duk_ret_t float4x4_Ctor_float4_float4_float4_float4(duk_context* ctx)
{
    float4* col0 = GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4* col1 = GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    float4* col2 = GetCheckedValueObject<float4>(ctx, 2, float4_ID);
    float4* col3 = GetCheckedValueObject<float4>(ctx, 3, float4_ID);
    float4x4* newObj = new float4x4(*col0, *col1, *col2, *col3);
    PushConstructorResult<float4x4>(ctx, newObj, float4x4_ID, float4x4_Finalizer);
    return 0;
}

static duk_ret_t float4x4_Ctor_Quat(duk_context* ctx)
{
    Quat* orientation = GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    float4x4* newObj = new float4x4(*orientation);
    PushConstructorResult<float4x4>(ctx, newObj, float4x4_ID, float4x4_Finalizer);
    return 0;
}

static duk_ret_t float4x4_Ctor_Quat_float3(duk_context* ctx)
{
    Quat* orientation = GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    float3* translation = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float4x4* newObj = new float4x4(*orientation, *translation);
    PushConstructorResult<float4x4>(ctx, newObj, float4x4_ID, float4x4_Finalizer);
    return 0;
}

static duk_ret_t float4x4_GetScale(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->GetScale();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ComplementaryProjection(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4x4 ret = thisObj->ComplementaryProjection();
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_At_int_int(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    int col = (int)duk_require_number(ctx, 1);
     float ret = thisObj->At(row, col);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_Row_int(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    const float4 & ret = thisObj->Row(row);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Row3_int(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    const float3 & ret = thisObj->Row3(row);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Col_int(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int col = (int)duk_require_number(ctx, 0);
    float4 ret = thisObj->Col(col);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Col3_int(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int col = (int)duk_require_number(ctx, 0);
    float3 ret = thisObj->Col3(col);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Diagonal(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4 ret = thisObj->Diagonal();
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Diagonal3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->Diagonal3();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ScaleRow3_int_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    float scalar = (float)duk_require_number(ctx, 1);
    thisObj->ScaleRow3(row, scalar);
    return 0;
}

static duk_ret_t float4x4_ScaleRow_int_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    float scalar = (float)duk_require_number(ctx, 1);
    thisObj->ScaleRow(row, scalar);
    return 0;
}

static duk_ret_t float4x4_ScaleCol3_int_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int col = (int)duk_require_number(ctx, 0);
    float scalar = (float)duk_require_number(ctx, 1);
    thisObj->ScaleCol3(col, scalar);
    return 0;
}

static duk_ret_t float4x4_ScaleCol_int_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int col = (int)duk_require_number(ctx, 0);
    float scalar = (float)duk_require_number(ctx, 1);
    thisObj->ScaleCol(col, scalar);
    return 0;
}

static duk_ret_t float4x4_Float3x3Part(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3x3 ret = thisObj->Float3x3Part();
    PushValueObjectCopy<float3x3>(ctx, ret, float3x3_ID, float3x3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Float3x4Part(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    const float3x4 & ret = thisObj->Float3x4Part();
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_TranslatePart(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->TranslatePart();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_RotatePart(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3x3 ret = thisObj->RotatePart();
    PushValueObjectCopy<float3x3>(ctx, ret, float3x3_ID, float3x3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_WorldX(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->WorldX();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_WorldY(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->WorldY();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_WorldZ(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->WorldZ();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_SetRow3_int_float3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    float3* rowVector = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    thisObj->SetRow3(row, *rowVector);
    return 0;
}

static duk_ret_t float4x4_SetRow3_int_float_float_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    float m_r0 = (float)duk_require_number(ctx, 1);
    float m_r1 = (float)duk_require_number(ctx, 2);
    float m_r2 = (float)duk_require_number(ctx, 3);
    thisObj->SetRow3(row, m_r0, m_r1, m_r2);
    return 0;
}

static duk_ret_t float4x4_SetRow_int_float3_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    float3* rowVector = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float m_r3 = (float)duk_require_number(ctx, 2);
    thisObj->SetRow(row, *rowVector, m_r3);
    return 0;
}

static duk_ret_t float4x4_SetRow_int_float4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    float4* rowVector = GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    thisObj->SetRow(row, *rowVector);
    return 0;
}

static duk_ret_t float4x4_SetRow_int_float_float_float_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    float m_r0 = (float)duk_require_number(ctx, 1);
    float m_r1 = (float)duk_require_number(ctx, 2);
    float m_r2 = (float)duk_require_number(ctx, 3);
    float m_r3 = (float)duk_require_number(ctx, 4);
    thisObj->SetRow(row, m_r0, m_r1, m_r2, m_r3);
    return 0;
}

static duk_ret_t float4x4_SetCol3_int_float3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int column = (int)duk_require_number(ctx, 0);
    float3* columnVector = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    thisObj->SetCol3(column, *columnVector);
    return 0;
}

static duk_ret_t float4x4_SetCol3_int_float_float_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int column = (int)duk_require_number(ctx, 0);
    float m_0c = (float)duk_require_number(ctx, 1);
    float m_1c = (float)duk_require_number(ctx, 2);
    float m_2c = (float)duk_require_number(ctx, 3);
    thisObj->SetCol3(column, m_0c, m_1c, m_2c);
    return 0;
}

static duk_ret_t float4x4_SetCol_int_float3_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int column = (int)duk_require_number(ctx, 0);
    float3* columnVector = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float m_3c = (float)duk_require_number(ctx, 2);
    thisObj->SetCol(column, *columnVector, m_3c);
    return 0;
}

static duk_ret_t float4x4_SetCol_int_float4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int column = (int)duk_require_number(ctx, 0);
    float4* columnVector = GetCheckedValueObject<float4>(ctx, 1, float4_ID);
    thisObj->SetCol(column, *columnVector);
    return 0;
}

static duk_ret_t float4x4_SetCol_int_float_float_float_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int column = (int)duk_require_number(ctx, 0);
    float m_0c = (float)duk_require_number(ctx, 1);
    float m_1c = (float)duk_require_number(ctx, 2);
    float m_2c = (float)duk_require_number(ctx, 3);
    float m_3c = (float)duk_require_number(ctx, 4);
    thisObj->SetCol(column, m_0c, m_1c, m_2c, m_3c);
    return 0;
}

static duk_ret_t float4x4_Set_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float _00 = (float)duk_require_number(ctx, 0);
    float _01 = (float)duk_require_number(ctx, 1);
    float _02 = (float)duk_require_number(ctx, 2);
    float _03 = (float)duk_require_number(ctx, 3);
    float _10 = (float)duk_require_number(ctx, 4);
    float _11 = (float)duk_require_number(ctx, 5);
    float _12 = (float)duk_require_number(ctx, 6);
    float _13 = (float)duk_require_number(ctx, 7);
    float _20 = (float)duk_require_number(ctx, 8);
    float _21 = (float)duk_require_number(ctx, 9);
    float _22 = (float)duk_require_number(ctx, 10);
    float _23 = (float)duk_require_number(ctx, 11);
    float _30 = (float)duk_require_number(ctx, 12);
    float _31 = (float)duk_require_number(ctx, 13);
    float _32 = (float)duk_require_number(ctx, 14);
    float _33 = (float)duk_require_number(ctx, 15);
    thisObj->Set(_00, _01, _02, _03, _10, _11, _12, _13, _20, _21, _22, _23, _30, _31, _32, _33);
    return 0;
}

static duk_ret_t float4x4_Set_float4x4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4x4* rhs = GetCheckedValueObject<float4x4>(ctx, 0, float4x4_ID);
    thisObj->Set(*rhs);
    return 0;
}

static duk_ret_t float4x4_Set_int_int_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int row = (int)duk_require_number(ctx, 0);
    int col = (int)duk_require_number(ctx, 1);
    float value = (float)duk_require_number(ctx, 2);
    thisObj->Set(row, col, value);
    return 0;
}

static duk_ret_t float4x4_Set3x3Part_float3x3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3x3* rotation = GetCheckedValueObject<float3x3>(ctx, 0, float3x3_ID);
    thisObj->Set3x3Part(*rotation);
    return 0;
}

static duk_ret_t float4x4_Set3x4Part_float3x4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3x4* rotateTranslate = GetCheckedValueObject<float3x4>(ctx, 0, float3x4_ID);
    thisObj->Set3x4Part(*rotateTranslate);
    return 0;
}

static duk_ret_t float4x4_SetIdentity(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    thisObj->SetIdentity();
    return 0;
}

static duk_ret_t float4x4_SwapColumns_int_int(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int col1 = (int)duk_require_number(ctx, 0);
    int col2 = (int)duk_require_number(ctx, 1);
    thisObj->SwapColumns(col1, col2);
    return 0;
}

static duk_ret_t float4x4_SwapColumns3_int_int(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int col1 = (int)duk_require_number(ctx, 0);
    int col2 = (int)duk_require_number(ctx, 1);
    thisObj->SwapColumns3(col1, col2);
    return 0;
}

static duk_ret_t float4x4_SwapRows_int_int(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int row1 = (int)duk_require_number(ctx, 0);
    int row2 = (int)duk_require_number(ctx, 1);
    thisObj->SwapRows(row1, row2);
    return 0;
}

static duk_ret_t float4x4_SwapRows3_int_int(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int row1 = (int)duk_require_number(ctx, 0);
    int row2 = (int)duk_require_number(ctx, 1);
    thisObj->SwapRows3(row1, row2);
    return 0;
}

static duk_ret_t float4x4_SetTranslatePart_float_float_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float tx = (float)duk_require_number(ctx, 0);
    float ty = (float)duk_require_number(ctx, 1);
    float tz = (float)duk_require_number(ctx, 2);
    thisObj->SetTranslatePart(tx, ty, tz);
    return 0;
}

static duk_ret_t float4x4_SetTranslatePart_float3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3* offset = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->SetTranslatePart(*offset);
    return 0;
}

static duk_ret_t float4x4_SetTranslatePart_float4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4* offset = GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    thisObj->SetTranslatePart(*offset);
    return 0;
}

static duk_ret_t float4x4_SetRotatePartX_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float angleRadians = (float)duk_require_number(ctx, 0);
    thisObj->SetRotatePartX(angleRadians);
    return 0;
}

static duk_ret_t float4x4_SetRotatePartY_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float angleRadians = (float)duk_require_number(ctx, 0);
    thisObj->SetRotatePartY(angleRadians);
    return 0;
}

static duk_ret_t float4x4_SetRotatePartZ_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float angleRadians = (float)duk_require_number(ctx, 0);
    thisObj->SetRotatePartZ(angleRadians);
    return 0;
}

static duk_ret_t float4x4_SetRotatePart_float3_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3* axisDirection = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float angleRadians = (float)duk_require_number(ctx, 1);
    thisObj->SetRotatePart(*axisDirection, angleRadians);
    return 0;
}

static duk_ret_t float4x4_SetRotatePart_Quat(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    Quat* orientation = GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    thisObj->SetRotatePart(*orientation);
    return 0;
}

static duk_ret_t float4x4_SetRotatePart_float3x3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3x3* rotation = GetCheckedValueObject<float3x3>(ctx, 0, float3x3_ID);
    thisObj->SetRotatePart(*rotation);
    return 0;
}

static duk_ret_t float4x4_Determinant3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float ret = thisObj->Determinant3();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_Determinant4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float ret = thisObj->Determinant4();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_SubMatrix_int_int(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int i = (int)duk_require_number(ctx, 0);
    int j = (int)duk_require_number(ctx, 1);
    float3x3 ret = thisObj->SubMatrix(i, j);
    PushValueObjectCopy<float3x3>(ctx, ret, float3x3_ID, float3x3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Minor_int_int(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int i = (int)duk_require_number(ctx, 0);
    int j = (int)duk_require_number(ctx, 1);
    float ret = thisObj->Minor(i, j);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_Adjugate(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4x4 ret = thisObj->Adjugate();
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_CholeskyDecompose_float4x4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4x4* outL = GetCheckedValueObject<float4x4>(ctx, 0, float4x4_ID);
    bool ret = thisObj->CholeskyDecompose(*outL);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_LUDecompose_float4x4_float4x4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4x4* outLower = GetCheckedValueObject<float4x4>(ctx, 0, float4x4_ID);
    float4x4* outUpper = GetCheckedValueObject<float4x4>(ctx, 1, float4x4_ID);
    bool ret = thisObj->LUDecompose(*outLower, *outUpper);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_Inverse_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float epsilon = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->Inverse(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_Inverted(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4x4 ret = thisObj->Inverted();
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_InverseColOrthogonal(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    bool ret = thisObj->InverseColOrthogonal();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_InverseOrthogonalUniformScale(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    bool ret = thisObj->InverseOrthogonalUniformScale();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_InverseOrthonormal(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    thisObj->InverseOrthonormal();
    return 0;
}

static duk_ret_t float4x4_Transpose(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    thisObj->Transpose();
    return 0;
}

static duk_ret_t float4x4_Transposed(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4x4 ret = thisObj->Transposed();
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_InverseTranspose(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    bool ret = thisObj->InverseTranspose();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_InverseTransposed(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4x4 ret = thisObj->InverseTransposed();
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Trace(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float ret = thisObj->Trace();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_Orthogonalize3_int_int_int(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int firstColumn = (int)duk_require_number(ctx, 0);
    int secondColumn = (int)duk_require_number(ctx, 1);
    int thirdColumn = (int)duk_require_number(ctx, 2);
    thisObj->Orthogonalize3(firstColumn, secondColumn, thirdColumn);
    return 0;
}

static duk_ret_t float4x4_Orthogonalize3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    thisObj->Orthogonalize3();
    return 0;
}

static duk_ret_t float4x4_Orthonormalize3_int_int_int(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    int firstColumn = (int)duk_require_number(ctx, 0);
    int secondColumn = (int)duk_require_number(ctx, 1);
    int thirdColumn = (int)duk_require_number(ctx, 2);
    thisObj->Orthonormalize3(firstColumn, secondColumn, thirdColumn);
    return 0;
}

static duk_ret_t float4x4_Orthonormalize3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    thisObj->Orthonormalize3();
    return 0;
}

static duk_ret_t float4x4_RemoveScale(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    thisObj->RemoveScale();
    return 0;
}

static duk_ret_t float4x4_Pivot(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    thisObj->Pivot();
    return 0;
}

static duk_ret_t float4x4_TransformPos_float3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3* pointVector = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3 ret = thisObj->TransformPos(*pointVector);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_TransformPos_float_float_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    float3 ret = thisObj->TransformPos(x, y, z);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_TransformPos_float4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4* vector = GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->TransformPos(*vector);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_TransformDir_float3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3* directionVector = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3 ret = thisObj->TransformDir(*directionVector);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_TransformDir_float_float_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    float3 ret = thisObj->TransformDir(x, y, z);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_TransformDir_float4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4* vector = GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->TransformDir(*vector);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Transform_float4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4* vector = GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->Transform(*vector);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_IsFinite(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    bool ret = thisObj->IsFinite();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_IsIdentity_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float epsilon = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->IsIdentity(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_IsLowerTriangular_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float epsilon = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->IsLowerTriangular(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_IsUpperTriangular_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float epsilon = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->IsUpperTriangular(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_IsInvertible_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float epsilon = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->IsInvertible(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_IsSymmetric_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float epsilon = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->IsSymmetric(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_IsSkewSymmetric_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float epsilon = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->IsSkewSymmetric(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_IsIdempotent_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float epsilon = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->IsIdempotent(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_HasUnitaryScale_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float epsilon = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->HasUnitaryScale(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_HasNegativeScale(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    bool ret = thisObj->HasNegativeScale();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_HasUniformScale_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float epsilon = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->HasUniformScale(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_IsRowOrthogonal3_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float epsilon = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->IsRowOrthogonal3(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_IsColOrthogonal3_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float epsilon = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->IsColOrthogonal3(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_IsOrthonormal3_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float epsilon = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->IsOrthonormal3(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_Equals_float4x4_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4x4* other = GetCheckedValueObject<float4x4>(ctx, 0, float4x4_ID);
    float epsilon = (float)duk_require_number(ctx, 1);
    bool ret = thisObj->Equals(*other, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_ContainsProjection_float(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float epsilon = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->ContainsProjection(epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float4x4_ToString(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    string ret = thisObj->ToString();
    duk_push_string(ctx, ret.c_str());
    return 1;
}

static duk_ret_t float4x4_SerializeToString(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    string ret = thisObj->SerializeToString();
    duk_push_string(ctx, ret.c_str());
    return 1;
}

static duk_ret_t float4x4_ToString2(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    string ret = thisObj->ToString2();
    duk_push_string(ctx, ret.c_str());
    return 1;
}

static duk_ret_t float4x4_ToEulerXYX(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->ToEulerXYX();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ToEulerXZX(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->ToEulerXZX();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ToEulerYXY(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->ToEulerYXY();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ToEulerYZY(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->ToEulerYZY();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ToEulerZXZ(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->ToEulerZXZ();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ToEulerZYZ(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->ToEulerZYZ();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ToEulerXYZ(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->ToEulerXYZ();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ToEulerXZY(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->ToEulerXZY();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ToEulerYXZ(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->ToEulerYXZ();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ToEulerYZX(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->ToEulerYZX();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ToEulerZXY(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->ToEulerZXY();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ToEulerZYX(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->ToEulerZYX();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ExtractScale(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3 ret = thisObj->ExtractScale();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Decompose_float3_Quat_float3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3* translate = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    Quat* rotate = GetCheckedValueObject<Quat>(ctx, 1, Quat_ID);
    float3* scale = GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    thisObj->Decompose(*translate, *rotate, *scale);
    return 0;
}

static duk_ret_t float4x4_Decompose_float3_float3x3_float3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3* translate = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3x3* rotate = GetCheckedValueObject<float3x3>(ctx, 1, float3x3_ID);
    float3* scale = GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    thisObj->Decompose(*translate, *rotate, *scale);
    return 0;
}

static duk_ret_t float4x4_Decompose_float3_float3x4_float3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3* translate = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3x4* rotate = GetCheckedValueObject<float3x4>(ctx, 1, float3x4_ID);
    float3* scale = GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    thisObj->Decompose(*translate, *rotate, *scale);
    return 0;
}

static duk_ret_t float4x4_Decompose_float3_float4x4_float3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3* translate = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float4x4* rotate = GetCheckedValueObject<float4x4>(ctx, 1, float4x4_ID);
    float3* scale = GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    thisObj->Decompose(*translate, *rotate, *scale);
    return 0;
}

static duk_ret_t float4x4_Abs(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4x4 ret = thisObj->Abs();
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Mul_float3x3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3x3* rhs = GetCheckedValueObject<float3x3>(ctx, 0, float3x3_ID);
    float4x4 ret = thisObj->Mul(*rhs);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Mul_float3x4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3x4* rhs = GetCheckedValueObject<float3x4>(ctx, 0, float3x4_ID);
    float4x4 ret = thisObj->Mul(*rhs);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Mul_float4x4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4x4* rhs = GetCheckedValueObject<float4x4>(ctx, 0, float4x4_ID);
    float4x4 ret = thisObj->Mul(*rhs);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Mul_Quat(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    Quat* rhs = GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    float4x4 ret = thisObj->Mul(*rhs);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_MulPos_float3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3* pointVector = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3 ret = thisObj->MulPos(*pointVector);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_MulPos_float4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4* pointVector = GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->MulPos(*pointVector);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_MulDir_float3(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float3* directionVector = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3 ret = thisObj->MulDir(*directionVector);
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t float4x4_MulDir_float4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4* directionVector = GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->MulDir(*directionVector);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Mul_float4(duk_context* ctx)
{
    float4x4* thisObj = GetThisValueObject<float4x4>(ctx, float4x4_ID);
    float4* vector = GetCheckedValueObject<float4>(ctx, 0, float4_ID);
    float4 ret = thisObj->Mul(*vector);
    PushValueObjectCopy<float4>(ctx, ret, float4_ID, float4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Ctor_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 0)
        return float4x4_Ctor(ctx);
    if (numArgs == 1 && GetValueObject<float4x4>(ctx, 0, float4x4_ID))
        return float4x4_Ctor_float4x4(ctx);
    if (numArgs == 16 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3) && duk_is_number(ctx, 4) && duk_is_number(ctx, 5) && duk_is_number(ctx, 6) && duk_is_number(ctx, 7) && duk_is_number(ctx, 8) && duk_is_number(ctx, 9) && duk_is_number(ctx, 10) && duk_is_number(ctx, 11) && duk_is_number(ctx, 12) && duk_is_number(ctx, 13) && duk_is_number(ctx, 14) && duk_is_number(ctx, 15))
        return float4x4_Ctor_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float(ctx);
    if (numArgs == 1 && GetValueObject<float3x3>(ctx, 0, float3x3_ID))
        return float4x4_Ctor_float3x3(ctx);
    if (numArgs == 1 && GetValueObject<float3x4>(ctx, 0, float3x4_ID))
        return float4x4_Ctor_float3x4(ctx);
    if (numArgs == 4 && GetValueObject<float4>(ctx, 0, float4_ID) && GetValueObject<float4>(ctx, 1, float4_ID) && GetValueObject<float4>(ctx, 2, float4_ID) && GetValueObject<float4>(ctx, 3, float4_ID))
        return float4x4_Ctor_float4_float4_float4_float4(ctx);
    if (numArgs == 1 && GetValueObject<Quat>(ctx, 0, Quat_ID))
        return float4x4_Ctor_Quat(ctx);
    if (numArgs == 2 && GetValueObject<Quat>(ctx, 0, Quat_ID) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float4x4_Ctor_Quat_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_SetRow3_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float4x4_SetRow3_int_float3(ctx);
    if (numArgs == 4 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3))
        return float4x4_SetRow3_int_float_float_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_SetRow_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && GetValueObject<float3>(ctx, 1, float3_ID) && duk_is_number(ctx, 2))
        return float4x4_SetRow_int_float3_float(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && GetValueObject<float4>(ctx, 1, float4_ID))
        return float4x4_SetRow_int_float4(ctx);
    if (numArgs == 5 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3) && duk_is_number(ctx, 4))
        return float4x4_SetRow_int_float_float_float_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_SetCol3_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float4x4_SetCol3_int_float3(ctx);
    if (numArgs == 4 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3))
        return float4x4_SetCol3_int_float_float_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_SetCol_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && GetValueObject<float3>(ctx, 1, float3_ID) && duk_is_number(ctx, 2))
        return float4x4_SetCol_int_float3_float(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && GetValueObject<float4>(ctx, 1, float4_ID))
        return float4x4_SetCol_int_float4(ctx);
    if (numArgs == 5 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3) && duk_is_number(ctx, 4))
        return float4x4_SetCol_int_float_float_float_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_Set_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 16 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3) && duk_is_number(ctx, 4) && duk_is_number(ctx, 5) && duk_is_number(ctx, 6) && duk_is_number(ctx, 7) && duk_is_number(ctx, 8) && duk_is_number(ctx, 9) && duk_is_number(ctx, 10) && duk_is_number(ctx, 11) && duk_is_number(ctx, 12) && duk_is_number(ctx, 13) && duk_is_number(ctx, 14) && duk_is_number(ctx, 15))
        return float4x4_Set_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float(ctx);
    if (numArgs == 1 && GetValueObject<float4x4>(ctx, 0, float4x4_ID))
        return float4x4_Set_float4x4(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float4x4_Set_int_int_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_SetTranslatePart_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float4x4_SetTranslatePart_float_float_float(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return float4x4_SetTranslatePart_float3(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4x4_SetTranslatePart_float4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_SetRotatePart_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && GetValueObject<float3>(ctx, 0, float3_ID) && duk_is_number(ctx, 1))
        return float4x4_SetRotatePart_float3_float(ctx);
    if (numArgs == 1 && GetValueObject<Quat>(ctx, 0, Quat_ID))
        return float4x4_SetRotatePart_Quat(ctx);
    if (numArgs == 1 && GetValueObject<float3x3>(ctx, 0, float3x3_ID))
        return float4x4_SetRotatePart_float3x3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_Orthogonalize3_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float4x4_Orthogonalize3_int_int_int(ctx);
    if (numArgs == 0)
        return float4x4_Orthogonalize3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_Orthonormalize3_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float4x4_Orthonormalize3_int_int_int(ctx);
    if (numArgs == 0)
        return float4x4_Orthonormalize3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_TransformPos_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return float4x4_TransformPos_float3(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float4x4_TransformPos_float_float_float(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4x4_TransformPos_float4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_TransformDir_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return float4x4_TransformDir_float3(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float4x4_TransformDir_float_float_float(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4x4_TransformDir_float4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_Decompose_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<Quat>(ctx, 1, Quat_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float4x4_Decompose_float3_Quat_float3(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3x3>(ctx, 1, float3x3_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float4x4_Decompose_float3_float3x3_float3(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3x4>(ctx, 1, float3x4_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float4x4_Decompose_float3_float3x4_float3(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float4x4>(ctx, 1, float4x4_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float4x4_Decompose_float3_float4x4_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_Mul_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetValueObject<float3x3>(ctx, 0, float3x3_ID))
        return float4x4_Mul_float3x3(ctx);
    if (numArgs == 1 && GetValueObject<float3x4>(ctx, 0, float3x4_ID))
        return float4x4_Mul_float3x4(ctx);
    if (numArgs == 1 && GetValueObject<float4x4>(ctx, 0, float4x4_ID))
        return float4x4_Mul_float4x4(ctx);
    if (numArgs == 1 && GetValueObject<Quat>(ctx, 0, Quat_ID))
        return float4x4_Mul_Quat(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4x4_Mul_float4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_MulPos_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return float4x4_MulPos_float3(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4x4_MulPos_float4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_MulDir_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return float4x4_MulDir_float3(ctx);
    if (numArgs == 1 && GetValueObject<float4>(ctx, 0, float4_ID))
        return float4x4_MulDir_float4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_RotateX_Static_float_float3(duk_context* ctx)
{
    float angleRadians = (float)duk_require_number(ctx, 0);
    float3* pointOnAxis = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float4x4 ret = float4x4::RotateX(angleRadians, *pointOnAxis);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_RotateX_Static_float(duk_context* ctx)
{
    float angleRadians = (float)duk_require_number(ctx, 0);
    float4x4 ret = float4x4::RotateX(angleRadians);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_RotateY_Static_float(duk_context* ctx)
{
    float angleRadians = (float)duk_require_number(ctx, 0);
    float4x4 ret = float4x4::RotateY(angleRadians);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_RotateY_Static_float_float3(duk_context* ctx)
{
    float angleRadians = (float)duk_require_number(ctx, 0);
    float3* pointOnAxis = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float4x4 ret = float4x4::RotateY(angleRadians, *pointOnAxis);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_RotateZ_Static_float(duk_context* ctx)
{
    float angleRadians = (float)duk_require_number(ctx, 0);
    float4x4 ret = float4x4::RotateZ(angleRadians);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_RotateZ_Static_float_float3(duk_context* ctx)
{
    float angleRadians = (float)duk_require_number(ctx, 0);
    float3* pointOnAxis = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float4x4 ret = float4x4::RotateZ(angleRadians, *pointOnAxis);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_RotateAxisAngle_Static_float3_float_float3(duk_context* ctx)
{
    float3* axisDirection = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float angleRadians = (float)duk_require_number(ctx, 1);
    float3* pointOnAxis = GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float4x4 ret = float4x4::RotateAxisAngle(*axisDirection, angleRadians, *pointOnAxis);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_RotateAxisAngle_Static_float3_float(duk_context* ctx)
{
    float3* axisDirection = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float angleRadians = (float)duk_require_number(ctx, 1);
    float4x4 ret = float4x4::RotateAxisAngle(*axisDirection, angleRadians);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_RotateFromTo_Static_float3_float3_float3(duk_context* ctx)
{
    float3* sourceDirection = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3* targetDirection = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3* centerPoint = GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float4x4 ret = float4x4::RotateFromTo(*sourceDirection, *targetDirection, *centerPoint);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_RotateFromTo_Static_float3_float3(duk_context* ctx)
{
    float3* sourceDirection = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3* targetDirection = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float4x4 ret = float4x4::RotateFromTo(*sourceDirection, *targetDirection);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_RandomGeneral_Static_LCG_float_float(duk_context* ctx)
{
    LCG* lcg = GetCheckedValueObject<LCG>(ctx, 0, LCG_ID);
    float minElem = (float)duk_require_number(ctx, 1);
    float maxElem = (float)duk_require_number(ctx, 2);
    float4x4 ret = float4x4::RandomGeneral(*lcg, minElem, maxElem);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_RotateFromTo_Static_float3_float3_float3_float3_float3(duk_context* ctx)
{
    float3* sourceDirection = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3* targetDirection = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3* sourceDirection2 = GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float3* targetDirection2 = GetCheckedValueObject<float3>(ctx, 3, float3_ID);
    float3* centerPoint = GetCheckedValueObject<float3>(ctx, 4, float3_ID);
    float4x4 ret = float4x4::RotateFromTo(*sourceDirection, *targetDirection, *sourceDirection2, *targetDirection2, *centerPoint);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_RotateFromTo_Static_float3_float3_float3_float3(duk_context* ctx)
{
    float3* sourceDirection = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3* targetDirection = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3* sourceDirection2 = GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float3* targetDirection2 = GetCheckedValueObject<float3>(ctx, 3, float3_ID);
    float4x4 ret = float4x4::RotateFromTo(*sourceDirection, *targetDirection, *sourceDirection2, *targetDirection2);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromQuat_Static_Quat(duk_context* ctx)
{
    Quat* orientation = GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    float4x4 ret = float4x4::FromQuat(*orientation);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromQuat_Static_Quat_float3(duk_context* ctx)
{
    Quat* orientation = GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    float3* pointOnAxis = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float4x4 ret = float4x4::FromQuat(*orientation, *pointOnAxis);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromTRS_Static_float3_Quat_float3(duk_context* ctx)
{
    float3* translate = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    Quat* rotate = GetCheckedValueObject<Quat>(ctx, 1, Quat_ID);
    float3* scale = GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float4x4 ret = float4x4::FromTRS(*translate, *rotate, *scale);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromTRS_Static_float3_float3x3_float3(duk_context* ctx)
{
    float3* translate = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3x3* rotate = GetCheckedValueObject<float3x3>(ctx, 1, float3x3_ID);
    float3* scale = GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float4x4 ret = float4x4::FromTRS(*translate, *rotate, *scale);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromTRS_Static_float3_float3x4_float3(duk_context* ctx)
{
    float3* translate = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3x4* rotate = GetCheckedValueObject<float3x4>(ctx, 1, float3x4_ID);
    float3* scale = GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float4x4 ret = float4x4::FromTRS(*translate, *rotate, *scale);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromTRS_Static_float3_float4x4_float3(duk_context* ctx)
{
    float3* translate = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float4x4* rotate = GetCheckedValueObject<float4x4>(ctx, 1, float4x4_ID);
    float3* scale = GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float4x4 ret = float4x4::FromTRS(*translate, *rotate, *scale);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromEulerXYX_Static_float_float_float(duk_context* ctx)
{
    float x2 = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float x = (float)duk_require_number(ctx, 2);
    float4x4 ret = float4x4::FromEulerXYX(x2, y, x);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromEulerXZX_Static_float_float_float(duk_context* ctx)
{
    float x2 = (float)duk_require_number(ctx, 0);
    float z = (float)duk_require_number(ctx, 1);
    float x = (float)duk_require_number(ctx, 2);
    float4x4 ret = float4x4::FromEulerXZX(x2, z, x);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromEulerYXY_Static_float_float_float(duk_context* ctx)
{
    float y2 = (float)duk_require_number(ctx, 0);
    float x = (float)duk_require_number(ctx, 1);
    float y = (float)duk_require_number(ctx, 2);
    float4x4 ret = float4x4::FromEulerYXY(y2, x, y);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromEulerYZY_Static_float_float_float(duk_context* ctx)
{
    float y2 = (float)duk_require_number(ctx, 0);
    float z = (float)duk_require_number(ctx, 1);
    float y = (float)duk_require_number(ctx, 2);
    float4x4 ret = float4x4::FromEulerYZY(y2, z, y);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromEulerZXZ_Static_float_float_float(duk_context* ctx)
{
    float z2 = (float)duk_require_number(ctx, 0);
    float x = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    float4x4 ret = float4x4::FromEulerZXZ(z2, x, z);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromEulerZYZ_Static_float_float_float(duk_context* ctx)
{
    float z2 = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    float4x4 ret = float4x4::FromEulerZYZ(z2, y, z);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromEulerXYZ_Static_float_float_float(duk_context* ctx)
{
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    float4x4 ret = float4x4::FromEulerXYZ(x, y, z);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromEulerXZY_Static_float_float_float(duk_context* ctx)
{
    float x = (float)duk_require_number(ctx, 0);
    float z = (float)duk_require_number(ctx, 1);
    float y = (float)duk_require_number(ctx, 2);
    float4x4 ret = float4x4::FromEulerXZY(x, z, y);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromEulerYXZ_Static_float_float_float(duk_context* ctx)
{
    float y = (float)duk_require_number(ctx, 0);
    float x = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    float4x4 ret = float4x4::FromEulerYXZ(y, x, z);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromEulerYZX_Static_float_float_float(duk_context* ctx)
{
    float y = (float)duk_require_number(ctx, 0);
    float z = (float)duk_require_number(ctx, 1);
    float x = (float)duk_require_number(ctx, 2);
    float4x4 ret = float4x4::FromEulerYZX(y, z, x);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromEulerZXY_Static_float_float_float(duk_context* ctx)
{
    float z = (float)duk_require_number(ctx, 0);
    float x = (float)duk_require_number(ctx, 1);
    float y = (float)duk_require_number(ctx, 2);
    float4x4 ret = float4x4::FromEulerZXY(z, x, y);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_FromEulerZYX_Static_float_float_float(duk_context* ctx)
{
    float z = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float x = (float)duk_require_number(ctx, 2);
    float4x4 ret = float4x4::FromEulerZYX(z, y, x);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Scale_Static_float3_float3(duk_context* ctx)
{
    float3* scale = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3* scaleCenter = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float4x4 ret = float4x4::Scale(*scale, *scaleCenter);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ScaleAlongAxis_Static_float3_float_float3(duk_context* ctx)
{
    float3* axis = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float scalingFactor = (float)duk_require_number(ctx, 1);
    float3* scaleCenter = GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float4x4 ret = float4x4::ScaleAlongAxis(*axis, scalingFactor, *scaleCenter);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ScaleAlongAxis_Static_float3_float(duk_context* ctx)
{
    float3* axis = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float scalingFactor = (float)duk_require_number(ctx, 1);
    float4x4 ret = float4x4::ScaleAlongAxis(*axis, scalingFactor);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_UniformScale_Static_float_float3(duk_context* ctx)
{
    float uniformScale = (float)duk_require_number(ctx, 0);
    float3* scaleCenter = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float4x4 ret = float4x4::UniformScale(uniformScale, *scaleCenter);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ShearX_Static_float_float(duk_context* ctx)
{
    float yFactor = (float)duk_require_number(ctx, 0);
    float zFactor = (float)duk_require_number(ctx, 1);
    float4x4 ret = float4x4::ShearX(yFactor, zFactor);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ShearY_Static_float_float(duk_context* ctx)
{
    float xFactor = (float)duk_require_number(ctx, 0);
    float zFactor = (float)duk_require_number(ctx, 1);
    float4x4 ret = float4x4::ShearY(xFactor, zFactor);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_ShearZ_Static_float_float(duk_context* ctx)
{
    float xFactor = (float)duk_require_number(ctx, 0);
    float yFactor = (float)duk_require_number(ctx, 1);
    float4x4 ret = float4x4::ShearZ(xFactor, yFactor);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_Mirror_Static_Plane(duk_context* ctx)
{
    Plane* p = GetCheckedValueObject<Plane>(ctx, 0, Plane_ID);
    float4x4 ret = float4x4::Mirror(*p);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_D3DOrthoProjLH_Static_float_float_float_float(duk_context* ctx)
{
    float nearPlaneDistance = (float)duk_require_number(ctx, 0);
    float farPlaneDistance = (float)duk_require_number(ctx, 1);
    float horizontalViewportSize = (float)duk_require_number(ctx, 2);
    float verticalViewportSize = (float)duk_require_number(ctx, 3);
    float4x4 ret = float4x4::D3DOrthoProjLH(nearPlaneDistance, farPlaneDistance, horizontalViewportSize, verticalViewportSize);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_D3DOrthoProjRH_Static_float_float_float_float(duk_context* ctx)
{
    float nearPlaneDistance = (float)duk_require_number(ctx, 0);
    float farPlaneDistance = (float)duk_require_number(ctx, 1);
    float horizontalViewportSize = (float)duk_require_number(ctx, 2);
    float verticalViewportSize = (float)duk_require_number(ctx, 3);
    float4x4 ret = float4x4::D3DOrthoProjRH(nearPlaneDistance, farPlaneDistance, horizontalViewportSize, verticalViewportSize);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_D3DPerspProjLH_Static_float_float_float_float(duk_context* ctx)
{
    float nearPlaneDistance = (float)duk_require_number(ctx, 0);
    float farPlaneDistance = (float)duk_require_number(ctx, 1);
    float horizontalViewportSize = (float)duk_require_number(ctx, 2);
    float verticalViewportSize = (float)duk_require_number(ctx, 3);
    float4x4 ret = float4x4::D3DPerspProjLH(nearPlaneDistance, farPlaneDistance, horizontalViewportSize, verticalViewportSize);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_D3DPerspProjRH_Static_float_float_float_float(duk_context* ctx)
{
    float nearPlaneDistance = (float)duk_require_number(ctx, 0);
    float farPlaneDistance = (float)duk_require_number(ctx, 1);
    float horizontalViewportSize = (float)duk_require_number(ctx, 2);
    float verticalViewportSize = (float)duk_require_number(ctx, 3);
    float4x4 ret = float4x4::D3DPerspProjRH(nearPlaneDistance, farPlaneDistance, horizontalViewportSize, verticalViewportSize);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_OpenGLOrthoProjLH_Static_float_float_float_float(duk_context* ctx)
{
    float nearPlaneDistance = (float)duk_require_number(ctx, 0);
    float farPlaneDistance = (float)duk_require_number(ctx, 1);
    float horizontalViewportSize = (float)duk_require_number(ctx, 2);
    float verticalViewportSize = (float)duk_require_number(ctx, 3);
    float4x4 ret = float4x4::OpenGLOrthoProjLH(nearPlaneDistance, farPlaneDistance, horizontalViewportSize, verticalViewportSize);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_OpenGLOrthoProjRH_Static_float_float_float_float(duk_context* ctx)
{
    float nearPlaneDistance = (float)duk_require_number(ctx, 0);
    float farPlaneDistance = (float)duk_require_number(ctx, 1);
    float horizontalViewportSize = (float)duk_require_number(ctx, 2);
    float verticalViewportSize = (float)duk_require_number(ctx, 3);
    float4x4 ret = float4x4::OpenGLOrthoProjRH(nearPlaneDistance, farPlaneDistance, horizontalViewportSize, verticalViewportSize);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_OpenGLPerspProjLH_Static_float_float_float_float(duk_context* ctx)
{
    float nearPlaneDistance = (float)duk_require_number(ctx, 0);
    float farPlaneDistance = (float)duk_require_number(ctx, 1);
    float horizontalViewportSize = (float)duk_require_number(ctx, 2);
    float verticalViewportSize = (float)duk_require_number(ctx, 3);
    float4x4 ret = float4x4::OpenGLPerspProjLH(nearPlaneDistance, farPlaneDistance, horizontalViewportSize, verticalViewportSize);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_OpenGLPerspProjRH_Static_float_float_float_float(duk_context* ctx)
{
    float nearPlaneDistance = (float)duk_require_number(ctx, 0);
    float farPlaneDistance = (float)duk_require_number(ctx, 1);
    float horizontalViewportSize = (float)duk_require_number(ctx, 2);
    float verticalViewportSize = (float)duk_require_number(ctx, 3);
    float4x4 ret = float4x4::OpenGLPerspProjRH(nearPlaneDistance, farPlaneDistance, horizontalViewportSize, verticalViewportSize);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_OrthographicProjection_Static_Plane(duk_context* ctx)
{
    Plane* target = GetCheckedValueObject<Plane>(ctx, 0, Plane_ID);
    float4x4 ret = float4x4::OrthographicProjection(*target);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_OrthographicProjectionYZ_Static(duk_context* ctx)
{
    float4x4 ret = float4x4::OrthographicProjectionYZ();
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_OrthographicProjectionXZ_Static(duk_context* ctx)
{
    float4x4 ret = float4x4::OrthographicProjectionXZ();
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_OrthographicProjectionXY_Static(duk_context* ctx)
{
    float4x4 ret = float4x4::OrthographicProjectionXY();
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_LookAt_Static_float3_float3_float3_float3(duk_context* ctx)
{
    float3* localForward = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3* targetDirection = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3* localUp = GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float3* worldUp = GetCheckedValueObject<float3>(ctx, 3, float3_ID);
    float4x4 ret = float4x4::LookAt(*localForward, *targetDirection, *localUp, *worldUp);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_LookAt_Static_float3_float3_float3_float3_float3(duk_context* ctx)
{
    float3* eyePos = GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3* targetPos = GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3* localForward = GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float3* localUp = GetCheckedValueObject<float3>(ctx, 3, float3_ID);
    float3* worldUp = GetCheckedValueObject<float3>(ctx, 4, float3_ID);
    float4x4 ret = float4x4::LookAt(*eyePos, *targetPos, *localForward, *localUp, *worldUp);
    PushValueObjectCopy<float4x4>(ctx, ret, float4x4_ID, float4x4_Finalizer);
    return 1;
}

static duk_ret_t float4x4_RotateX_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float4x4_RotateX_Static_float_float3(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float4x4_RotateX_Static_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_RotateY_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float4x4_RotateY_Static_float(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float4x4_RotateY_Static_float_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_RotateZ_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float4x4_RotateZ_Static_float(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float4x4_RotateZ_Static_float_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_RotateAxisAngle_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && duk_is_number(ctx, 1) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float4x4_RotateAxisAngle_Static_float3_float_float3(ctx);
    if (numArgs == 2 && GetValueObject<float3>(ctx, 0, float3_ID) && duk_is_number(ctx, 1))
        return float4x4_RotateAxisAngle_Static_float3_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_RotateFromTo_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3>(ctx, 1, float3_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float4x4_RotateFromTo_Static_float3_float3_float3(ctx);
    if (numArgs == 2 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float4x4_RotateFromTo_Static_float3_float3(ctx);
    if (numArgs == 5 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3>(ctx, 1, float3_ID) && GetValueObject<float3>(ctx, 2, float3_ID) && GetValueObject<float3>(ctx, 3, float3_ID) && GetValueObject<float3>(ctx, 4, float3_ID))
        return float4x4_RotateFromTo_Static_float3_float3_float3_float3_float3(ctx);
    if (numArgs == 4 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3>(ctx, 1, float3_ID) && GetValueObject<float3>(ctx, 2, float3_ID) && GetValueObject<float3>(ctx, 3, float3_ID))
        return float4x4_RotateFromTo_Static_float3_float3_float3_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_FromQuat_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetValueObject<Quat>(ctx, 0, Quat_ID))
        return float4x4_FromQuat_Static_Quat(ctx);
    if (numArgs == 2 && GetValueObject<Quat>(ctx, 0, Quat_ID) && GetValueObject<float3>(ctx, 1, float3_ID))
        return float4x4_FromQuat_Static_Quat_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_FromTRS_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<Quat>(ctx, 1, Quat_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float4x4_FromTRS_Static_float3_Quat_float3(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3x3>(ctx, 1, float3x3_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float4x4_FromTRS_Static_float3_float3x3_float3(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3x4>(ctx, 1, float3x4_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float4x4_FromTRS_Static_float3_float3x4_float3(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float4x4>(ctx, 1, float4x4_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float4x4_FromTRS_Static_float3_float4x4_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_ScaleAlongAxis_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetValueObject<float3>(ctx, 0, float3_ID) && duk_is_number(ctx, 1) && GetValueObject<float3>(ctx, 2, float3_ID))
        return float4x4_ScaleAlongAxis_Static_float3_float_float3(ctx);
    if (numArgs == 2 && GetValueObject<float3>(ctx, 0, float3_ID) && duk_is_number(ctx, 1))
        return float4x4_ScaleAlongAxis_Static_float3_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float4x4_LookAt_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 4 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3>(ctx, 1, float3_ID) && GetValueObject<float3>(ctx, 2, float3_ID) && GetValueObject<float3>(ctx, 3, float3_ID))
        return float4x4_LookAt_Static_float3_float3_float3_float3(ctx);
    if (numArgs == 5 && GetValueObject<float3>(ctx, 0, float3_ID) && GetValueObject<float3>(ctx, 1, float3_ID) && GetValueObject<float3>(ctx, 2, float3_ID) && GetValueObject<float3>(ctx, 3, float3_ID) && GetValueObject<float3>(ctx, 4, float3_ID))
        return float4x4_LookAt_Static_float3_float3_float3_float3_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static const duk_function_list_entry float4x4_Functions[] = {
    {"GetScale", float4x4_GetScale, 0}
    ,{"ComplementaryProjection", float4x4_ComplementaryProjection, 0}
    ,{"At", float4x4_At_int_int, 2}
    ,{"Row", float4x4_Row_int, 1}
    ,{"Row3", float4x4_Row3_int, 1}
    ,{"Col", float4x4_Col_int, 1}
    ,{"Col3", float4x4_Col3_int, 1}
    ,{"Diagonal", float4x4_Diagonal, 0}
    ,{"Diagonal3", float4x4_Diagonal3, 0}
    ,{"ScaleRow3", float4x4_ScaleRow3_int_float, 2}
    ,{"ScaleRow", float4x4_ScaleRow_int_float, 2}
    ,{"ScaleCol3", float4x4_ScaleCol3_int_float, 2}
    ,{"ScaleCol", float4x4_ScaleCol_int_float, 2}
    ,{"Float3x3Part", float4x4_Float3x3Part, 0}
    ,{"Float3x4Part", float4x4_Float3x4Part, 0}
    ,{"TranslatePart", float4x4_TranslatePart, 0}
    ,{"RotatePart", float4x4_RotatePart, 0}
    ,{"WorldX", float4x4_WorldX, 0}
    ,{"WorldY", float4x4_WorldY, 0}
    ,{"WorldZ", float4x4_WorldZ, 0}
    ,{"SetRow3", float4x4_SetRow3_Selector, DUK_VARARGS}
    ,{"SetRow", float4x4_SetRow_Selector, DUK_VARARGS}
    ,{"SetCol3", float4x4_SetCol3_Selector, DUK_VARARGS}
    ,{"SetCol", float4x4_SetCol_Selector, DUK_VARARGS}
    ,{"Set", float4x4_Set_Selector, DUK_VARARGS}
    ,{"Set3x3Part", float4x4_Set3x3Part_float3x3, 1}
    ,{"Set3x4Part", float4x4_Set3x4Part_float3x4, 1}
    ,{"SetIdentity", float4x4_SetIdentity, 0}
    ,{"SwapColumns", float4x4_SwapColumns_int_int, 2}
    ,{"SwapColumns3", float4x4_SwapColumns3_int_int, 2}
    ,{"SwapRows", float4x4_SwapRows_int_int, 2}
    ,{"SwapRows3", float4x4_SwapRows3_int_int, 2}
    ,{"SetTranslatePart", float4x4_SetTranslatePart_Selector, DUK_VARARGS}
    ,{"SetRotatePartX", float4x4_SetRotatePartX_float, 1}
    ,{"SetRotatePartY", float4x4_SetRotatePartY_float, 1}
    ,{"SetRotatePartZ", float4x4_SetRotatePartZ_float, 1}
    ,{"SetRotatePart", float4x4_SetRotatePart_Selector, DUK_VARARGS}
    ,{"Determinant3", float4x4_Determinant3, 0}
    ,{"Determinant4", float4x4_Determinant4, 0}
    ,{"SubMatrix", float4x4_SubMatrix_int_int, 2}
    ,{"Minor", float4x4_Minor_int_int, 2}
    ,{"Adjugate", float4x4_Adjugate, 0}
    ,{"CholeskyDecompose", float4x4_CholeskyDecompose_float4x4, 1}
    ,{"LUDecompose", float4x4_LUDecompose_float4x4_float4x4, 2}
    ,{"Inverse", float4x4_Inverse_float, 1}
    ,{"Inverted", float4x4_Inverted, 0}
    ,{"InverseColOrthogonal", float4x4_InverseColOrthogonal, 0}
    ,{"InverseOrthogonalUniformScale", float4x4_InverseOrthogonalUniformScale, 0}
    ,{"InverseOrthonormal", float4x4_InverseOrthonormal, 0}
    ,{"Transpose", float4x4_Transpose, 0}
    ,{"Transposed", float4x4_Transposed, 0}
    ,{"InverseTranspose", float4x4_InverseTranspose, 0}
    ,{"InverseTransposed", float4x4_InverseTransposed, 0}
    ,{"Trace", float4x4_Trace, 0}
    ,{"Orthogonalize3", float4x4_Orthogonalize3_Selector, DUK_VARARGS}
    ,{"Orthonormalize3", float4x4_Orthonormalize3_Selector, DUK_VARARGS}
    ,{"RemoveScale", float4x4_RemoveScale, 0}
    ,{"Pivot", float4x4_Pivot, 0}
    ,{"TransformPos", float4x4_TransformPos_Selector, DUK_VARARGS}
    ,{"TransformDir", float4x4_TransformDir_Selector, DUK_VARARGS}
    ,{"Transform", float4x4_Transform_float4, 1}
    ,{"IsFinite", float4x4_IsFinite, 0}
    ,{"IsIdentity", float4x4_IsIdentity_float, 1}
    ,{"IsLowerTriangular", float4x4_IsLowerTriangular_float, 1}
    ,{"IsUpperTriangular", float4x4_IsUpperTriangular_float, 1}
    ,{"IsInvertible", float4x4_IsInvertible_float, 1}
    ,{"IsSymmetric", float4x4_IsSymmetric_float, 1}
    ,{"IsSkewSymmetric", float4x4_IsSkewSymmetric_float, 1}
    ,{"IsIdempotent", float4x4_IsIdempotent_float, 1}
    ,{"HasUnitaryScale", float4x4_HasUnitaryScale_float, 1}
    ,{"HasNegativeScale", float4x4_HasNegativeScale, 0}
    ,{"HasUniformScale", float4x4_HasUniformScale_float, 1}
    ,{"IsRowOrthogonal3", float4x4_IsRowOrthogonal3_float, 1}
    ,{"IsColOrthogonal3", float4x4_IsColOrthogonal3_float, 1}
    ,{"IsOrthonormal3", float4x4_IsOrthonormal3_float, 1}
    ,{"Equals", float4x4_Equals_float4x4_float, 2}
    ,{"ContainsProjection", float4x4_ContainsProjection_float, 1}
    ,{"ToString", float4x4_ToString, 0}
    ,{"SerializeToString", float4x4_SerializeToString, 0}
    ,{"ToString2", float4x4_ToString2, 0}
    ,{"ToEulerXYX", float4x4_ToEulerXYX, 0}
    ,{"ToEulerXZX", float4x4_ToEulerXZX, 0}
    ,{"ToEulerYXY", float4x4_ToEulerYXY, 0}
    ,{"ToEulerYZY", float4x4_ToEulerYZY, 0}
    ,{"ToEulerZXZ", float4x4_ToEulerZXZ, 0}
    ,{"ToEulerZYZ", float4x4_ToEulerZYZ, 0}
    ,{"ToEulerXYZ", float4x4_ToEulerXYZ, 0}
    ,{"ToEulerXZY", float4x4_ToEulerXZY, 0}
    ,{"ToEulerYXZ", float4x4_ToEulerYXZ, 0}
    ,{"ToEulerYZX", float4x4_ToEulerYZX, 0}
    ,{"ToEulerZXY", float4x4_ToEulerZXY, 0}
    ,{"ToEulerZYX", float4x4_ToEulerZYX, 0}
    ,{"ExtractScale", float4x4_ExtractScale, 0}
    ,{"Decompose", float4x4_Decompose_Selector, DUK_VARARGS}
    ,{"Abs", float4x4_Abs, 0}
    ,{"Mul", float4x4_Mul_Selector, DUK_VARARGS}
    ,{"MulPos", float4x4_MulPos_Selector, DUK_VARARGS}
    ,{"MulDir", float4x4_MulDir_Selector, DUK_VARARGS}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry float4x4_StaticFunctions[] = {
    {"RotateX", float4x4_RotateX_Static_Selector, DUK_VARARGS}
    ,{"RotateY", float4x4_RotateY_Static_Selector, DUK_VARARGS}
    ,{"RotateZ", float4x4_RotateZ_Static_Selector, DUK_VARARGS}
    ,{"RotateAxisAngle", float4x4_RotateAxisAngle_Static_Selector, DUK_VARARGS}
    ,{"RotateFromTo", float4x4_RotateFromTo_Static_Selector, DUK_VARARGS}
    ,{"RandomGeneral", float4x4_RandomGeneral_Static_LCG_float_float, 3}
    ,{"FromQuat", float4x4_FromQuat_Static_Selector, DUK_VARARGS}
    ,{"FromTRS", float4x4_FromTRS_Static_Selector, DUK_VARARGS}
    ,{"FromEulerXYX", float4x4_FromEulerXYX_Static_float_float_float, 3}
    ,{"FromEulerXZX", float4x4_FromEulerXZX_Static_float_float_float, 3}
    ,{"FromEulerYXY", float4x4_FromEulerYXY_Static_float_float_float, 3}
    ,{"FromEulerYZY", float4x4_FromEulerYZY_Static_float_float_float, 3}
    ,{"FromEulerZXZ", float4x4_FromEulerZXZ_Static_float_float_float, 3}
    ,{"FromEulerZYZ", float4x4_FromEulerZYZ_Static_float_float_float, 3}
    ,{"FromEulerXYZ", float4x4_FromEulerXYZ_Static_float_float_float, 3}
    ,{"FromEulerXZY", float4x4_FromEulerXZY_Static_float_float_float, 3}
    ,{"FromEulerYXZ", float4x4_FromEulerYXZ_Static_float_float_float, 3}
    ,{"FromEulerYZX", float4x4_FromEulerYZX_Static_float_float_float, 3}
    ,{"FromEulerZXY", float4x4_FromEulerZXY_Static_float_float_float, 3}
    ,{"FromEulerZYX", float4x4_FromEulerZYX_Static_float_float_float, 3}
    ,{"Scale", float4x4_Scale_Static_float3_float3, 2}
    ,{"ScaleAlongAxis", float4x4_ScaleAlongAxis_Static_Selector, DUK_VARARGS}
    ,{"UniformScale", float4x4_UniformScale_Static_float_float3, 2}
    ,{"ShearX", float4x4_ShearX_Static_float_float, 2}
    ,{"ShearY", float4x4_ShearY_Static_float_float, 2}
    ,{"ShearZ", float4x4_ShearZ_Static_float_float, 2}
    ,{"Mirror", float4x4_Mirror_Static_Plane, 1}
    ,{"D3DOrthoProjLH", float4x4_D3DOrthoProjLH_Static_float_float_float_float, 4}
    ,{"D3DOrthoProjRH", float4x4_D3DOrthoProjRH_Static_float_float_float_float, 4}
    ,{"D3DPerspProjLH", float4x4_D3DPerspProjLH_Static_float_float_float_float, 4}
    ,{"D3DPerspProjRH", float4x4_D3DPerspProjRH_Static_float_float_float_float, 4}
    ,{"OpenGLOrthoProjLH", float4x4_OpenGLOrthoProjLH_Static_float_float_float_float, 4}
    ,{"OpenGLOrthoProjRH", float4x4_OpenGLOrthoProjRH_Static_float_float_float_float, 4}
    ,{"OpenGLPerspProjLH", float4x4_OpenGLPerspProjLH_Static_float_float_float_float, 4}
    ,{"OpenGLPerspProjRH", float4x4_OpenGLPerspProjRH_Static_float_float_float_float, 4}
    ,{"OrthographicProjection", float4x4_OrthographicProjection_Static_Plane, 1}
    ,{"OrthographicProjectionYZ", float4x4_OrthographicProjectionYZ_Static, 0}
    ,{"OrthographicProjectionXZ", float4x4_OrthographicProjectionXZ_Static, 0}
    ,{"OrthographicProjectionXY", float4x4_OrthographicProjectionXY_Static, 0}
    ,{"LookAt", float4x4_LookAt_Static_Selector, DUK_VARARGS}
    ,{nullptr, nullptr, 0}
};

void Expose_float4x4(duk_context* ctx)
{
    duk_push_c_function(ctx, float4x4_Ctor_Selector, DUK_VARARGS);
    duk_put_function_list(ctx, -1, float4x4_StaticFunctions);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, float4x4_Functions);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, float4x4_ID);
}

}
