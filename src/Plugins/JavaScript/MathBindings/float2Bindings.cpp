// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "BindingsHelpers.h"
#include "Math/float2.h"
#include "Math/float4.h"
#include "Math/float3.h"
#include "Algorithm/Random/LCG.h"

namespace JSBindings
{

extern const char* float4_Id;
extern const char* float3_Id;
extern const char* LCG_Id;

duk_ret_t float4_Dtor(duk_context* ctx);
duk_ret_t float3_Dtor(duk_context* ctx);
duk_ret_t LCG_Dtor(duk_context* ctx);

const char* float2_Id = "float2";

duk_ret_t float2_Dtor(duk_context* ctx)
{
    float2* obj = GetObject<float2>(ctx, 0, float2_Id);
    if (obj)
    {
        delete obj;
        SetObject(ctx, 0, 0, float2_Id);
    }
    return 0;
}

static duk_ret_t float2_Set_x(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float x = (float)duk_require_number(ctx, 0);
    thisObj->x = x;
    return 0;
}

static duk_ret_t float2_Get_x(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    duk_push_number(ctx, thisObj->x);
    return 1;
}

static duk_ret_t float2_Set_y(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float y = (float)duk_require_number(ctx, 0);
    thisObj->y = y;
    return 0;
}

static duk_ret_t float2_Get_y(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    duk_push_number(ctx, thisObj->y);
    return 1;
}

static duk_ret_t float2_Ctor(duk_context* ctx)
{
    float2* newObj = new float2();
    duk_push_this(ctx); SetObject(ctx, -1, newObj, float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2);
    return 0;
}

static duk_ret_t float2_Ctor_float2(duk_context* ctx)
{
    float2* rhs = GetObject<float2>(ctx, 0, float2_Id); if (!rhs) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2* newObj = new float2(*rhs);
    duk_push_this(ctx); SetObject(ctx, -1, newObj, float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2);
    return 0;
}

static duk_ret_t float2_Ctor_float_float(duk_context* ctx)
{
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float2* newObj = new float2(x, y);
    duk_push_this(ctx); SetObject(ctx, -1, newObj, float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2);
    return 0;
}

static duk_ret_t float2_Ctor_float(duk_context* ctx)
{
    float scalar = (float)duk_require_number(ctx, 0);
    float2* newObj = new float2(scalar);
    duk_push_this(ctx); SetObject(ctx, -1, newObj, float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2);
    return 0;
}

static duk_ret_t float2_At_int(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    int index = (int)duk_require_number(ctx, 0);
    float & ret = thisObj->At(index);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_Add_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* v = GetObject<float2>(ctx, 0, float2_Id); if (!v) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2 ret = thisObj->Add(*v);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Add_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float s = (float)duk_require_number(ctx, 0);
    float2 ret = thisObj->Add(s);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Sub_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* v = GetObject<float2>(ctx, 0, float2_Id); if (!v) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2 ret = thisObj->Sub(*v);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Sub_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float s = (float)duk_require_number(ctx, 0);
    float2 ret = thisObj->Sub(s);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_SubLeft_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float s = (float)duk_require_number(ctx, 0);
    float2 ret = thisObj->SubLeft(s);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Mul_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* v = GetObject<float2>(ctx, 0, float2_Id); if (!v) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2 ret = thisObj->Mul(*v);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Mul_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float s = (float)duk_require_number(ctx, 0);
    float2 ret = thisObj->Mul(s);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Div_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* v = GetObject<float2>(ctx, 0, float2_Id); if (!v) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2 ret = thisObj->Div(*v);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Div_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float s = (float)duk_require_number(ctx, 0);
    float2 ret = thisObj->Div(s);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_DivLeft_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float s = (float)duk_require_number(ctx, 0);
    float2 ret = thisObj->DivLeft(s);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_xx(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2 ret = thisObj->xx();
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_xy(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2 ret = thisObj->xy();
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_yx(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2 ret = thisObj->yx();
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_yy(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2 ret = thisObj->yy();
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Swizzled_int_int_int_int(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    int i = (int)duk_require_number(ctx, 0);
    int j = (int)duk_require_number(ctx, 1);
    int k = (int)duk_require_number(ctx, 2);
    int l = (int)duk_require_number(ctx, 3);
    float4 ret = thisObj->Swizzled(i, j, k, l);
    duk_push_object(ctx); SetObject(ctx, -1, new float4(ret), float4_Id); duk_push_c_function(ctx, float4_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float4_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Swizzled_int_int_int(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    int i = (int)duk_require_number(ctx, 0);
    int j = (int)duk_require_number(ctx, 1);
    int k = (int)duk_require_number(ctx, 2);
    float3 ret = thisObj->Swizzled(i, j, k);
    duk_push_object(ctx); SetObject(ctx, -1, new float3(ret), float3_Id); duk_push_c_function(ctx, float3_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float3_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Swizzled_int_int(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    int i = (int)duk_require_number(ctx, 0);
    int j = (int)duk_require_number(ctx, 1);
    float2 ret = thisObj->Swizzled(i, j);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_SetFromScalar_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float scalar = (float)duk_require_number(ctx, 0);
    thisObj->SetFromScalar(scalar);
    return 0;
}

static duk_ret_t float2_Set_float_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    thisObj->Set(x, y);
    return 0;
}

static duk_ret_t float2_SetFromPolarCoordinates_float_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float theta = (float)duk_require_number(ctx, 0);
    float length = (float)duk_require_number(ctx, 1);
    thisObj->SetFromPolarCoordinates(theta, length);
    return 0;
}

static duk_ret_t float2_SetFromPolarCoordinates_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* polar = GetObject<float2>(ctx, 0, float2_Id); if (!polar) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    thisObj->SetFromPolarCoordinates(*polar);
    return 0;
}

static duk_ret_t float2_ToPolarCoordinates(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2 ret = thisObj->ToPolarCoordinates();
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_AimedAngle(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->AimedAngle();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_Length(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->Length();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_LengthSq(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->LengthSq();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_Normalize(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->Normalize();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_Normalized(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2 ret = thisObj->Normalized();
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_ScaleToLength_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float newLength = (float)duk_require_number(ctx, 0);
    float ret = thisObj->ScaleToLength(newLength);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_ScaledToLength_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float newLength = (float)duk_require_number(ctx, 0);
    float2 ret = thisObj->ScaledToLength(newLength);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_IsNormalized_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float epsilonSq = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->IsNormalized(epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float2_IsZero_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float epsilonSq = (float)duk_require_number(ctx, 0);
    bool ret = thisObj->IsZero(epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float2_IsFinite(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    bool ret = thisObj->IsFinite();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float2_IsPerpendicular_float2_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* other = GetObject<float2>(ctx, 0, float2_Id); if (!other) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float epsilonSq = (float)duk_require_number(ctx, 1);
    bool ret = thisObj->IsPerpendicular(*other, epsilonSq);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float2_Equals_float2_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* other = GetObject<float2>(ctx, 0, float2_Id); if (!other) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float epsilon = (float)duk_require_number(ctx, 1);
    bool ret = thisObj->Equals(*other, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float2_Equals_float_float_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float epsilon = (float)duk_require_number(ctx, 2);
    bool ret = thisObj->Equals(x, y, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float2_BitEquals_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* other = GetObject<float2>(ctx, 0, float2_Id); if (!other) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = thisObj->BitEquals(*other);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float2_SumOfElements(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->SumOfElements();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_ProductOfElements(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->ProductOfElements();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_AverageOfElements(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->AverageOfElements();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_MinElement(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->MinElement();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_MinElementIndex(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    int ret = thisObj->MinElementIndex();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_MaxElement(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ret = thisObj->MaxElement();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_MaxElementIndex(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    int ret = thisObj->MaxElementIndex();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_Abs(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2 ret = thisObj->Abs();
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Neg(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2 ret = thisObj->Neg();
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Recip(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2 ret = thisObj->Recip();
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Min_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float ceil = (float)duk_require_number(ctx, 0);
    float2 ret = thisObj->Min(ceil);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Min_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* ceil = GetObject<float2>(ctx, 0, float2_Id); if (!ceil) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2 ret = thisObj->Min(*ceil);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Max_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float floor = (float)duk_require_number(ctx, 0);
    float2 ret = thisObj->Max(floor);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Max_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* floor = GetObject<float2>(ctx, 0, float2_Id); if (!floor) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2 ret = thisObj->Max(*floor);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Clamp_float_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float floor = (float)duk_require_number(ctx, 0);
    float ceil = (float)duk_require_number(ctx, 1);
    float2 ret = thisObj->Clamp(floor, ceil);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Clamp_float2_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* floor = GetObject<float2>(ctx, 0, float2_Id); if (!floor) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2* ceil = GetObject<float2>(ctx, 1, float2_Id); if (!ceil) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2 ret = thisObj->Clamp(*floor, *ceil);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Clamp01(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2 ret = thisObj->Clamp01();
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Distance_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* point = GetObject<float2>(ctx, 0, float2_Id); if (!point) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float ret = thisObj->Distance(*point);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_DistanceSq_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* point = GetObject<float2>(ctx, 0, float2_Id); if (!point) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float ret = thisObj->DistanceSq(*point);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_Dot_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* v = GetObject<float2>(ctx, 0, float2_Id); if (!v) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float ret = thisObj->Dot(*v);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_Perp(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2 ret = thisObj->Perp();
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_PerpDot_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* rhs = GetObject<float2>(ctx, 0, float2_Id); if (!rhs) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float ret = thisObj->PerpDot(*rhs);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_Rotate90CW(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    thisObj->Rotate90CW();
    return 0;
}

static duk_ret_t float2_Rotated90CW(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2 ret = thisObj->Rotated90CW();
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Rotate90CCW(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    thisObj->Rotate90CCW();
    return 0;
}

static duk_ret_t float2_Rotated90CCW(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2 ret = thisObj->Rotated90CCW();
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Reflect_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* normal = GetObject<float2>(ctx, 0, float2_Id); if (!normal) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2 ret = thisObj->Reflect(*normal);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Refract_float2_float_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* normal = GetObject<float2>(ctx, 0, float2_Id); if (!normal) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float negativeSideRefractionIndex = (float)duk_require_number(ctx, 1);
    float positiveSideRefractionIndex = (float)duk_require_number(ctx, 2);
    float2 ret = thisObj->Refract(*normal, negativeSideRefractionIndex, positiveSideRefractionIndex);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_ProjectTo_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* direction = GetObject<float2>(ctx, 0, float2_Id); if (!direction) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2 ret = thisObj->ProjectTo(*direction);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_ProjectToNorm_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* direction = GetObject<float2>(ctx, 0, float2_Id); if (!direction) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2 ret = thisObj->ProjectToNorm(*direction);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_AngleBetween_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* other = GetObject<float2>(ctx, 0, float2_Id); if (!other) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float ret = thisObj->AngleBetween(*other);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_AngleBetweenNorm_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* normalizedVector = GetObject<float2>(ctx, 0, float2_Id); if (!normalizedVector) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float ret = thisObj->AngleBetweenNorm(*normalizedVector);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t float2_Decompose_float2_float2_float2(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* direction = GetObject<float2>(ctx, 0, float2_Id); if (!direction) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2* outParallel = GetObject<float2>(ctx, 1, float2_Id); if (!outParallel) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2* outPerpendicular = GetObject<float2>(ctx, 2, float2_Id); if (!outPerpendicular) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    thisObj->Decompose(*direction, *outParallel, *outPerpendicular);
    return 0;
}

static duk_ret_t float2_Lerp_float2_float(duk_context* ctx)
{
    float2* thisObj = GetThisObject<float2>(ctx, float2_Id); if (!thisObj) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null this pointer");
    float2* b = GetObject<float2>(ctx, 0, float2_Id); if (!b) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float t = (float)duk_require_number(ctx, 1);
    float2 ret = thisObj->Lerp(*b, t);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Ctor_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 0)
        return float2_Ctor(ctx);
    if (numArgs == 1 && GetObject<float2>(ctx, 0, float2_Id))
        return float2_Ctor_float2(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float2_Ctor_float_float(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float2_Ctor_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float2_Add_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<float2>(ctx, 0, float2_Id))
        return float2_Add_float2(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float2_Add_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float2_Sub_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<float2>(ctx, 0, float2_Id))
        return float2_Sub_float2(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float2_Sub_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float2_Mul_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<float2>(ctx, 0, float2_Id))
        return float2_Mul_float2(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float2_Mul_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float2_Div_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && GetObject<float2>(ctx, 0, float2_Id))
        return float2_Div_float2(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float2_Div_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float2_Swizzled_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 4 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2) && duk_is_number(ctx, 3))
        return float2_Swizzled_int_int_int_int(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float2_Swizzled_int_int_int(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float2_Swizzled_int_int(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float2_SetFromPolarCoordinates_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float2_SetFromPolarCoordinates_float_float(ctx);
    if (numArgs == 1 && GetObject<float2>(ctx, 0, float2_Id))
        return float2_SetFromPolarCoordinates_float2(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float2_Equals_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && GetObject<float2>(ctx, 0, float2_Id) && duk_is_number(ctx, 1))
        return float2_Equals_float2_float(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return float2_Equals_float_float_float(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float2_Min_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float2_Min_float(ctx);
    if (numArgs == 1 && GetObject<float2>(ctx, 0, float2_Id))
        return float2_Min_float2(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float2_Max_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return float2_Max_float(ctx);
    if (numArgs == 1 && GetObject<float2>(ctx, 0, float2_Id))
        return float2_Max_float2(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float2_Clamp_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float2_Clamp_float_float(ctx);
    if (numArgs == 2 && GetObject<float2>(ctx, 0, float2_Id) && GetObject<float2>(ctx, 1, float2_Id))
        return float2_Clamp_float2_float2(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t float2_FromScalar_Static_float(duk_context* ctx)
{
    float scalar = (float)duk_require_number(ctx, 0);
    float2 ret = float2::FromScalar(scalar);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_FromPolarCoordinates_Static_float_float(duk_context* ctx)
{
    float theta = (float)duk_require_number(ctx, 0);
    float length = (float)duk_require_number(ctx, 1);
    float2 ret = float2::FromPolarCoordinates(theta, length);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_FromPolarCoordinates_Static_float2(duk_context* ctx)
{
    float2* polar = GetObject<float2>(ctx, 0, float2_Id); if (!polar) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2 ret = float2::FromPolarCoordinates(*polar);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Lerp_Static_float2_float2_float(duk_context* ctx)
{
    float2* a = GetObject<float2>(ctx, 0, float2_Id); if (!a) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2* b = GetObject<float2>(ctx, 1, float2_Id); if (!b) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float t = (float)duk_require_number(ctx, 2);
    float2 ret = float2::Lerp(*a, *b, t);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_Orthogonalize_Static_float2_float2(duk_context* ctx)
{
    float2* a = GetObject<float2>(ctx, 0, float2_Id); if (!a) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2* b = GetObject<float2>(ctx, 1, float2_Id); if (!b) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2::Orthogonalize(*a, *b);
    return 0;
}

static duk_ret_t float2_AreOrthogonal_Static_float2_float2_float(duk_context* ctx)
{
    float2* a = GetObject<float2>(ctx, 0, float2_Id); if (!a) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2* b = GetObject<float2>(ctx, 1, float2_Id); if (!b) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float epsilon = (float)duk_require_number(ctx, 2);
    bool ret = float2::AreOrthogonal(*a, *b, epsilon);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float2_Orthonormalize_Static_float2_float2(duk_context* ctx)
{
    float2* a = GetObject<float2>(ctx, 0, float2_Id); if (!a) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2* b = GetObject<float2>(ctx, 1, float2_Id); if (!b) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2::Orthonormalize(*a, *b);
    return 0;
}

static duk_ret_t float2_OrientedCCW_Static_float2_float2_float2(duk_context* ctx)
{
    float2* a = GetObject<float2>(ctx, 0, float2_Id); if (!a) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2* b = GetObject<float2>(ctx, 1, float2_Id); if (!b) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float2* c = GetObject<float2>(ctx, 2, float2_Id); if (!c) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    bool ret = float2::OrientedCCW(*a, *b, *c);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t float2_RandomDir_Static_LCG_float(duk_context* ctx)
{
    LCG* lcg = GetObject<LCG>(ctx, 0, LCG_Id); if (!lcg) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float length = (float)duk_require_number(ctx, 1);
    float2 ret = float2::RandomDir(*lcg, length);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_RandomBox_Static_LCG_float_float(duk_context* ctx)
{
    LCG* lcg = GetObject<LCG>(ctx, 0, LCG_Id); if (!lcg) duk_error(ctx, DUK_ERR_REFERENCE_ERROR, "Null or invalid object argument");
    float minElem = (float)duk_require_number(ctx, 1);
    float maxElem = (float)duk_require_number(ctx, 2);
    float2 ret = float2::RandomBox(*lcg, minElem, maxElem);
    duk_push_object(ctx); SetObject(ctx, -1, new float2(ret), float2_Id); duk_push_c_function(ctx, float2_Dtor, 1); duk_set_finalizer(ctx, -2); duk_get_global_string(ctx, float2_Id); duk_get_prop_string(ctx, -1, "prototype"); duk_set_prototype(ctx, -3); duk_pop(ctx);
    return 1;
}

static duk_ret_t float2_FromPolarCoordinates_Static_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return float2_FromPolarCoordinates_Static_float_float(ctx);
    if (numArgs == 1 && GetObject<float2>(ctx, 0, float2_Id))
        return float2_FromPolarCoordinates_Static_float2(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static const duk_function_list_entry float2_Functions[] = {
    {"At", float2_At_int, 1}
    ,{"Add", float2_Add_Selector, DUK_VARARGS}
    ,{"Sub", float2_Sub_Selector, DUK_VARARGS}
    ,{"SubLeft", float2_SubLeft_float, 1}
    ,{"Mul", float2_Mul_Selector, DUK_VARARGS}
    ,{"Div", float2_Div_Selector, DUK_VARARGS}
    ,{"DivLeft", float2_DivLeft_float, 1}
    ,{"xx", float2_xx, 0}
    ,{"xy", float2_xy, 0}
    ,{"yx", float2_yx, 0}
    ,{"yy", float2_yy, 0}
    ,{"Swizzled", float2_Swizzled_Selector, DUK_VARARGS}
    ,{"SetFromScalar", float2_SetFromScalar_float, 1}
    ,{"Set", float2_Set_float_float, 2}
    ,{"SetFromPolarCoordinates", float2_SetFromPolarCoordinates_Selector, DUK_VARARGS}
    ,{"ToPolarCoordinates", float2_ToPolarCoordinates, 0}
    ,{"AimedAngle", float2_AimedAngle, 0}
    ,{"Length", float2_Length, 0}
    ,{"LengthSq", float2_LengthSq, 0}
    ,{"Normalize", float2_Normalize, 0}
    ,{"Normalized", float2_Normalized, 0}
    ,{"ScaleToLength", float2_ScaleToLength_float, 1}
    ,{"ScaledToLength", float2_ScaledToLength_float, 1}
    ,{"IsNormalized", float2_IsNormalized_float, 1}
    ,{"IsZero", float2_IsZero_float, 1}
    ,{"IsFinite", float2_IsFinite, 0}
    ,{"IsPerpendicular", float2_IsPerpendicular_float2_float, 2}
    ,{"Equals", float2_Equals_Selector, DUK_VARARGS}
    ,{"BitEquals", float2_BitEquals_float2, 1}
    ,{"SumOfElements", float2_SumOfElements, 0}
    ,{"ProductOfElements", float2_ProductOfElements, 0}
    ,{"AverageOfElements", float2_AverageOfElements, 0}
    ,{"MinElement", float2_MinElement, 0}
    ,{"MinElementIndex", float2_MinElementIndex, 0}
    ,{"MaxElement", float2_MaxElement, 0}
    ,{"MaxElementIndex", float2_MaxElementIndex, 0}
    ,{"Abs", float2_Abs, 0}
    ,{"Neg", float2_Neg, 0}
    ,{"Recip", float2_Recip, 0}
    ,{"Min", float2_Min_Selector, DUK_VARARGS}
    ,{"Max", float2_Max_Selector, DUK_VARARGS}
    ,{"Clamp", float2_Clamp_Selector, DUK_VARARGS}
    ,{"Clamp01", float2_Clamp01, 0}
    ,{"Distance", float2_Distance_float2, 1}
    ,{"DistanceSq", float2_DistanceSq_float2, 1}
    ,{"Dot", float2_Dot_float2, 1}
    ,{"Perp", float2_Perp, 0}
    ,{"PerpDot", float2_PerpDot_float2, 1}
    ,{"Rotate90CW", float2_Rotate90CW, 0}
    ,{"Rotated90CW", float2_Rotated90CW, 0}
    ,{"Rotate90CCW", float2_Rotate90CCW, 0}
    ,{"Rotated90CCW", float2_Rotated90CCW, 0}
    ,{"Reflect", float2_Reflect_float2, 1}
    ,{"Refract", float2_Refract_float2_float_float, 3}
    ,{"ProjectTo", float2_ProjectTo_float2, 1}
    ,{"ProjectToNorm", float2_ProjectToNorm_float2, 1}
    ,{"AngleBetween", float2_AngleBetween_float2, 1}
    ,{"AngleBetweenNorm", float2_AngleBetweenNorm_float2, 1}
    ,{"Decompose", float2_Decompose_float2_float2_float2, 3}
    ,{"Lerp", float2_Lerp_float2_float, 2}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry float2_StaticFunctions[] = {
    {"FromScalar", float2_FromScalar_Static_float, 1}
    ,{"FromPolarCoordinates", float2_FromPolarCoordinates_Static_Selector, DUK_VARARGS}
    ,{"Lerp", float2_Lerp_Static_float2_float2_float, 3}
    ,{"Orthogonalize", float2_Orthogonalize_Static_float2_float2, 2}
    ,{"AreOrthogonal", float2_AreOrthogonal_Static_float2_float2_float, 3}
    ,{"Orthonormalize", float2_Orthonormalize_Static_float2_float2, 2}
    ,{"OrientedCCW", float2_OrientedCCW_Static_float2_float2_float2, 3}
    ,{"RandomDir", float2_RandomDir_Static_LCG_float, 2}
    ,{"RandomBox", float2_RandomBox_Static_LCG_float_float, 3}
    ,{nullptr, nullptr, 0}
};

void Expose_float2(duk_context* ctx)
{
    duk_push_c_function(ctx, float2_Ctor_Selector, DUK_VARARGS);
    duk_put_function_list(ctx, -1, float2_StaticFunctions);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, float2_Functions);
    DefineProperty(ctx, "x", float2_Get_x, float2_Set_x);
    DefineProperty(ctx, "y", float2_Get_y, float2_Set_y);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, float2_Id);
}

}
