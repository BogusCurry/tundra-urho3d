// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "BindingsHelpers.h"
#include "Scene/SceneAPI.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Framework/Framework.h"
#include "Scene/Scene.h"
#include "Scene/IComponent.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{



const char* SceneAPI_ID = "SceneAPI";

static duk_ret_t SceneAPI_Scenes(duk_context* ctx)
{
    SceneAPI* thisObj = GetThisWeakObject<SceneAPI>(ctx);
    SceneMap & ret = thisObj->Scenes();
    PushWeakObjectMap(ctx, ret);
    return 1;
}

static duk_ret_t SceneAPI_SceneByName_String(duk_context* ctx)
{
    SceneAPI* thisObj = GetThisWeakObject<SceneAPI>(ctx);
    String name(duk_require_string(ctx, 0));
    ScenePtr ret = thisObj->SceneByName(name);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t SceneAPI_MainCameraScene(duk_context* ctx)
{
    SceneAPI* thisObj = GetThisWeakObject<SceneAPI>(ctx);
    Scene * ret = thisObj->MainCameraScene();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t SceneAPI_CreateScene_String_bool_bool_AttributeChange__Type(duk_context* ctx)
{
    SceneAPI* thisObj = GetThisWeakObject<SceneAPI>(ctx);
    String name(duk_require_string(ctx, 0));
    bool viewEnabled = duk_require_boolean(ctx, 1);
    bool authority = duk_require_boolean(ctx, 2);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 3);
    ScenePtr ret = thisObj->CreateScene(name, viewEnabled, authority, change);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t SceneAPI_RemoveScene_String_AttributeChange__Type(duk_context* ctx)
{
    SceneAPI* thisObj = GetThisWeakObject<SceneAPI>(ctx);
    String name(duk_require_string(ctx, 0));
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    bool ret = thisObj->RemoveScene(name, change);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t SceneAPI_IsComponentFactoryRegistered_String(duk_context* ctx)
{
    SceneAPI* thisObj = GetThisWeakObject<SceneAPI>(ctx);
    String typeName(duk_require_string(ctx, 0));
    bool ret = thisObj->IsComponentFactoryRegistered(typeName);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t SceneAPI_IsPlaceholderComponentRegistered_String(duk_context* ctx)
{
    SceneAPI* thisObj = GetThisWeakObject<SceneAPI>(ctx);
    String typeName(duk_require_string(ctx, 0));
    bool ret = thisObj->IsPlaceholderComponentRegistered(typeName);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t SceneAPI_IsComponentTypeRegistered_String(duk_context* ctx)
{
    SceneAPI* thisObj = GetThisWeakObject<SceneAPI>(ctx);
    String typeName(duk_require_string(ctx, 0));
    bool ret = thisObj->IsComponentTypeRegistered(typeName);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t SceneAPI_CreateComponentByName_Scene_String_String(duk_context* ctx)
{
    SceneAPI* thisObj = GetThisWeakObject<SceneAPI>(ctx);
    Scene* scene = GetWeakObject<Scene>(ctx, 0);
    String componentTypeName(duk_require_string(ctx, 1));
    String newComponentName(duk_require_string(ctx, 2));
    ComponentPtr ret = thisObj->CreateComponentByName(scene, componentTypeName, newComponentName);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t SceneAPI_CreateComponentById_Scene_u32_String(duk_context* ctx)
{
    SceneAPI* thisObj = GetThisWeakObject<SceneAPI>(ctx);
    Scene* scene = GetWeakObject<Scene>(ctx, 0);
    u32 componentTypeid = (u32)duk_require_number(ctx, 1);
    String newComponentName(duk_require_string(ctx, 2));
    ComponentPtr ret = thisObj->CreateComponentById(scene, componentTypeid, newComponentName);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t SceneAPI_ComponentTypeNameForTypeId_u32(duk_context* ctx)
{
    SceneAPI* thisObj = GetThisWeakObject<SceneAPI>(ctx);
    u32 componentTypeId = (u32)duk_require_number(ctx, 0);
    String ret = thisObj->ComponentTypeNameForTypeId(componentTypeId);
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t SceneAPI_ComponentTypeIdForTypeName_String(duk_context* ctx)
{
    SceneAPI* thisObj = GetThisWeakObject<SceneAPI>(ctx);
    String componentTypeName(duk_require_string(ctx, 0));
    u32 ret = thisObj->ComponentTypeIdForTypeName(componentTypeName);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t SceneAPI_ComponentTypes(duk_context* ctx)
{
    SceneAPI* thisObj = GetThisWeakObject<SceneAPI>(ctx);
    StringVector ret = thisObj->ComponentTypes();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t SceneAPI_RegisterComponentType_String_IComponent(duk_context* ctx)
{
    SceneAPI* thisObj = GetThisWeakObject<SceneAPI>(ctx);
    String typeName(duk_require_string(ctx, 0));
    IComponent* component = GetWeakObject<IComponent>(ctx, 1);
    thisObj->RegisterComponentType(typeName, component);
    return 0;
}

static duk_ret_t SceneAPI_AttributeTypes_Static(duk_context* ctx)
{
    const StringVector & ret = SceneAPI::AttributeTypes();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t SceneAPI_AttributeTypeNameForTypeId_Static_u32(duk_context* ctx)
{
    u32 attributeTypeId = (u32)duk_require_number(ctx, 0);
    String ret = SceneAPI::AttributeTypeNameForTypeId(attributeTypeId);
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t SceneAPI_AttributeTypeIdForTypeName_Static_String(duk_context* ctx)
{
    String attributeTypeName(duk_require_string(ctx, 0));
    u32 ret = SceneAPI::AttributeTypeIdForTypeName(attributeTypeName);
    duk_push_number(ctx, ret);
    return 1;
}

static const duk_function_list_entry SceneAPI_Functions[] = {
    {"Scenes", SceneAPI_Scenes, 0}
    ,{"SceneByName", SceneAPI_SceneByName_String, 1}
    ,{"MainCameraScene", SceneAPI_MainCameraScene, 0}
    ,{"CreateScene", SceneAPI_CreateScene_String_bool_bool_AttributeChange__Type, 4}
    ,{"RemoveScene", SceneAPI_RemoveScene_String_AttributeChange__Type, 2}
    ,{"IsComponentFactoryRegistered", SceneAPI_IsComponentFactoryRegistered_String, 1}
    ,{"IsPlaceholderComponentRegistered", SceneAPI_IsPlaceholderComponentRegistered_String, 1}
    ,{"IsComponentTypeRegistered", SceneAPI_IsComponentTypeRegistered_String, 1}
    ,{"CreateComponentByName", SceneAPI_CreateComponentByName_Scene_String_String, 3}
    ,{"CreateComponentById", SceneAPI_CreateComponentById_Scene_u32_String, 3}
    ,{"ComponentTypeNameForTypeId", SceneAPI_ComponentTypeNameForTypeId_u32, 1}
    ,{"ComponentTypeIdForTypeName", SceneAPI_ComponentTypeIdForTypeName_String, 1}
    ,{"ComponentTypes", SceneAPI_ComponentTypes, 0}
    ,{"RegisterComponentType", SceneAPI_RegisterComponentType_String_IComponent, 2}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry SceneAPI_StaticFunctions[] = {
    {"AttributeTypes", SceneAPI_AttributeTypes_Static, 0}
    ,{"AttributeTypeNameForTypeId", SceneAPI_AttributeTypeNameForTypeId_Static_u32, 1}
    ,{"AttributeTypeIdForTypeName", SceneAPI_AttributeTypeIdForTypeName_Static_String, 1}
    ,{nullptr, nullptr, 0}
};

void Expose_SceneAPI(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, SceneAPI_StaticFunctions);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, SceneAPI_Functions);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, SceneAPI_ID);
}

}
