// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "Asset/IAssetTransfer.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Asset/AssetReference.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{

static const char* AssetReference_ID = "AssetReference";

static duk_ret_t AssetReference_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<AssetReference>(ctx, AssetReference_ID);
    return 0;
}


static const char* IAssetTransfer_ID = "IAssetTransfer";

static duk_ret_t IAssetTransfer_Set_asset(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    SharedPtr<IAsset> asset(GetWeakObject<IAsset>(ctx, 0));
    thisObj->asset = asset;
    return 0;
}

static duk_ret_t IAssetTransfer_Get_asset(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    PushWeakObject(ctx, thisObj->asset.Get());
    return 1;
}

static duk_ret_t IAssetTransfer_Set_source(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    AssetReference& source = *GetCheckedValueObject<AssetReference>(ctx, 0, AssetReference_ID);
    thisObj->source = source;
    return 0;
}

static duk_ret_t IAssetTransfer_Get_source(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    PushValueObject<AssetReference>(ctx, &thisObj->source, AssetReference_ID, nullptr, true);
    return 1;
}

static duk_ret_t IAssetTransfer_Set_assetType(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    String assetType = duk_require_string(ctx, 0);
    thisObj->assetType = assetType;
    return 0;
}

static duk_ret_t IAssetTransfer_Get_assetType(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    duk_push_string(ctx, thisObj->assetType.CString());
    return 1;
}

static duk_ret_t IAssetTransfer_Set_internalResourceName(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    String internalResourceName = duk_require_string(ctx, 0);
    thisObj->internalResourceName = internalResourceName;
    return 0;
}

static duk_ret_t IAssetTransfer_Get_internalResourceName(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    duk_push_string(ctx, thisObj->internalResourceName.CString());
    return 1;
}

const char* SignalWrapper_IAssetTransfer_Downloaded_ID = "SignalWrapper_IAssetTransfer_Downloaded";

class SignalWrapper_IAssetTransfer_Downloaded
{
public:
    SignalWrapper_IAssetTransfer_Downloaded(Object* owner, Signal1< IAssetTransfer * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< IAssetTransfer * >* signal_;
};

class SignalReceiver_IAssetTransfer_Downloaded : public SignalReceiver
{
public:
    void OnSignal(IAssetTransfer * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_IAssetTransfer_Downloaded_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_IAssetTransfer_Downloaded>(ctx, SignalWrapper_IAssetTransfer_Downloaded_ID);
    return 0;
}

static duk_ret_t SignalWrapper_IAssetTransfer_Downloaded_Connect(duk_context* ctx)
{
    SignalWrapper_IAssetTransfer_Downloaded* wrapper = GetThisValueObject<SignalWrapper_IAssetTransfer_Downloaded>(ctx, SignalWrapper_IAssetTransfer_Downloaded_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_IAssetTransfer_Downloaded* receiver = new SignalReceiver_IAssetTransfer_Downloaded();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_IAssetTransfer_Downloaded::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_IAssetTransfer_Downloaded_Disconnect(duk_context* ctx)
{
    SignalWrapper_IAssetTransfer_Downloaded* wrapper = GetThisValueObject<SignalWrapper_IAssetTransfer_Downloaded>(ctx, SignalWrapper_IAssetTransfer_Downloaded_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_IAssetTransfer_Downloaded_Emit(duk_context* ctx)
{
    SignalWrapper_IAssetTransfer_Downloaded* wrapper = GetThisValueObject<SignalWrapper_IAssetTransfer_Downloaded>(ctx, SignalWrapper_IAssetTransfer_Downloaded_ID);
    if (!wrapper->owner_) return 0;
    IAssetTransfer* param0 = GetWeakObject<IAssetTransfer>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t IAssetTransfer_Get_Downloaded(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    SignalWrapper_IAssetTransfer_Downloaded* wrapper = new SignalWrapper_IAssetTransfer_Downloaded(thisObj, &thisObj->Downloaded);
    PushValueObject(ctx, wrapper, SignalWrapper_IAssetTransfer_Downloaded_ID, SignalWrapper_IAssetTransfer_Downloaded_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_IAssetTransfer_Downloaded_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_IAssetTransfer_Downloaded_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_IAssetTransfer_Downloaded_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_IAssetTransfer_Downloaded_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_IAssetTransfer_Downloaded_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_IAssetTransfer_Succeeded_ID = "SignalWrapper_IAssetTransfer_Succeeded";

class SignalWrapper_IAssetTransfer_Succeeded
{
public:
    SignalWrapper_IAssetTransfer_Succeeded(Object* owner, Signal1< AssetPtr >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< AssetPtr >* signal_;
};

class SignalReceiver_IAssetTransfer_Succeeded : public SignalReceiver
{
public:
    void OnSignal(AssetPtr param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0.Get());
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_IAssetTransfer_Succeeded_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_IAssetTransfer_Succeeded>(ctx, SignalWrapper_IAssetTransfer_Succeeded_ID);
    return 0;
}

static duk_ret_t SignalWrapper_IAssetTransfer_Succeeded_Connect(duk_context* ctx)
{
    SignalWrapper_IAssetTransfer_Succeeded* wrapper = GetThisValueObject<SignalWrapper_IAssetTransfer_Succeeded>(ctx, SignalWrapper_IAssetTransfer_Succeeded_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_IAssetTransfer_Succeeded* receiver = new SignalReceiver_IAssetTransfer_Succeeded();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_IAssetTransfer_Succeeded::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_IAssetTransfer_Succeeded_Disconnect(duk_context* ctx)
{
    SignalWrapper_IAssetTransfer_Succeeded* wrapper = GetThisValueObject<SignalWrapper_IAssetTransfer_Succeeded>(ctx, SignalWrapper_IAssetTransfer_Succeeded_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_IAssetTransfer_Succeeded_Emit(duk_context* ctx)
{
    SignalWrapper_IAssetTransfer_Succeeded* wrapper = GetThisValueObject<SignalWrapper_IAssetTransfer_Succeeded>(ctx, SignalWrapper_IAssetTransfer_Succeeded_ID);
    if (!wrapper->owner_) return 0;
    SharedPtr<IAsset> param0(GetWeakObject<IAsset>(ctx, 0));
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t IAssetTransfer_Get_Succeeded(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    SignalWrapper_IAssetTransfer_Succeeded* wrapper = new SignalWrapper_IAssetTransfer_Succeeded(thisObj, &thisObj->Succeeded);
    PushValueObject(ctx, wrapper, SignalWrapper_IAssetTransfer_Succeeded_ID, SignalWrapper_IAssetTransfer_Succeeded_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_IAssetTransfer_Succeeded_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_IAssetTransfer_Succeeded_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_IAssetTransfer_Succeeded_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_IAssetTransfer_Succeeded_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_IAssetTransfer_Succeeded_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_IAssetTransfer_Failed_ID = "SignalWrapper_IAssetTransfer_Failed";

class SignalWrapper_IAssetTransfer_Failed
{
public:
    SignalWrapper_IAssetTransfer_Failed(Object* owner, Signal2< IAssetTransfer *, String >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal2< IAssetTransfer *, String >* signal_;
};

class SignalReceiver_IAssetTransfer_Failed : public SignalReceiver
{
public:
    void OnSignal(IAssetTransfer * param0, String param1)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        duk_push_string(ctx, param1.CString());
        duk_put_prop_index(ctx, -2, 1);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_IAssetTransfer_Failed_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_IAssetTransfer_Failed>(ctx, SignalWrapper_IAssetTransfer_Failed_ID);
    return 0;
}

static duk_ret_t SignalWrapper_IAssetTransfer_Failed_Connect(duk_context* ctx)
{
    SignalWrapper_IAssetTransfer_Failed* wrapper = GetThisValueObject<SignalWrapper_IAssetTransfer_Failed>(ctx, SignalWrapper_IAssetTransfer_Failed_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_IAssetTransfer_Failed* receiver = new SignalReceiver_IAssetTransfer_Failed();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_IAssetTransfer_Failed::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_IAssetTransfer_Failed_Disconnect(duk_context* ctx)
{
    SignalWrapper_IAssetTransfer_Failed* wrapper = GetThisValueObject<SignalWrapper_IAssetTransfer_Failed>(ctx, SignalWrapper_IAssetTransfer_Failed_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_IAssetTransfer_Failed_Emit(duk_context* ctx)
{
    SignalWrapper_IAssetTransfer_Failed* wrapper = GetThisValueObject<SignalWrapper_IAssetTransfer_Failed>(ctx, SignalWrapper_IAssetTransfer_Failed_ID);
    if (!wrapper->owner_) return 0;
    IAssetTransfer* param0 = GetWeakObject<IAssetTransfer>(ctx, 0);
    String param1 = duk_require_string(ctx, 1);
    wrapper->signal_->Emit(param0, param1);
    return 0;
}

static duk_ret_t IAssetTransfer_Get_Failed(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    SignalWrapper_IAssetTransfer_Failed* wrapper = new SignalWrapper_IAssetTransfer_Failed(thisObj, &thisObj->Failed);
    PushValueObject(ctx, wrapper, SignalWrapper_IAssetTransfer_Failed_ID, SignalWrapper_IAssetTransfer_Failed_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_IAssetTransfer_Failed_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_IAssetTransfer_Failed_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_IAssetTransfer_Failed_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_IAssetTransfer_Failed_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_IAssetTransfer_Failed_Emit, 2);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t IAssetTransfer_EmitAssetDownloaded(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    thisObj->EmitAssetDownloaded();
    return 0;
}

static duk_ret_t IAssetTransfer_EmitTransferSucceeded(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    thisObj->EmitTransferSucceeded();
    return 0;
}

static duk_ret_t IAssetTransfer_EmitAssetFailed_String(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    String reason = duk_require_string(ctx, 0);
    thisObj->EmitAssetFailed(reason);
    return 0;
}

static duk_ret_t IAssetTransfer_Abort(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    bool ret = thisObj->Abort();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t IAssetTransfer_SetCachingBehavior_bool_String(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    bool cachingAllowed = duk_require_boolean(ctx, 0);
    String diskSource = duk_require_string(ctx, 1);
    thisObj->SetCachingBehavior(cachingAllowed, diskSource);
    return 0;
}

static duk_ret_t IAssetTransfer_DiskSource(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    String ret = thisObj->DiskSource();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t IAssetTransfer_CachingAllowed(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    bool ret = thisObj->CachingAllowed();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t IAssetTransfer_SourceUrl(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    String ret = thisObj->SourceUrl();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t IAssetTransfer_AssetType(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    String ret = thisObj->AssetType();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t IAssetTransfer_Asset(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    AssetPtr ret = thisObj->Asset();
    PushWeakObject(ctx, ret.Get());
    return 1;
}

static duk_ret_t IAssetTransfer_EmitAssetDownloaded_IAssetTransfer(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    IAssetTransfer* transfer = GetWeakObject<IAssetTransfer>(ctx, 0);
    thisObj->EmitAssetDownloaded(transfer);
    return 0;
}

static duk_ret_t IAssetTransfer_EmitTransferSucceeded_AssetPtr(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    SharedPtr<IAsset> asset(GetWeakObject<IAsset>(ctx, 0));
    thisObj->EmitTransferSucceeded(asset);
    return 0;
}

static duk_ret_t IAssetTransfer_EmitAssetFailed_IAssetTransfer_String(duk_context* ctx)
{
    IAssetTransfer* thisObj = GetThisWeakObject<IAssetTransfer>(ctx);
    IAssetTransfer* transfer = GetWeakObject<IAssetTransfer>(ctx, 0);
    String reason = duk_require_string(ctx, 1);
    thisObj->EmitAssetFailed(transfer, reason);
    return 0;
}

static duk_ret_t IAssetTransfer_EmitAssetDownloaded_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1)
        return IAssetTransfer_EmitAssetDownloaded_IAssetTransfer(ctx);
    if (numArgs == 0)
        return IAssetTransfer_EmitAssetDownloaded(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t IAssetTransfer_EmitTransferSucceeded_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1)
        return IAssetTransfer_EmitTransferSucceeded_AssetPtr(ctx);
    if (numArgs == 0)
        return IAssetTransfer_EmitTransferSucceeded(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t IAssetTransfer_EmitAssetFailed_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_string(ctx, 1))
        return IAssetTransfer_EmitAssetFailed_IAssetTransfer_String(ctx);
    if (numArgs == 1 && duk_is_string(ctx, 0))
        return IAssetTransfer_EmitAssetFailed_String(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static const duk_function_list_entry IAssetTransfer_Functions[] = {
    {"EmitAssetDownloaded", IAssetTransfer_EmitAssetDownloaded_Selector, DUK_VARARGS}
    ,{"EmitTransferSucceeded", IAssetTransfer_EmitTransferSucceeded_Selector, DUK_VARARGS}
    ,{"EmitAssetFailed", IAssetTransfer_EmitAssetFailed_Selector, DUK_VARARGS}
    ,{"Abort", IAssetTransfer_Abort, 0}
    ,{"SetCachingBehavior", IAssetTransfer_SetCachingBehavior_bool_String, 2}
    ,{"DiskSource", IAssetTransfer_DiskSource, 0}
    ,{"CachingAllowed", IAssetTransfer_CachingAllowed, 0}
    ,{"SourceUrl", IAssetTransfer_SourceUrl, 0}
    ,{"AssetType", IAssetTransfer_AssetType, 0}
    ,{"Asset", IAssetTransfer_Asset, 0}
    ,{nullptr, nullptr, 0}
};

void Expose_IAssetTransfer(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, IAssetTransfer_Functions);
    DefineProperty(ctx, "asset", IAssetTransfer_Get_asset, IAssetTransfer_Set_asset);
    DefineProperty(ctx, "source", IAssetTransfer_Get_source, IAssetTransfer_Set_source);
    DefineProperty(ctx, "assetType", IAssetTransfer_Get_assetType, IAssetTransfer_Set_assetType);
    DefineProperty(ctx, "internalResourceName", IAssetTransfer_Get_internalResourceName, IAssetTransfer_Set_internalResourceName);
    DefineProperty(ctx, "Downloaded", IAssetTransfer_Get_Downloaded, nullptr);
    DefineProperty(ctx, "Succeeded", IAssetTransfer_Get_Succeeded, nullptr);
    DefineProperty(ctx, "Failed", IAssetTransfer_Get_Failed, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, IAssetTransfer_ID);
}

}
