// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "Scene/EntityAction.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif



using namespace Tundra;
using namespace std;

namespace JSBindings
{



const char* EntityAction_ID = "EntityAction";

const char* SignalWrapper_EntityAction_Triggered_ID = "SignalWrapper_EntityAction_Triggered";

class SignalWrapper_EntityAction_Triggered
{
public:
    SignalWrapper_EntityAction_Triggered(Object* owner, Signal1< const StringVector & >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< const StringVector & >* signal_;
};

class SignalReceiver_EntityAction_Triggered : public SignalReceiver
{
public:
    void OnSignal(const StringVector & param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushStringVector(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

duk_ret_t SignalWrapper_EntityAction_Triggered_Finalizer(duk_context* ctx)
{
    SignalWrapper_EntityAction_Triggered* obj = GetValueObject<SignalWrapper_EntityAction_Triggered>(ctx, 0, SignalWrapper_EntityAction_Triggered_ID);
    if (obj)
    {
        delete obj;
        SetValueObject(ctx, 0, 0, SignalWrapper_EntityAction_Triggered_ID);
    }
    return 0;
}

static duk_ret_t SignalWrapper_EntityAction_Triggered_Connect(duk_context* ctx)
{
    SignalWrapper_EntityAction_Triggered* wrapper = GetThisValueObject<SignalWrapper_EntityAction_Triggered>(ctx, SignalWrapper_EntityAction_Triggered_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_EntityAction_Triggered* receiver = new SignalReceiver_EntityAction_Triggered();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_EntityAction_Triggered::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    int numArgs = duk_get_top(ctx);
    duk_push_number(ctx, (size_t)wrapper->signal_);
    duk_insert(ctx, 0);
    duk_push_global_object(ctx);
    duk_get_prop_string(ctx, -1, "_ConnectSignal");
    duk_remove(ctx, -2);
    duk_insert(ctx, 0);
    duk_pcall(ctx, numArgs + 1);
    duk_pop(ctx);
    return 0;
}

static duk_ret_t SignalWrapper_EntityAction_Triggered_Disconnect(duk_context* ctx)
{
    SignalWrapper_EntityAction_Triggered* wrapper = GetThisValueObject<SignalWrapper_EntityAction_Triggered>(ctx, SignalWrapper_EntityAction_Triggered_ID);
    if (!wrapper->owner_) return 0;
    int numArgs = duk_get_top(ctx);
    duk_push_number(ctx, (size_t)wrapper->signal_);
    duk_insert(ctx, 0);
    duk_push_global_object(ctx);
    duk_get_prop_string(ctx, -1, "_DisconnectSignal");
    duk_remove(ctx, -2);
    duk_insert(ctx, 0);
    duk_pcall(ctx, numArgs + 1);
    if (duk_get_boolean(ctx, -1))
    {
        HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
        signalReceivers.Erase(wrapper->signal_);
    }
    duk_pop(ctx);
    return 0;
}

static duk_ret_t SignalWrapper_EntityAction_Triggered_Emit(duk_context* ctx)
{
    SignalWrapper_EntityAction_Triggered* wrapper = GetThisValueObject<SignalWrapper_EntityAction_Triggered>(ctx, SignalWrapper_EntityAction_Triggered_ID);
    if (!wrapper->owner_) return 0;
    StringVector param0 = GetStringVector(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t EntityAction_Get_Triggered(duk_context* ctx)
{
    EntityAction* thisObj = GetThisWeakObject<EntityAction>(ctx);
    SignalWrapper_EntityAction_Triggered* wrapper = new SignalWrapper_EntityAction_Triggered(thisObj, &thisObj->Triggered);
    PushValueObject(ctx, wrapper, SignalWrapper_EntityAction_Triggered_ID, SignalWrapper_EntityAction_Triggered_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_EntityAction_Triggered_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_EntityAction_Triggered_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_EntityAction_Triggered_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t EntityAction_Name(duk_context* ctx)
{
    EntityAction* thisObj = GetThisWeakObject<EntityAction>(ctx);
    const String & ret = thisObj->Name();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static const duk_function_list_entry EntityAction_Functions[] = {
    {"Name", EntityAction_Name, 0}
    ,{nullptr, nullptr, 0}
};

void Expose_EntityAction(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_number(ctx, 0);
    duk_put_prop_string(ctx, -2, "Invalid");
    duk_push_number(ctx, 1);
    duk_put_prop_string(ctx, -2, "Local");
    duk_push_number(ctx, 2);
    duk_put_prop_string(ctx, -2, "Server");
    duk_push_number(ctx, 4);
    duk_put_prop_string(ctx, -2, "Peers");
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, EntityAction_Functions);
    DefineProperty(ctx, "triggered", EntityAction_Get_Triggered, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, EntityAction_ID);
}

}
