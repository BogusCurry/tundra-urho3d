// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "Input/InputContext.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Input/MouseEvent.h"
#include "Input/KeyEvent.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{



static const char* InputContext_ID = "InputContext";

const char* SignalWrapper_InputContext_KeyEventReceived_ID = "SignalWrapper_InputContext_KeyEventReceived";

class SignalWrapper_InputContext_KeyEventReceived
{
public:
    SignalWrapper_InputContext_KeyEventReceived(Object* owner, Signal1< KeyEvent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< KeyEvent * >* signal_;
};

class SignalReceiver_InputContext_KeyEventReceived : public SignalReceiver
{
public:
    void OnSignal(KeyEvent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_InputContext_KeyEventReceived_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_InputContext_KeyEventReceived>(ctx, SignalWrapper_InputContext_KeyEventReceived_ID);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_KeyEventReceived_Connect(duk_context* ctx)
{
    SignalWrapper_InputContext_KeyEventReceived* wrapper = GetThisValueObject<SignalWrapper_InputContext_KeyEventReceived>(ctx, SignalWrapper_InputContext_KeyEventReceived_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_InputContext_KeyEventReceived* receiver = new SignalReceiver_InputContext_KeyEventReceived();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_InputContext_KeyEventReceived::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_KeyEventReceived_Disconnect(duk_context* ctx)
{
    SignalWrapper_InputContext_KeyEventReceived* wrapper = GetThisValueObject<SignalWrapper_InputContext_KeyEventReceived>(ctx, SignalWrapper_InputContext_KeyEventReceived_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_KeyEventReceived_Emit(duk_context* ctx)
{
    SignalWrapper_InputContext_KeyEventReceived* wrapper = GetThisValueObject<SignalWrapper_InputContext_KeyEventReceived>(ctx, SignalWrapper_InputContext_KeyEventReceived_ID);
    if (!wrapper->owner_) return 0;
    KeyEvent* param0 = GetWeakObject<KeyEvent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t InputContext_Get_KeyEventReceived(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    SignalWrapper_InputContext_KeyEventReceived* wrapper = new SignalWrapper_InputContext_KeyEventReceived(thisObj, &thisObj->KeyEventReceived);
    PushValueObject(ctx, wrapper, SignalWrapper_InputContext_KeyEventReceived_ID, SignalWrapper_InputContext_KeyEventReceived_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyEventReceived_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyEventReceived_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyEventReceived_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyEventReceived_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyEventReceived_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_InputContext_MouseEventReceived_ID = "SignalWrapper_InputContext_MouseEventReceived";

class SignalWrapper_InputContext_MouseEventReceived
{
public:
    SignalWrapper_InputContext_MouseEventReceived(Object* owner, Signal1< MouseEvent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< MouseEvent * >* signal_;
};

class SignalReceiver_InputContext_MouseEventReceived : public SignalReceiver
{
public:
    void OnSignal(MouseEvent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_InputContext_MouseEventReceived_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_InputContext_MouseEventReceived>(ctx, SignalWrapper_InputContext_MouseEventReceived_ID);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseEventReceived_Connect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseEventReceived* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseEventReceived>(ctx, SignalWrapper_InputContext_MouseEventReceived_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_InputContext_MouseEventReceived* receiver = new SignalReceiver_InputContext_MouseEventReceived();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_InputContext_MouseEventReceived::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseEventReceived_Disconnect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseEventReceived* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseEventReceived>(ctx, SignalWrapper_InputContext_MouseEventReceived_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseEventReceived_Emit(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseEventReceived* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseEventReceived>(ctx, SignalWrapper_InputContext_MouseEventReceived_ID);
    if (!wrapper->owner_) return 0;
    MouseEvent* param0 = GetWeakObject<MouseEvent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t InputContext_Get_MouseEventReceived(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    SignalWrapper_InputContext_MouseEventReceived* wrapper = new SignalWrapper_InputContext_MouseEventReceived(thisObj, &thisObj->MouseEventReceived);
    PushValueObject(ctx, wrapper, SignalWrapper_InputContext_MouseEventReceived_ID, SignalWrapper_InputContext_MouseEventReceived_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseEventReceived_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseEventReceived_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseEventReceived_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseEventReceived_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseEventReceived_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_InputContext_KeyPressed_ID = "SignalWrapper_InputContext_KeyPressed";

class SignalWrapper_InputContext_KeyPressed
{
public:
    SignalWrapper_InputContext_KeyPressed(Object* owner, Signal1< KeyEvent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< KeyEvent * >* signal_;
};

class SignalReceiver_InputContext_KeyPressed : public SignalReceiver
{
public:
    void OnSignal(KeyEvent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_InputContext_KeyPressed_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_InputContext_KeyPressed>(ctx, SignalWrapper_InputContext_KeyPressed_ID);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_KeyPressed_Connect(duk_context* ctx)
{
    SignalWrapper_InputContext_KeyPressed* wrapper = GetThisValueObject<SignalWrapper_InputContext_KeyPressed>(ctx, SignalWrapper_InputContext_KeyPressed_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_InputContext_KeyPressed* receiver = new SignalReceiver_InputContext_KeyPressed();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_InputContext_KeyPressed::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_KeyPressed_Disconnect(duk_context* ctx)
{
    SignalWrapper_InputContext_KeyPressed* wrapper = GetThisValueObject<SignalWrapper_InputContext_KeyPressed>(ctx, SignalWrapper_InputContext_KeyPressed_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_KeyPressed_Emit(duk_context* ctx)
{
    SignalWrapper_InputContext_KeyPressed* wrapper = GetThisValueObject<SignalWrapper_InputContext_KeyPressed>(ctx, SignalWrapper_InputContext_KeyPressed_ID);
    if (!wrapper->owner_) return 0;
    KeyEvent* param0 = GetWeakObject<KeyEvent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t InputContext_Get_KeyPressed(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    SignalWrapper_InputContext_KeyPressed* wrapper = new SignalWrapper_InputContext_KeyPressed(thisObj, &thisObj->KeyPressed);
    PushValueObject(ctx, wrapper, SignalWrapper_InputContext_KeyPressed_ID, SignalWrapper_InputContext_KeyPressed_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyPressed_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyPressed_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyPressed_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyPressed_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyPressed_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_InputContext_KeyDown_ID = "SignalWrapper_InputContext_KeyDown";

class SignalWrapper_InputContext_KeyDown
{
public:
    SignalWrapper_InputContext_KeyDown(Object* owner, Signal1< KeyEvent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< KeyEvent * >* signal_;
};

class SignalReceiver_InputContext_KeyDown : public SignalReceiver
{
public:
    void OnSignal(KeyEvent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_InputContext_KeyDown_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_InputContext_KeyDown>(ctx, SignalWrapper_InputContext_KeyDown_ID);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_KeyDown_Connect(duk_context* ctx)
{
    SignalWrapper_InputContext_KeyDown* wrapper = GetThisValueObject<SignalWrapper_InputContext_KeyDown>(ctx, SignalWrapper_InputContext_KeyDown_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_InputContext_KeyDown* receiver = new SignalReceiver_InputContext_KeyDown();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_InputContext_KeyDown::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_KeyDown_Disconnect(duk_context* ctx)
{
    SignalWrapper_InputContext_KeyDown* wrapper = GetThisValueObject<SignalWrapper_InputContext_KeyDown>(ctx, SignalWrapper_InputContext_KeyDown_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_KeyDown_Emit(duk_context* ctx)
{
    SignalWrapper_InputContext_KeyDown* wrapper = GetThisValueObject<SignalWrapper_InputContext_KeyDown>(ctx, SignalWrapper_InputContext_KeyDown_ID);
    if (!wrapper->owner_) return 0;
    KeyEvent* param0 = GetWeakObject<KeyEvent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t InputContext_Get_KeyDown(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    SignalWrapper_InputContext_KeyDown* wrapper = new SignalWrapper_InputContext_KeyDown(thisObj, &thisObj->KeyDown);
    PushValueObject(ctx, wrapper, SignalWrapper_InputContext_KeyDown_ID, SignalWrapper_InputContext_KeyDown_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyDown_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyDown_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyDown_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyDown_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyDown_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_InputContext_KeyReleased_ID = "SignalWrapper_InputContext_KeyReleased";

class SignalWrapper_InputContext_KeyReleased
{
public:
    SignalWrapper_InputContext_KeyReleased(Object* owner, Signal1< KeyEvent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< KeyEvent * >* signal_;
};

class SignalReceiver_InputContext_KeyReleased : public SignalReceiver
{
public:
    void OnSignal(KeyEvent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_InputContext_KeyReleased_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_InputContext_KeyReleased>(ctx, SignalWrapper_InputContext_KeyReleased_ID);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_KeyReleased_Connect(duk_context* ctx)
{
    SignalWrapper_InputContext_KeyReleased* wrapper = GetThisValueObject<SignalWrapper_InputContext_KeyReleased>(ctx, SignalWrapper_InputContext_KeyReleased_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_InputContext_KeyReleased* receiver = new SignalReceiver_InputContext_KeyReleased();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_InputContext_KeyReleased::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_KeyReleased_Disconnect(duk_context* ctx)
{
    SignalWrapper_InputContext_KeyReleased* wrapper = GetThisValueObject<SignalWrapper_InputContext_KeyReleased>(ctx, SignalWrapper_InputContext_KeyReleased_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_KeyReleased_Emit(duk_context* ctx)
{
    SignalWrapper_InputContext_KeyReleased* wrapper = GetThisValueObject<SignalWrapper_InputContext_KeyReleased>(ctx, SignalWrapper_InputContext_KeyReleased_ID);
    if (!wrapper->owner_) return 0;
    KeyEvent* param0 = GetWeakObject<KeyEvent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t InputContext_Get_KeyReleased(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    SignalWrapper_InputContext_KeyReleased* wrapper = new SignalWrapper_InputContext_KeyReleased(thisObj, &thisObj->KeyReleased);
    PushValueObject(ctx, wrapper, SignalWrapper_InputContext_KeyReleased_ID, SignalWrapper_InputContext_KeyReleased_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyReleased_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyReleased_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyReleased_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyReleased_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_KeyReleased_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_InputContext_MouseMove_ID = "SignalWrapper_InputContext_MouseMove";

class SignalWrapper_InputContext_MouseMove
{
public:
    SignalWrapper_InputContext_MouseMove(Object* owner, Signal1< MouseEvent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< MouseEvent * >* signal_;
};

class SignalReceiver_InputContext_MouseMove : public SignalReceiver
{
public:
    void OnSignal(MouseEvent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_InputContext_MouseMove_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_InputContext_MouseMove>(ctx, SignalWrapper_InputContext_MouseMove_ID);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseMove_Connect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseMove* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseMove>(ctx, SignalWrapper_InputContext_MouseMove_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_InputContext_MouseMove* receiver = new SignalReceiver_InputContext_MouseMove();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_InputContext_MouseMove::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseMove_Disconnect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseMove* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseMove>(ctx, SignalWrapper_InputContext_MouseMove_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseMove_Emit(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseMove* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseMove>(ctx, SignalWrapper_InputContext_MouseMove_ID);
    if (!wrapper->owner_) return 0;
    MouseEvent* param0 = GetWeakObject<MouseEvent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t InputContext_Get_MouseMove(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    SignalWrapper_InputContext_MouseMove* wrapper = new SignalWrapper_InputContext_MouseMove(thisObj, &thisObj->MouseMove);
    PushValueObject(ctx, wrapper, SignalWrapper_InputContext_MouseMove_ID, SignalWrapper_InputContext_MouseMove_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseMove_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseMove_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseMove_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseMove_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseMove_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_InputContext_MouseScroll_ID = "SignalWrapper_InputContext_MouseScroll";

class SignalWrapper_InputContext_MouseScroll
{
public:
    SignalWrapper_InputContext_MouseScroll(Object* owner, Signal1< MouseEvent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< MouseEvent * >* signal_;
};

class SignalReceiver_InputContext_MouseScroll : public SignalReceiver
{
public:
    void OnSignal(MouseEvent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_InputContext_MouseScroll_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_InputContext_MouseScroll>(ctx, SignalWrapper_InputContext_MouseScroll_ID);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseScroll_Connect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseScroll* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseScroll>(ctx, SignalWrapper_InputContext_MouseScroll_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_InputContext_MouseScroll* receiver = new SignalReceiver_InputContext_MouseScroll();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_InputContext_MouseScroll::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseScroll_Disconnect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseScroll* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseScroll>(ctx, SignalWrapper_InputContext_MouseScroll_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseScroll_Emit(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseScroll* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseScroll>(ctx, SignalWrapper_InputContext_MouseScroll_ID);
    if (!wrapper->owner_) return 0;
    MouseEvent* param0 = GetWeakObject<MouseEvent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t InputContext_Get_MouseScroll(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    SignalWrapper_InputContext_MouseScroll* wrapper = new SignalWrapper_InputContext_MouseScroll(thisObj, &thisObj->MouseScroll);
    PushValueObject(ctx, wrapper, SignalWrapper_InputContext_MouseScroll_ID, SignalWrapper_InputContext_MouseScroll_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseScroll_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseScroll_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseScroll_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseScroll_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseScroll_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_InputContext_MouseDoubleClicked_ID = "SignalWrapper_InputContext_MouseDoubleClicked";

class SignalWrapper_InputContext_MouseDoubleClicked
{
public:
    SignalWrapper_InputContext_MouseDoubleClicked(Object* owner, Signal1< MouseEvent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< MouseEvent * >* signal_;
};

class SignalReceiver_InputContext_MouseDoubleClicked : public SignalReceiver
{
public:
    void OnSignal(MouseEvent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_InputContext_MouseDoubleClicked_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_InputContext_MouseDoubleClicked>(ctx, SignalWrapper_InputContext_MouseDoubleClicked_ID);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseDoubleClicked_Connect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseDoubleClicked* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseDoubleClicked>(ctx, SignalWrapper_InputContext_MouseDoubleClicked_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_InputContext_MouseDoubleClicked* receiver = new SignalReceiver_InputContext_MouseDoubleClicked();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_InputContext_MouseDoubleClicked::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseDoubleClicked_Disconnect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseDoubleClicked* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseDoubleClicked>(ctx, SignalWrapper_InputContext_MouseDoubleClicked_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseDoubleClicked_Emit(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseDoubleClicked* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseDoubleClicked>(ctx, SignalWrapper_InputContext_MouseDoubleClicked_ID);
    if (!wrapper->owner_) return 0;
    MouseEvent* param0 = GetWeakObject<MouseEvent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t InputContext_Get_MouseDoubleClicked(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    SignalWrapper_InputContext_MouseDoubleClicked* wrapper = new SignalWrapper_InputContext_MouseDoubleClicked(thisObj, &thisObj->MouseDoubleClicked);
    PushValueObject(ctx, wrapper, SignalWrapper_InputContext_MouseDoubleClicked_ID, SignalWrapper_InputContext_MouseDoubleClicked_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseDoubleClicked_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseDoubleClicked_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseDoubleClicked_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseDoubleClicked_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseDoubleClicked_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_InputContext_MouseLeftPressed_ID = "SignalWrapper_InputContext_MouseLeftPressed";

class SignalWrapper_InputContext_MouseLeftPressed
{
public:
    SignalWrapper_InputContext_MouseLeftPressed(Object* owner, Signal1< MouseEvent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< MouseEvent * >* signal_;
};

class SignalReceiver_InputContext_MouseLeftPressed : public SignalReceiver
{
public:
    void OnSignal(MouseEvent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_InputContext_MouseLeftPressed_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_InputContext_MouseLeftPressed>(ctx, SignalWrapper_InputContext_MouseLeftPressed_ID);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseLeftPressed_Connect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseLeftPressed* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseLeftPressed>(ctx, SignalWrapper_InputContext_MouseLeftPressed_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_InputContext_MouseLeftPressed* receiver = new SignalReceiver_InputContext_MouseLeftPressed();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_InputContext_MouseLeftPressed::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseLeftPressed_Disconnect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseLeftPressed* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseLeftPressed>(ctx, SignalWrapper_InputContext_MouseLeftPressed_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseLeftPressed_Emit(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseLeftPressed* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseLeftPressed>(ctx, SignalWrapper_InputContext_MouseLeftPressed_ID);
    if (!wrapper->owner_) return 0;
    MouseEvent* param0 = GetWeakObject<MouseEvent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t InputContext_Get_MouseLeftPressed(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    SignalWrapper_InputContext_MouseLeftPressed* wrapper = new SignalWrapper_InputContext_MouseLeftPressed(thisObj, &thisObj->MouseLeftPressed);
    PushValueObject(ctx, wrapper, SignalWrapper_InputContext_MouseLeftPressed_ID, SignalWrapper_InputContext_MouseLeftPressed_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseLeftPressed_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseLeftPressed_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseLeftPressed_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseLeftPressed_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseLeftPressed_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_InputContext_MouseMiddlePressed_ID = "SignalWrapper_InputContext_MouseMiddlePressed";

class SignalWrapper_InputContext_MouseMiddlePressed
{
public:
    SignalWrapper_InputContext_MouseMiddlePressed(Object* owner, Signal1< MouseEvent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< MouseEvent * >* signal_;
};

class SignalReceiver_InputContext_MouseMiddlePressed : public SignalReceiver
{
public:
    void OnSignal(MouseEvent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_InputContext_MouseMiddlePressed_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_InputContext_MouseMiddlePressed>(ctx, SignalWrapper_InputContext_MouseMiddlePressed_ID);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseMiddlePressed_Connect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseMiddlePressed* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseMiddlePressed>(ctx, SignalWrapper_InputContext_MouseMiddlePressed_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_InputContext_MouseMiddlePressed* receiver = new SignalReceiver_InputContext_MouseMiddlePressed();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_InputContext_MouseMiddlePressed::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseMiddlePressed_Disconnect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseMiddlePressed* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseMiddlePressed>(ctx, SignalWrapper_InputContext_MouseMiddlePressed_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseMiddlePressed_Emit(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseMiddlePressed* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseMiddlePressed>(ctx, SignalWrapper_InputContext_MouseMiddlePressed_ID);
    if (!wrapper->owner_) return 0;
    MouseEvent* param0 = GetWeakObject<MouseEvent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t InputContext_Get_MouseMiddlePressed(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    SignalWrapper_InputContext_MouseMiddlePressed* wrapper = new SignalWrapper_InputContext_MouseMiddlePressed(thisObj, &thisObj->MouseMiddlePressed);
    PushValueObject(ctx, wrapper, SignalWrapper_InputContext_MouseMiddlePressed_ID, SignalWrapper_InputContext_MouseMiddlePressed_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseMiddlePressed_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseMiddlePressed_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseMiddlePressed_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseMiddlePressed_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseMiddlePressed_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_InputContext_MouseRightPressed_ID = "SignalWrapper_InputContext_MouseRightPressed";

class SignalWrapper_InputContext_MouseRightPressed
{
public:
    SignalWrapper_InputContext_MouseRightPressed(Object* owner, Signal1< MouseEvent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< MouseEvent * >* signal_;
};

class SignalReceiver_InputContext_MouseRightPressed : public SignalReceiver
{
public:
    void OnSignal(MouseEvent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_InputContext_MouseRightPressed_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_InputContext_MouseRightPressed>(ctx, SignalWrapper_InputContext_MouseRightPressed_ID);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseRightPressed_Connect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseRightPressed* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseRightPressed>(ctx, SignalWrapper_InputContext_MouseRightPressed_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_InputContext_MouseRightPressed* receiver = new SignalReceiver_InputContext_MouseRightPressed();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_InputContext_MouseRightPressed::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseRightPressed_Disconnect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseRightPressed* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseRightPressed>(ctx, SignalWrapper_InputContext_MouseRightPressed_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseRightPressed_Emit(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseRightPressed* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseRightPressed>(ctx, SignalWrapper_InputContext_MouseRightPressed_ID);
    if (!wrapper->owner_) return 0;
    MouseEvent* param0 = GetWeakObject<MouseEvent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t InputContext_Get_MouseRightPressed(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    SignalWrapper_InputContext_MouseRightPressed* wrapper = new SignalWrapper_InputContext_MouseRightPressed(thisObj, &thisObj->MouseRightPressed);
    PushValueObject(ctx, wrapper, SignalWrapper_InputContext_MouseRightPressed_ID, SignalWrapper_InputContext_MouseRightPressed_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseRightPressed_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseRightPressed_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseRightPressed_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseRightPressed_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseRightPressed_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_InputContext_MouseLeftReleased_ID = "SignalWrapper_InputContext_MouseLeftReleased";

class SignalWrapper_InputContext_MouseLeftReleased
{
public:
    SignalWrapper_InputContext_MouseLeftReleased(Object* owner, Signal1< MouseEvent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< MouseEvent * >* signal_;
};

class SignalReceiver_InputContext_MouseLeftReleased : public SignalReceiver
{
public:
    void OnSignal(MouseEvent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_InputContext_MouseLeftReleased_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_InputContext_MouseLeftReleased>(ctx, SignalWrapper_InputContext_MouseLeftReleased_ID);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseLeftReleased_Connect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseLeftReleased* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseLeftReleased>(ctx, SignalWrapper_InputContext_MouseLeftReleased_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_InputContext_MouseLeftReleased* receiver = new SignalReceiver_InputContext_MouseLeftReleased();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_InputContext_MouseLeftReleased::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseLeftReleased_Disconnect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseLeftReleased* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseLeftReleased>(ctx, SignalWrapper_InputContext_MouseLeftReleased_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseLeftReleased_Emit(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseLeftReleased* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseLeftReleased>(ctx, SignalWrapper_InputContext_MouseLeftReleased_ID);
    if (!wrapper->owner_) return 0;
    MouseEvent* param0 = GetWeakObject<MouseEvent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t InputContext_Get_MouseLeftReleased(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    SignalWrapper_InputContext_MouseLeftReleased* wrapper = new SignalWrapper_InputContext_MouseLeftReleased(thisObj, &thisObj->MouseLeftReleased);
    PushValueObject(ctx, wrapper, SignalWrapper_InputContext_MouseLeftReleased_ID, SignalWrapper_InputContext_MouseLeftReleased_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseLeftReleased_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseLeftReleased_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseLeftReleased_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseLeftReleased_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseLeftReleased_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_InputContext_MouseMiddleReleased_ID = "SignalWrapper_InputContext_MouseMiddleReleased";

class SignalWrapper_InputContext_MouseMiddleReleased
{
public:
    SignalWrapper_InputContext_MouseMiddleReleased(Object* owner, Signal1< MouseEvent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< MouseEvent * >* signal_;
};

class SignalReceiver_InputContext_MouseMiddleReleased : public SignalReceiver
{
public:
    void OnSignal(MouseEvent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_InputContext_MouseMiddleReleased_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_InputContext_MouseMiddleReleased>(ctx, SignalWrapper_InputContext_MouseMiddleReleased_ID);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseMiddleReleased_Connect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseMiddleReleased* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseMiddleReleased>(ctx, SignalWrapper_InputContext_MouseMiddleReleased_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_InputContext_MouseMiddleReleased* receiver = new SignalReceiver_InputContext_MouseMiddleReleased();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_InputContext_MouseMiddleReleased::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseMiddleReleased_Disconnect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseMiddleReleased* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseMiddleReleased>(ctx, SignalWrapper_InputContext_MouseMiddleReleased_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseMiddleReleased_Emit(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseMiddleReleased* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseMiddleReleased>(ctx, SignalWrapper_InputContext_MouseMiddleReleased_ID);
    if (!wrapper->owner_) return 0;
    MouseEvent* param0 = GetWeakObject<MouseEvent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t InputContext_Get_MouseMiddleReleased(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    SignalWrapper_InputContext_MouseMiddleReleased* wrapper = new SignalWrapper_InputContext_MouseMiddleReleased(thisObj, &thisObj->MouseMiddleReleased);
    PushValueObject(ctx, wrapper, SignalWrapper_InputContext_MouseMiddleReleased_ID, SignalWrapper_InputContext_MouseMiddleReleased_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseMiddleReleased_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseMiddleReleased_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseMiddleReleased_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseMiddleReleased_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseMiddleReleased_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_InputContext_MouseRightReleased_ID = "SignalWrapper_InputContext_MouseRightReleased";

class SignalWrapper_InputContext_MouseRightReleased
{
public:
    SignalWrapper_InputContext_MouseRightReleased(Object* owner, Signal1< MouseEvent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< MouseEvent * >* signal_;
};

class SignalReceiver_InputContext_MouseRightReleased : public SignalReceiver
{
public:
    void OnSignal(MouseEvent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_InputContext_MouseRightReleased_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_InputContext_MouseRightReleased>(ctx, SignalWrapper_InputContext_MouseRightReleased_ID);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseRightReleased_Connect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseRightReleased* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseRightReleased>(ctx, SignalWrapper_InputContext_MouseRightReleased_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_InputContext_MouseRightReleased* receiver = new SignalReceiver_InputContext_MouseRightReleased();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_InputContext_MouseRightReleased::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseRightReleased_Disconnect(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseRightReleased* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseRightReleased>(ctx, SignalWrapper_InputContext_MouseRightReleased_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_InputContext_MouseRightReleased_Emit(duk_context* ctx)
{
    SignalWrapper_InputContext_MouseRightReleased* wrapper = GetThisValueObject<SignalWrapper_InputContext_MouseRightReleased>(ctx, SignalWrapper_InputContext_MouseRightReleased_ID);
    if (!wrapper->owner_) return 0;
    MouseEvent* param0 = GetWeakObject<MouseEvent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t InputContext_Get_MouseRightReleased(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    SignalWrapper_InputContext_MouseRightReleased* wrapper = new SignalWrapper_InputContext_MouseRightReleased(thisObj, &thisObj->MouseRightReleased);
    PushValueObject(ctx, wrapper, SignalWrapper_InputContext_MouseRightReleased_ID, SignalWrapper_InputContext_MouseRightReleased_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseRightReleased_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseRightReleased_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseRightReleased_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseRightReleased_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_InputContext_MouseRightReleased_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t InputContext_UnregisterKeyEvent_int(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    int keySequence = (int)duk_require_number(ctx, 0);
    thisObj->UnregisterKeyEvent(keySequence);
    return 0;
}

static duk_ret_t InputContext_Name(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    String ret = thisObj->Name();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t InputContext_SetName_String(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    String name_ = duk_require_string(ctx, 0);
    thisObj->SetName(name_);
    return 0;
}

static duk_ret_t InputContext_SetPriority_int(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    int newPriority = (int)duk_require_number(ctx, 0);
    thisObj->SetPriority(newPriority);
    return 0;
}

static duk_ret_t InputContext_KeyPressedCount_int(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    int keyCode = (int)duk_require_number(ctx, 0);
    int ret = thisObj->KeyPressedCount(keyCode);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t InputContext_IsKeyPressed_int(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    int keyCode = (int)duk_require_number(ctx, 0);
    bool ret = thisObj->IsKeyPressed(keyCode);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t InputContext_IsKeyDown_int(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    int keyCode = (int)duk_require_number(ctx, 0);
    bool ret = thisObj->IsKeyDown(keyCode);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t InputContext_IsKeyReleased_int(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    int keyCode = (int)duk_require_number(ctx, 0);
    bool ret = thisObj->IsKeyReleased(keyCode);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t InputContext_TriggerKeyReleaseEvent_int(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    int keyCode = (int)duk_require_number(ctx, 0);
    thisObj->TriggerKeyReleaseEvent(keyCode);
    return 0;
}

static duk_ret_t InputContext_SetKeySuppressed_int_bool(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    int keyCode = (int)duk_require_number(ctx, 0);
    bool isSuppressed = duk_require_boolean(ctx, 1);
    thisObj->SetKeySuppressed(keyCode, isSuppressed);
    return 0;
}

static duk_ret_t InputContext_ReleaseAllKeys(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    thisObj->ReleaseAllKeys();
    return 0;
}

static duk_ret_t InputContext_IsMouseButtonDown_int(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    int mouseButton = (int)duk_require_number(ctx, 0);
    bool ret = thisObj->IsMouseButtonDown(mouseButton);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t InputContext_IsMouseButtonPressed_int(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    int mouseButton = (int)duk_require_number(ctx, 0);
    bool ret = thisObj->IsMouseButtonPressed(mouseButton);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t InputContext_IsMouseButtonReleased_int(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    int mouseButton = (int)duk_require_number(ctx, 0);
    bool ret = thisObj->IsMouseButtonReleased(mouseButton);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t InputContext_GetNumTouches(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    unsigned ret = thisObj->GetNumTouches();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t InputContext_Priority(duk_context* ctx)
{
    InputContext* thisObj = GetThisWeakObject<InputContext>(ctx);
    int ret = thisObj->Priority();
    duk_push_number(ctx, ret);
    return 1;
}

static const duk_function_list_entry InputContext_Functions[] = {
    {"UnregisterKeyEvent", InputContext_UnregisterKeyEvent_int, 1}
    ,{"Name", InputContext_Name, 0}
    ,{"SetName", InputContext_SetName_String, 1}
    ,{"SetPriority", InputContext_SetPriority_int, 1}
    ,{"KeyPressedCount", InputContext_KeyPressedCount_int, 1}
    ,{"IsKeyPressed", InputContext_IsKeyPressed_int, 1}
    ,{"IsKeyDown", InputContext_IsKeyDown_int, 1}
    ,{"IsKeyReleased", InputContext_IsKeyReleased_int, 1}
    ,{"TriggerKeyReleaseEvent", InputContext_TriggerKeyReleaseEvent_int, 1}
    ,{"SetKeySuppressed", InputContext_SetKeySuppressed_int_bool, 2}
    ,{"ReleaseAllKeys", InputContext_ReleaseAllKeys, 0}
    ,{"IsMouseButtonDown", InputContext_IsMouseButtonDown_int, 1}
    ,{"IsMouseButtonPressed", InputContext_IsMouseButtonPressed_int, 1}
    ,{"IsMouseButtonReleased", InputContext_IsMouseButtonReleased_int, 1}
    ,{"GetNumTouches", InputContext_GetNumTouches, 0}
    ,{"Priority", InputContext_Priority, 0}
    ,{nullptr, nullptr, 0}
};

void Expose_InputContext(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, InputContext_Functions);
    DefineProperty(ctx, "KeyEventReceived", InputContext_Get_KeyEventReceived, nullptr);
    DefineProperty(ctx, "MouseEventReceived", InputContext_Get_MouseEventReceived, nullptr);
    DefineProperty(ctx, "KeyPressed", InputContext_Get_KeyPressed, nullptr);
    DefineProperty(ctx, "KeyDown", InputContext_Get_KeyDown, nullptr);
    DefineProperty(ctx, "KeyReleased", InputContext_Get_KeyReleased, nullptr);
    DefineProperty(ctx, "MouseMove", InputContext_Get_MouseMove, nullptr);
    DefineProperty(ctx, "MouseScroll", InputContext_Get_MouseScroll, nullptr);
    DefineProperty(ctx, "MouseDoubleClicked", InputContext_Get_MouseDoubleClicked, nullptr);
    DefineProperty(ctx, "MouseLeftPressed", InputContext_Get_MouseLeftPressed, nullptr);
    DefineProperty(ctx, "MouseMiddlePressed", InputContext_Get_MouseMiddlePressed, nullptr);
    DefineProperty(ctx, "MouseRightPressed", InputContext_Get_MouseRightPressed, nullptr);
    DefineProperty(ctx, "MouseLeftReleased", InputContext_Get_MouseLeftReleased, nullptr);
    DefineProperty(ctx, "MouseMiddleReleased", InputContext_Get_MouseMiddleReleased, nullptr);
    DefineProperty(ctx, "MouseRightReleased", InputContext_Get_MouseRightReleased, nullptr);
    DefineProperty(ctx, "name", InputContext_Name, InputContext_SetName_String);
    DefineProperty(ctx, "numTouches", InputContext_GetNumTouches, nullptr);
    DefineProperty(ctx, "priority", InputContext_Priority, InputContext_SetPriority_int);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, InputContext_ID);
}

}
