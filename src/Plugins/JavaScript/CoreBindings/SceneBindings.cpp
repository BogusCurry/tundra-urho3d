// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "BindingsHelpers.h"
#include "Scene/Scene.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Scene/Entity.h"
#include "Framework/Framework.h"
#include "Scene/IComponent.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{

extern const char* float3_ID;

duk_ret_t float3_Finalizer(duk_context* ctx);

const char* Scene_ID = "Scene";

static duk_ret_t Scene_Name(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    const String & ret = thisObj->Name();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Scene_Entities(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    const Scene::EntityMap & ret = thisObj->Entities();
    PushWeakObjectMap(ctx, ret);
    return 1;
}

static duk_ret_t Scene_ChangeEntityId_entity_id_t_entity_id_t(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    entity_id_t old_id = (entity_id_t)duk_require_number(ctx, 0);
    entity_id_t new_id = (entity_id_t)duk_require_number(ctx, 1);
    thisObj->ChangeEntityId(old_id, new_id);
    return 0;
}

static duk_ret_t Scene_EndAllAttributeInterpolations(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    thisObj->EndAllAttributeInterpolations();
    return 0;
}

static duk_ret_t Scene_UpdateAttributeInterpolations_float(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    float frametime = (float)duk_require_number(ctx, 0);
    thisObj->UpdateAttributeInterpolations(frametime);
    return 0;
}

static duk_ret_t Scene_IsInterpolating(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    bool ret = thisObj->IsInterpolating();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Scene_GetFramework(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    Framework * ret = thisObj->GetFramework();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Scene_EmitComponentAdded_Entity_IComponent_AttributeChange__Type(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    IComponent* comp = GetWeakObject<IComponent>(ctx, 1);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 2);
    thisObj->EmitComponentAdded(entity, comp, change);
    return 0;
}

static duk_ret_t Scene_EmitComponentRemoved_Entity_IComponent_AttributeChange__Type(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    IComponent* comp = GetWeakObject<IComponent>(ctx, 1);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 2);
    thisObj->EmitComponentRemoved(entity, comp, change);
    return 0;
}

static duk_ret_t Scene_EmitEntityRemoved_Entity_AttributeChange__Type(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->EmitEntityRemoved(entity, change);
    return 0;
}

static duk_ret_t Scene_EmitEntityAcked_Entity_entity_id_t(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    entity_id_t oldId = (entity_id_t)duk_require_number(ctx, 1);
    thisObj->EmitEntityAcked(entity, oldId);
    return 0;
}

static duk_ret_t Scene_EmitComponentAcked_IComponent_component_id_t(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    IComponent* component = GetWeakObject<IComponent>(ctx, 0);
    component_id_t oldId = (component_id_t)duk_require_number(ctx, 1);
    thisObj->EmitComponentAcked(component, oldId);
    return 0;
}

static duk_ret_t Scene_EntitiesWithComponent_String(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    String name(duk_require_string(ctx, 0));
    EntityVector ret = thisObj->EntitiesWithComponent(name);
    PushWeakObjectVector(ctx, ret);
    return 1;
}

static duk_ret_t Scene_CreateEntity_entity_id_t_StringVector_AttributeChange__Type_bool_bool_bool(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    entity_id_t id = (entity_id_t)duk_require_number(ctx, 0);
    StringVector components = GetStringVector(ctx, 1);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 2);
    bool replicated = duk_require_boolean(ctx, 3);
    bool componentsReplicated = duk_require_boolean(ctx, 4);
    bool temporary = duk_require_boolean(ctx, 5);
    EntityPtr ret = thisObj->CreateEntity(id, components, change, replicated, componentsReplicated, temporary);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Scene_CreateLocalEntity_StringVector_AttributeChange__Type_bool_bool(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    StringVector components = GetStringVector(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    bool componentsReplicated = duk_require_boolean(ctx, 2);
    bool temporary = duk_require_boolean(ctx, 3);
    EntityPtr ret = thisObj->CreateLocalEntity(components, change, componentsReplicated, temporary);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Scene_CreateTemporaryEntity_StringVector_AttributeChange__Type_bool(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    StringVector components = GetStringVector(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    bool componentsReplicated = duk_require_boolean(ctx, 2);
    EntityPtr ret = thisObj->CreateTemporaryEntity(components, change, componentsReplicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Scene_CreateLocalTemporaryEntity_StringVector_AttributeChange__Type(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    StringVector components = GetStringVector(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    EntityPtr ret = thisObj->CreateLocalTemporaryEntity(components, change);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Scene_UpVector(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    float3 ret = thisObj->UpVector();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t Scene_RightVector(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    float3 ret = thisObj->RightVector();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t Scene_ForwardVector(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    float3 ret = thisObj->ForwardVector();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t Scene_ViewEnabled(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    bool ret = thisObj->ViewEnabled();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Scene_IsAuthority(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    bool ret = thisObj->IsAuthority();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Scene_EntityById_entity_id_t(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    entity_id_t id = (entity_id_t)duk_require_number(ctx, 0);
    EntityPtr ret = thisObj->EntityById(id);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Scene_EntityByName_String(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    String name(duk_require_string(ctx, 0));
    EntityPtr ret = thisObj->EntityByName(name);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Scene_IsUniqueName_String(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    String name(duk_require_string(ctx, 0));
    bool ret = thisObj->IsUniqueName(name);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Scene_HasEntity_entity_id_t(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    entity_id_t id = (entity_id_t)duk_require_number(ctx, 0);
    bool ret = thisObj->HasEntity(id);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Scene_RemoveEntity_entity_id_t_AttributeChange__Type(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    entity_id_t id = (entity_id_t)duk_require_number(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    bool ret = thisObj->RemoveEntity(id, change);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Scene_RemoveAllEntities_bool_AttributeChange__Type(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    bool signal = duk_require_boolean(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->RemoveAllEntities(signal, change);
    return 0;
}

static duk_ret_t Scene_NextFreeId(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    entity_id_t ret = thisObj->NextFreeId();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Scene_NextFreeIdLocal(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    entity_id_t ret = thisObj->NextFreeIdLocal();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Scene_EntitiesWithComponent_u32_String(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    String name(duk_require_string(ctx, 1));
    EntityVector ret = thisObj->EntitiesWithComponent(typeId, name);
    PushWeakObjectVector(ctx, ret);
    return 1;
}

static duk_ret_t Scene_EntitiesWithComponent_String_String(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    String typeName(duk_require_string(ctx, 0));
    String name(duk_require_string(ctx, 1));
    EntityVector ret = thisObj->EntitiesWithComponent(typeName, name);
    PushWeakObjectVector(ctx, ret);
    return 1;
}

static duk_ret_t Scene_EntitiesOfGroup_String(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    String groupName(duk_require_string(ctx, 0));
    EntityVector ret = thisObj->EntitiesOfGroup(groupName);
    PushWeakObjectVector(ctx, ret);
    return 1;
}

static duk_ret_t Scene_Components_u32_String(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    String name(duk_require_string(ctx, 1));
    Entity::ComponentVector ret = thisObj->Components(typeId, name);
    PushWeakObjectVector(ctx, ret);
    return 1;
}

static duk_ret_t Scene_Components_String_String(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    String typeName(duk_require_string(ctx, 0));
    String name(duk_require_string(ctx, 1));
    Entity::ComponentVector ret = thisObj->Components(typeName, name);
    PushWeakObjectVector(ctx, ret);
    return 1;
}

static duk_ret_t Scene_FindEntitiesContaining_String_bool(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    String substring(duk_require_string(ctx, 0));
    bool caseSensitive = duk_require_boolean(ctx, 1);
    EntityVector ret = thisObj->FindEntitiesContaining(substring, caseSensitive);
    PushWeakObjectVector(ctx, ret);
    return 1;
}

static duk_ret_t Scene_FindEntitiesByName_String_bool(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    String name(duk_require_string(ctx, 0));
    bool caseSensitive = duk_require_boolean(ctx, 1);
    EntityVector ret = thisObj->FindEntitiesByName(name, caseSensitive);
    PushWeakObjectVector(ctx, ret);
    return 1;
}

static duk_ret_t Scene_RootLevelEntities(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    EntityVector ret = thisObj->RootLevelEntities();
    PushWeakObjectVector(ctx, ret);
    return 1;
}

static duk_ret_t Scene_SerializeToXmlString_bool_bool(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    bool serializeTemporary = duk_require_boolean(ctx, 0);
    bool serializeLocal = duk_require_boolean(ctx, 1);
    String ret = thisObj->SerializeToXmlString(serializeTemporary, serializeLocal);
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Scene_SaveSceneXML_String_bool_bool(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    String filename(duk_require_string(ctx, 0));
    bool saveTemporary = duk_require_boolean(ctx, 1);
    bool saveLocal = duk_require_boolean(ctx, 2);
    bool ret = thisObj->SaveSceneXML(filename, saveTemporary, saveLocal);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Scene_SaveSceneBinary_String_bool_bool(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    String filename(duk_require_string(ctx, 0));
    bool saveTemporary = duk_require_boolean(ctx, 1);
    bool saveLocal = duk_require_boolean(ctx, 2);
    bool ret = thisObj->SaveSceneBinary(filename, saveTemporary, saveLocal);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Scene_EntityParentId_Entity(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    Entity* ent = GetWeakObject<Entity>(ctx, 0);
    entity_id_t ret = thisObj->EntityParentId(ent);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Scene_EmitEntityCreated_Entity_AttributeChange__Type(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->EmitEntityCreated(entity, change);
    return 0;
}

static duk_ret_t Scene_EmitEntityParentChanged_Entity_Entity_AttributeChange__Type(duk_context* ctx)
{
    Scene* thisObj = GetThisWeakObject<Scene>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    Entity* newParent = GetWeakObject<Entity>(ctx, 1);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 2);
    thisObj->EmitEntityParentChanged(entity, newParent, change);
    return 0;
}

static duk_ret_t Scene_EntitiesWithComponent_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_string(ctx, 0))
        return Scene_EntitiesWithComponent_String(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_string(ctx, 1))
        return Scene_EntitiesWithComponent_u32_String(ctx);
    if (numArgs == 2 && duk_is_string(ctx, 0) && duk_is_string(ctx, 1))
        return Scene_EntitiesWithComponent_String_String(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Scene_Components_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_string(ctx, 1))
        return Scene_Components_u32_String(ctx);
    if (numArgs == 2 && duk_is_string(ctx, 0) && duk_is_string(ctx, 1))
        return Scene_Components_String_String(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static const duk_function_list_entry Scene_Functions[] = {
    {"Name", Scene_Name, 0}
    ,{"Entities", Scene_Entities, 0}
    ,{"ChangeEntityId", Scene_ChangeEntityId_entity_id_t_entity_id_t, 2}
    ,{"EndAllAttributeInterpolations", Scene_EndAllAttributeInterpolations, 0}
    ,{"UpdateAttributeInterpolations", Scene_UpdateAttributeInterpolations_float, 1}
    ,{"IsInterpolating", Scene_IsInterpolating, 0}
    ,{"GetFramework", Scene_GetFramework, 0}
    ,{"EmitComponentAdded", Scene_EmitComponentAdded_Entity_IComponent_AttributeChange__Type, 3}
    ,{"EmitComponentRemoved", Scene_EmitComponentRemoved_Entity_IComponent_AttributeChange__Type, 3}
    ,{"EmitEntityRemoved", Scene_EmitEntityRemoved_Entity_AttributeChange__Type, 2}
    ,{"EmitEntityAcked", Scene_EmitEntityAcked_Entity_entity_id_t, 2}
    ,{"EmitComponentAcked", Scene_EmitComponentAcked_IComponent_component_id_t, 2}
    ,{"EntitiesWithComponent", Scene_EntitiesWithComponent_Selector, DUK_VARARGS}
    ,{"CreateEntity", Scene_CreateEntity_entity_id_t_StringVector_AttributeChange__Type_bool_bool_bool, 6}
    ,{"CreateLocalEntity", Scene_CreateLocalEntity_StringVector_AttributeChange__Type_bool_bool, 4}
    ,{"CreateTemporaryEntity", Scene_CreateTemporaryEntity_StringVector_AttributeChange__Type_bool, 3}
    ,{"CreateLocalTemporaryEntity", Scene_CreateLocalTemporaryEntity_StringVector_AttributeChange__Type, 2}
    ,{"UpVector", Scene_UpVector, 0}
    ,{"RightVector", Scene_RightVector, 0}
    ,{"ForwardVector", Scene_ForwardVector, 0}
    ,{"ViewEnabled", Scene_ViewEnabled, 0}
    ,{"IsAuthority", Scene_IsAuthority, 0}
    ,{"EntityById", Scene_EntityById_entity_id_t, 1}
    ,{"EntityByName", Scene_EntityByName_String, 1}
    ,{"IsUniqueName", Scene_IsUniqueName_String, 1}
    ,{"HasEntity", Scene_HasEntity_entity_id_t, 1}
    ,{"RemoveEntity", Scene_RemoveEntity_entity_id_t_AttributeChange__Type, 2}
    ,{"RemoveAllEntities", Scene_RemoveAllEntities_bool_AttributeChange__Type, 2}
    ,{"NextFreeId", Scene_NextFreeId, 0}
    ,{"NextFreeIdLocal", Scene_NextFreeIdLocal, 0}
    ,{"EntitiesOfGroup", Scene_EntitiesOfGroup_String, 1}
    ,{"Components", Scene_Components_Selector, DUK_VARARGS}
    ,{"FindEntitiesContaining", Scene_FindEntitiesContaining_String_bool, 2}
    ,{"FindEntitiesByName", Scene_FindEntitiesByName_String_bool, 2}
    ,{"RootLevelEntities", Scene_RootLevelEntities, 0}
    ,{"SerializeToXmlString", Scene_SerializeToXmlString_bool_bool, 2}
    ,{"SaveSceneXML", Scene_SaveSceneXML_String_bool_bool, 3}
    ,{"SaveSceneBinary", Scene_SaveSceneBinary_String_bool_bool, 3}
    ,{"EntityParentId", Scene_EntityParentId_Entity, 1}
    ,{"EmitEntityCreated", Scene_EmitEntityCreated_Entity_AttributeChange__Type, 2}
    ,{"EmitEntityParentChanged", Scene_EmitEntityParentChanged_Entity_Entity_AttributeChange__Type, 3}
    ,{nullptr, nullptr, 0}
};

void Expose_Scene(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Scene_Functions);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, Scene_ID);
}

}
