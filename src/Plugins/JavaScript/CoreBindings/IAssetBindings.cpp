// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "Asset/IAsset.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Asset/AssetAPI.h"
#include "Asset/AssetReference.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{

static const char* AssetReference_ID = "AssetReference";

static duk_ret_t AssetReference_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<AssetReference>(ctx, AssetReference_ID);
    return 0;
}


static const char* IAsset_ID = "IAsset";

const char* SignalWrapper_IAsset_Unloaded_ID = "SignalWrapper_IAsset_Unloaded";

class SignalWrapper_IAsset_Unloaded
{
public:
    SignalWrapper_IAsset_Unloaded(Object* owner, Signal1< IAsset * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< IAsset * >* signal_;
};

class SignalReceiver_IAsset_Unloaded : public SignalReceiver
{
public:
    void OnSignal(IAsset * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_IAsset_Unloaded_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_IAsset_Unloaded>(ctx, SignalWrapper_IAsset_Unloaded_ID);
    return 0;
}

static duk_ret_t SignalWrapper_IAsset_Unloaded_Connect(duk_context* ctx)
{
    SignalWrapper_IAsset_Unloaded* wrapper = GetThisValueObject<SignalWrapper_IAsset_Unloaded>(ctx, SignalWrapper_IAsset_Unloaded_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_IAsset_Unloaded* receiver = new SignalReceiver_IAsset_Unloaded();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_IAsset_Unloaded::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_IAsset_Unloaded_Disconnect(duk_context* ctx)
{
    SignalWrapper_IAsset_Unloaded* wrapper = GetThisValueObject<SignalWrapper_IAsset_Unloaded>(ctx, SignalWrapper_IAsset_Unloaded_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_IAsset_Unloaded_Emit(duk_context* ctx)
{
    SignalWrapper_IAsset_Unloaded* wrapper = GetThisValueObject<SignalWrapper_IAsset_Unloaded>(ctx, SignalWrapper_IAsset_Unloaded_ID);
    if (!wrapper->owner_) return 0;
    IAsset* param0 = GetWeakObject<IAsset>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t IAsset_Get_Unloaded(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    SignalWrapper_IAsset_Unloaded* wrapper = new SignalWrapper_IAsset_Unloaded(thisObj, &thisObj->Unloaded);
    PushValueObject(ctx, wrapper, SignalWrapper_IAsset_Unloaded_ID, SignalWrapper_IAsset_Unloaded_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_IAsset_Unloaded_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_IAsset_Unloaded_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_IAsset_Unloaded_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_IAsset_Unloaded_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_IAsset_Unloaded_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_IAsset_Loaded_ID = "SignalWrapper_IAsset_Loaded";

class SignalWrapper_IAsset_Loaded
{
public:
    SignalWrapper_IAsset_Loaded(Object* owner, Signal1< AssetPtr >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< AssetPtr >* signal_;
};

class SignalReceiver_IAsset_Loaded : public SignalReceiver
{
public:
    void OnSignal(AssetPtr param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0.Get());
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_IAsset_Loaded_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_IAsset_Loaded>(ctx, SignalWrapper_IAsset_Loaded_ID);
    return 0;
}

static duk_ret_t SignalWrapper_IAsset_Loaded_Connect(duk_context* ctx)
{
    SignalWrapper_IAsset_Loaded* wrapper = GetThisValueObject<SignalWrapper_IAsset_Loaded>(ctx, SignalWrapper_IAsset_Loaded_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_IAsset_Loaded* receiver = new SignalReceiver_IAsset_Loaded();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_IAsset_Loaded::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_IAsset_Loaded_Disconnect(duk_context* ctx)
{
    SignalWrapper_IAsset_Loaded* wrapper = GetThisValueObject<SignalWrapper_IAsset_Loaded>(ctx, SignalWrapper_IAsset_Loaded_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_IAsset_Loaded_Emit(duk_context* ctx)
{
    SignalWrapper_IAsset_Loaded* wrapper = GetThisValueObject<SignalWrapper_IAsset_Loaded>(ctx, SignalWrapper_IAsset_Loaded_ID);
    if (!wrapper->owner_) return 0;
    SharedPtr<IAsset> param0(GetWeakObject<IAsset>(ctx, 0));
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t IAsset_Get_Loaded(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    SignalWrapper_IAsset_Loaded* wrapper = new SignalWrapper_IAsset_Loaded(thisObj, &thisObj->Loaded);
    PushValueObject(ctx, wrapper, SignalWrapper_IAsset_Loaded_ID, SignalWrapper_IAsset_Loaded_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_IAsset_Loaded_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_IAsset_Loaded_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_IAsset_Loaded_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_IAsset_Loaded_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_IAsset_Loaded_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_IAsset_PropertyStatusChanged_ID = "SignalWrapper_IAsset_PropertyStatusChanged";

class SignalWrapper_IAsset_PropertyStatusChanged
{
public:
    SignalWrapper_IAsset_PropertyStatusChanged(Object* owner, Signal1< IAsset * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< IAsset * >* signal_;
};

class SignalReceiver_IAsset_PropertyStatusChanged : public SignalReceiver
{
public:
    void OnSignal(IAsset * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_IAsset_PropertyStatusChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_IAsset_PropertyStatusChanged>(ctx, SignalWrapper_IAsset_PropertyStatusChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_IAsset_PropertyStatusChanged_Connect(duk_context* ctx)
{
    SignalWrapper_IAsset_PropertyStatusChanged* wrapper = GetThisValueObject<SignalWrapper_IAsset_PropertyStatusChanged>(ctx, SignalWrapper_IAsset_PropertyStatusChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_IAsset_PropertyStatusChanged* receiver = new SignalReceiver_IAsset_PropertyStatusChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_IAsset_PropertyStatusChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_IAsset_PropertyStatusChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_IAsset_PropertyStatusChanged* wrapper = GetThisValueObject<SignalWrapper_IAsset_PropertyStatusChanged>(ctx, SignalWrapper_IAsset_PropertyStatusChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_IAsset_PropertyStatusChanged_Emit(duk_context* ctx)
{
    SignalWrapper_IAsset_PropertyStatusChanged* wrapper = GetThisValueObject<SignalWrapper_IAsset_PropertyStatusChanged>(ctx, SignalWrapper_IAsset_PropertyStatusChanged_ID);
    if (!wrapper->owner_) return 0;
    IAsset* param0 = GetWeakObject<IAsset>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t IAsset_Get_PropertyStatusChanged(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    SignalWrapper_IAsset_PropertyStatusChanged* wrapper = new SignalWrapper_IAsset_PropertyStatusChanged(thisObj, &thisObj->PropertyStatusChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_IAsset_PropertyStatusChanged_ID, SignalWrapper_IAsset_PropertyStatusChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_IAsset_PropertyStatusChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_IAsset_PropertyStatusChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_IAsset_PropertyStatusChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_IAsset_PropertyStatusChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_IAsset_PropertyStatusChanged_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t IAsset_Type(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    String ret = thisObj->Type();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t IAsset_Name(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    String ret = thisObj->Name();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t IAsset_SetDiskSource_String(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    String diskSource = duk_require_string(ctx, 0);
    thisObj->SetDiskSource(diskSource);
    return 0;
}

static duk_ret_t IAsset_DiskSource(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    String ret = thisObj->DiskSource();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t IAsset_LoadFromFile_String(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    String filename = duk_require_string(ctx, 0);
    bool ret = thisObj->LoadFromFile(filename);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t IAsset_LoadFromCache(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    bool ret = thisObj->LoadFromCache();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t IAsset_Unload(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    thisObj->Unload();
    return 0;
}

static duk_ret_t IAsset_IsLoaded(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    bool ret = thisObj->IsLoaded();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t IAsset_IsEmpty(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    bool ret = thisObj->IsEmpty();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t IAsset_IsTrusted(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    bool ret = thisObj->IsTrusted();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t IAsset_MarkModified(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    thisObj->MarkModified();
    return 0;
}

static duk_ret_t IAsset_ClearModified(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    thisObj->ClearModified();
    return 0;
}

static duk_ret_t IAsset_IsModified(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    bool ret = thisObj->IsModified();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t IAsset_Clone_String(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    String newAssetName = duk_require_string(ctx, 0);
    AssetPtr ret = thisObj->Clone(newAssetName);
    PushWeakObject(ctx, ret.Get());
    return 1;
}

static duk_ret_t IAsset_SaveToFile_String_String(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    String filename = duk_require_string(ctx, 0);
    String serializationParameters = numArgs > 1 ? duk_require_string(ctx, 1) : "";
    bool ret = thisObj->SaveToFile(filename, serializationParameters);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t IAsset_SaveCachedCopyToFile_String(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    String filename = duk_require_string(ctx, 0);
    bool ret = thisObj->SaveCachedCopyToFile(filename);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t IAsset_AssetStorage(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    AssetStoragePtr ret = thisObj->AssetStorage();
    PushWeakObject(ctx, ret.Get());
    return 1;
}

static duk_ret_t IAsset_GetAssetAPI(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    AssetAPI * ret = thisObj->GetAssetAPI();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t IAsset_ToString(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    String ret = thisObj->ToString();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t IAsset_LoadCompleted(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    thisObj->LoadCompleted();
    return 0;
}

static duk_ret_t IAsset_DependencyLoaded_AssetPtr(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    SharedPtr<IAsset> dependee(GetWeakObject<IAsset>(ctx, 0));
    thisObj->DependencyLoaded(dependee);
    return 0;
}

static duk_ret_t IAsset_FindReferences(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    Vector< AssetReference > ret = thisObj->FindReferences();
    PushValueObjectVector(ctx, ret, AssetReference_ID, AssetReference_Finalizer);
    return 1;
}

static duk_ret_t IAsset_FindReferencesRecursive(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    Vector< AssetReference > ret = thisObj->FindReferencesRecursive();
    PushValueObjectVector(ctx, ret, AssetReference_ID, AssetReference_Finalizer);
    return 1;
}

static duk_ret_t IAsset_SetAssetStorage_AssetStoragePtr(duk_context* ctx)
{
    IAsset* thisObj = GetThisWeakObject<IAsset>(ctx);
    SharedPtr<IAssetStorage> storage(GetWeakObject<IAssetStorage>(ctx, 0));
    thisObj->SetAssetStorage(storage);
    return 0;
}

static const duk_function_list_entry IAsset_Functions[] = {
    {"Type", IAsset_Type, 0}
    ,{"Name", IAsset_Name, 0}
    ,{"SetDiskSource", IAsset_SetDiskSource_String, 1}
    ,{"DiskSource", IAsset_DiskSource, 0}
    ,{"LoadFromFile", IAsset_LoadFromFile_String, 1}
    ,{"LoadFromCache", IAsset_LoadFromCache, 0}
    ,{"Unload", IAsset_Unload, 0}
    ,{"IsLoaded", IAsset_IsLoaded, 0}
    ,{"IsEmpty", IAsset_IsEmpty, 0}
    ,{"IsTrusted", IAsset_IsTrusted, 0}
    ,{"MarkModified", IAsset_MarkModified, 0}
    ,{"ClearModified", IAsset_ClearModified, 0}
    ,{"IsModified", IAsset_IsModified, 0}
    ,{"Clone", IAsset_Clone_String, 1}
    ,{"SaveToFile", IAsset_SaveToFile_String_String, DUK_VARARGS}
    ,{"SaveCachedCopyToFile", IAsset_SaveCachedCopyToFile_String, 1}
    ,{"AssetStorage", IAsset_AssetStorage, 0}
    ,{"GetAssetAPI", IAsset_GetAssetAPI, 0}
    ,{"ToString", IAsset_ToString, 0}
    ,{"LoadCompleted", IAsset_LoadCompleted, 0}
    ,{"DependencyLoaded", IAsset_DependencyLoaded_AssetPtr, 1}
    ,{"FindReferences", IAsset_FindReferences, 0}
    ,{"FindReferencesRecursive", IAsset_FindReferencesRecursive, 0}
    ,{"SetAssetStorage", IAsset_SetAssetStorage_AssetStoragePtr, 1}
    ,{nullptr, nullptr, 0}
};

void Expose_IAsset(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_number(ctx, 0);
    duk_put_prop_string(ctx, -2, "Original");
    duk_push_number(ctx, 1);
    duk_put_prop_string(ctx, -2, "Cached");
    duk_push_number(ctx, 2);
    duk_put_prop_string(ctx, -2, "Programmatic");
    duk_push_number(ctx, 3);
    duk_put_prop_string(ctx, -2, "Bundle");
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, IAsset_Functions);
    DefineProperty(ctx, "Unloaded", IAsset_Get_Unloaded, nullptr);
    DefineProperty(ctx, "Loaded", IAsset_Get_Loaded, nullptr);
    DefineProperty(ctx, "PropertyStatusChanged", IAsset_Get_PropertyStatusChanged, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, IAsset_ID);
}

}
