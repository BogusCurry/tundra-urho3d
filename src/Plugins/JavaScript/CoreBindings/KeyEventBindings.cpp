// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "Input/KeyEvent.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif



using namespace Tundra;
using namespace std;

namespace JSBindings
{



static const char* KeyEvent_ID = "KeyEvent";

static duk_ret_t KeyEvent_Set_keyCode(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    int keyCode = (int)duk_require_number(ctx, 0);
    thisObj->keyCode = keyCode;
    return 0;
}

static duk_ret_t KeyEvent_Get_keyCode(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    duk_push_number(ctx, thisObj->keyCode);
    return 1;
}

static duk_ret_t KeyEvent_Set_keyPressCount(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    int keyPressCount = (int)duk_require_number(ctx, 0);
    thisObj->keyPressCount = keyPressCount;
    return 0;
}

static duk_ret_t KeyEvent_Get_keyPressCount(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    duk_push_number(ctx, thisObj->keyPressCount);
    return 1;
}

static duk_ret_t KeyEvent_Set_text(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    String text = duk_require_string(ctx, 0);
    thisObj->text = text;
    return 0;
}

static duk_ret_t KeyEvent_Get_text(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    duk_push_string(ctx, thisObj->text.CString());
    return 1;
}

static duk_ret_t KeyEvent_Set_sequence(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    int sequence = (int)duk_require_number(ctx, 0);
    thisObj->sequence = sequence;
    return 0;
}

static duk_ret_t KeyEvent_Get_sequence(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    duk_push_number(ctx, thisObj->sequence);
    return 1;
}

static duk_ret_t KeyEvent_Set_handled(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    bool handled = duk_require_boolean(ctx, 0);
    thisObj->handled = handled;
    return 0;
}

static duk_ret_t KeyEvent_Get_handled(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    duk_push_boolean(ctx, thisObj->handled);
    return 1;
}

static duk_ret_t KeyEvent_Set_timestamp(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    float timestamp = (float)duk_require_number(ctx, 0);
    thisObj->timestamp = timestamp;
    return 0;
}

static duk_ret_t KeyEvent_Get_timestamp(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    duk_push_number(ctx, thisObj->timestamp);
    return 1;
}

static duk_ret_t KeyEvent_Sequence(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    KeySequence ret = thisObj->Sequence();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t KeyEvent_Text(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    String ret = thisObj->Text();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t KeyEvent_KeyPressCount(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    int ret = thisObj->KeyPressCount();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t KeyEvent_KeyCode(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    Key ret = thisObj->KeyCode();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t KeyEvent_Timestamp(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    float ret = thisObj->Timestamp();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t KeyEvent_Suppress(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    thisObj->Suppress();
    return 0;
}

static duk_ret_t KeyEvent_IsRepeat(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    bool ret = thisObj->IsRepeat();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t KeyEvent_HadKeyDown_int(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    int keyCode = (int)duk_require_number(ctx, 0);
    bool ret = thisObj->HadKeyDown(keyCode);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t KeyEvent_HasShiftModifier(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    bool ret = thisObj->HasShiftModifier();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t KeyEvent_HasCtrlModifier(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    bool ret = thisObj->HasCtrlModifier();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t KeyEvent_HasAltModifier(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    bool ret = thisObj->HasAltModifier();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t KeyEvent_HasMetaModifier(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    bool ret = thisObj->HasMetaModifier();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t KeyEvent_KeyWithModifier(duk_context* ctx)
{
    KeyEvent* thisObj = GetThisWeakObject<KeyEvent>(ctx);
    int ret = thisObj->KeyWithModifier();
    duk_push_number(ctx, ret);
    return 1;
}

static const duk_function_list_entry KeyEvent_Functions[] = {
    {"Sequence", KeyEvent_Sequence, 0}
    ,{"Text", KeyEvent_Text, 0}
    ,{"KeyPressCount", KeyEvent_KeyPressCount, 0}
    ,{"KeyCode", KeyEvent_KeyCode, 0}
    ,{"Timestamp", KeyEvent_Timestamp, 0}
    ,{"Suppress", KeyEvent_Suppress, 0}
    ,{"IsRepeat", KeyEvent_IsRepeat, 0}
    ,{"HadKeyDown", KeyEvent_HadKeyDown_int, 1}
    ,{"HasShiftModifier", KeyEvent_HasShiftModifier, 0}
    ,{"HasCtrlModifier", KeyEvent_HasCtrlModifier, 0}
    ,{"HasAltModifier", KeyEvent_HasAltModifier, 0}
    ,{"HasMetaModifier", KeyEvent_HasMetaModifier, 0}
    ,{"KeyWithModifier", KeyEvent_KeyWithModifier, 0}
    ,{nullptr, nullptr, 0}
};

void Expose_KeyEvent(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_number(ctx, 0);
    duk_put_prop_string(ctx, -2, "KeyEventInvalid");
    duk_push_number(ctx, 1);
    duk_put_prop_string(ctx, -2, "KeyPressed");
    duk_push_number(ctx, 2);
    duk_put_prop_string(ctx, -2, "KeyDown");
    duk_push_number(ctx, 3);
    duk_put_prop_string(ctx, -2, "KeyReleased");
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, KeyEvent_Functions);
    DefineProperty(ctx, "keyCode", KeyEvent_Get_keyCode, KeyEvent_Set_keyCode);
    DefineProperty(ctx, "keyPressCount", KeyEvent_Get_keyPressCount, KeyEvent_Set_keyPressCount);
    DefineProperty(ctx, "text", KeyEvent_Get_text, KeyEvent_Set_text);
    DefineProperty(ctx, "sequence", KeyEvent_Get_sequence, KeyEvent_Set_sequence);
    DefineProperty(ctx, "handled", KeyEvent_Get_handled, KeyEvent_Set_handled);
    DefineProperty(ctx, "timestamp", KeyEvent_Get_timestamp, KeyEvent_Set_timestamp);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, KeyEvent_ID);
}

}
