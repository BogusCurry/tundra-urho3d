// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "BindingsHelpers.h"
#include "Scene/Entity.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Scene/Scene.h"
#include "Scene/IComponent.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{



const char* Entity_ID = "Entity";

static duk_ret_t Entity_SetGroup_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String groupName(duk_require_string(ctx, 0));
    thisObj->SetGroup(groupName);
    return 0;
}

static duk_ret_t Entity_Group(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String ret = thisObj->Group();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Entity_EmitEnterView_IComponent(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    IComponent* camera = GetWeakObject<IComponent>(ctx, 0);
    thisObj->EmitEnterView(camera);
    return 0;
}

static duk_ret_t Entity_EmitLeaveView_IComponent(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    IComponent* camera = GetWeakObject<IComponent>(ctx, 0);
    thisObj->EmitLeaveView(camera);
    return 0;
}

static duk_ret_t Entity_ChangeComponentId_component_id_t_component_id_t(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    component_id_t old_id = (component_id_t)duk_require_number(ctx, 0);
    component_id_t new_id = (component_id_t)duk_require_number(ctx, 1);
    thisObj->ChangeComponentId(old_id, new_id);
    return 0;
}

static duk_ret_t Entity_CreateComponentWithId_component_id_t_u32_String_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    component_id_t compId = (component_id_t)duk_require_number(ctx, 0);
    u32 typeId = (u32)duk_require_number(ctx, 1);
    String name(duk_require_string(ctx, 2));
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 3);
    ComponentPtr ret = thisObj->CreateComponentWithId(compId, typeId, name, change);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Components(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    const Entity::ComponentMap & ret = thisObj->Components();
    PushWeakObjectMap(ctx, ret);
    return 1;
}

static duk_ret_t Entity_NumComponents(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    uint ret = thisObj->NumComponents();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Entity_ComponentById_component_id_t(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    component_id_t id = (component_id_t)duk_require_number(ctx, 0);
    ComponentPtr ret = thisObj->ComponentById(id);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Component_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName(duk_require_string(ctx, 0));
    ComponentPtr ret = thisObj->Component(typeName);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Component_u32(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    ComponentPtr ret = thisObj->Component(typeId);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Component_String_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName(duk_require_string(ctx, 0));
    String name(duk_require_string(ctx, 1));
    ComponentPtr ret = thisObj->Component(typeName, name);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Component_u32_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    String name(duk_require_string(ctx, 1));
    ComponentPtr ret = thisObj->Component(typeId, name);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_GetOrCreateComponent_String_AttributeChange__Type_bool(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName(duk_require_string(ctx, 0));
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    bool replicated = duk_require_boolean(ctx, 2);
    ComponentPtr ret = thisObj->GetOrCreateComponent(typeName, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_GetOrCreateComponent_String_String_AttributeChange__Type_bool(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName(duk_require_string(ctx, 0));
    String name(duk_require_string(ctx, 1));
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 2);
    bool replicated = duk_require_boolean(ctx, 3);
    ComponentPtr ret = thisObj->GetOrCreateComponent(typeName, name, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_GetOrCreateComponent_u32_AttributeChange__Type_bool(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    bool replicated = duk_require_boolean(ctx, 2);
    ComponentPtr ret = thisObj->GetOrCreateComponent(typeId, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_GetOrCreateComponent_u32_String_AttributeChange__Type_bool(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    String name(duk_require_string(ctx, 1));
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 2);
    bool replicated = duk_require_boolean(ctx, 3);
    ComponentPtr ret = thisObj->GetOrCreateComponent(typeId, name, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_GetOrCreateLocalComponent_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName(duk_require_string(ctx, 0));
    ComponentPtr ret = thisObj->GetOrCreateLocalComponent(typeName);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_GetOrCreateLocalComponent_String_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName(duk_require_string(ctx, 0));
    String name(duk_require_string(ctx, 1));
    ComponentPtr ret = thisObj->GetOrCreateLocalComponent(typeName, name);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_CreateComponent_String_AttributeChange__Type_bool(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName(duk_require_string(ctx, 0));
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    bool replicated = duk_require_boolean(ctx, 2);
    ComponentPtr ret = thisObj->CreateComponent(typeName, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_CreateComponent_String_String_AttributeChange__Type_bool(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName(duk_require_string(ctx, 0));
    String name(duk_require_string(ctx, 1));
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 2);
    bool replicated = duk_require_boolean(ctx, 3);
    ComponentPtr ret = thisObj->CreateComponent(typeName, name, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_CreateComponent_u32_AttributeChange__Type_bool(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    bool replicated = duk_require_boolean(ctx, 2);
    ComponentPtr ret = thisObj->CreateComponent(typeId, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_CreateComponent_u32_String_AttributeChange__Type_bool(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    String name(duk_require_string(ctx, 1));
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 2);
    bool replicated = duk_require_boolean(ctx, 3);
    ComponentPtr ret = thisObj->CreateComponent(typeId, name, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_CreateLocalComponent_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName(duk_require_string(ctx, 0));
    ComponentPtr ret = thisObj->CreateLocalComponent(typeName);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_CreateLocalComponent_String_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName(duk_require_string(ctx, 0));
    String name(duk_require_string(ctx, 1));
    ComponentPtr ret = thisObj->CreateLocalComponent(typeName, name);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_AddComponent_ComponentPtr_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    IComponent* component = GetWeakObject<IComponent>(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->AddComponent(ComponentPtr(component), change);
    return 0;
}

static duk_ret_t Entity_AddComponent_component_id_t_ComponentPtr_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    component_id_t id = (component_id_t)duk_require_number(ctx, 0);
    IComponent* component = GetWeakObject<IComponent>(ctx, 1);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 2);
    thisObj->AddComponent(id, ComponentPtr(component), change);
    return 0;
}

static duk_ret_t Entity_RemoveComponent_ComponentPtr_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    IComponent* component = GetWeakObject<IComponent>(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->RemoveComponent(ComponentPtr(component), change);
    return 0;
}

static duk_ret_t Entity_RemoveComponent_String_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName(duk_require_string(ctx, 0));
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->RemoveComponent(typeName, change);
    return 0;
}

static duk_ret_t Entity_RemoveComponent_String_String_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName(duk_require_string(ctx, 0));
    String name(duk_require_string(ctx, 1));
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 2);
    thisObj->RemoveComponent(typeName, name, change);
    return 0;
}

static duk_ret_t Entity_RemoveComponentById_component_id_t_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    component_id_t id = (component_id_t)duk_require_number(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->RemoveComponentById(id, change);
    return 0;
}

static duk_ret_t Entity_RemoveComponents_String_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName(duk_require_string(ctx, 0));
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    uint ret = thisObj->RemoveComponents(typeName, change);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Entity_RemoveComponents_u32_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    uint ret = thisObj->RemoveComponents(typeId, change);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Entity_RemoveAllComponents_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 0);
    thisObj->RemoveAllComponents(change);
    return 0;
}

static duk_ret_t Entity_ComponentsOfType_u32(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    Entity::ComponentVector ret = thisObj->ComponentsOfType(typeId);
    PushWeakObjectArray(ctx, ret);
    return 1;
}

static duk_ret_t Entity_ComponentsOfType_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName(duk_require_string(ctx, 0));
    Entity::ComponentVector ret = thisObj->ComponentsOfType(typeName);
    PushWeakObjectArray(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Clone_bool_bool_String_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool createAsLocal = duk_require_boolean(ctx, 0);
    bool createAsTemporary = duk_require_boolean(ctx, 1);
    String cloneName(duk_require_string(ctx, 2));
    AttributeChange::Type changeType = (AttributeChange::Type)(int)duk_require_number(ctx, 3);
    EntityPtr ret = thisObj->Clone(createAsLocal, createAsTemporary, cloneName, changeType);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_SerializeToXMLString_bool_bool_bool_bool(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool serializeTemporary = duk_require_boolean(ctx, 0);
    bool serializeLocal = duk_require_boolean(ctx, 1);
    bool serializeChildren = duk_require_boolean(ctx, 2);
    bool createSceneElement = duk_require_boolean(ctx, 3);
    String ret = thisObj->SerializeToXMLString(serializeTemporary, serializeLocal, serializeChildren, createSceneElement);
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Entity_SetName_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String name(duk_require_string(ctx, 0));
    thisObj->SetName(name);
    return 0;
}

static duk_ret_t Entity_Name(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String ret = thisObj->Name();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Entity_SetDescription_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String desc(duk_require_string(ctx, 0));
    thisObj->SetDescription(desc);
    return 0;
}

static duk_ret_t Entity_Description(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String ret = thisObj->Description();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Entity_RemoveAction_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String name(duk_require_string(ctx, 0));
    thisObj->RemoveAction(name);
    return 0;
}

static duk_ret_t Entity_SetTemporary_bool_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->SetTemporary(enable, change);
    return 0;
}

static duk_ret_t Entity_IsTemporary(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool ret = thisObj->IsTemporary();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Entity_IsLocal(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool ret = thisObj->IsLocal();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Entity_IsReplicated(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool ret = thisObj->IsReplicated();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Entity_IsUnacked(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool ret = thisObj->IsUnacked();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Entity_ToString(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String ret = thisObj->ToString();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Entity_Id(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    entity_id_t ret = thisObj->Id();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Entity_ParentScene(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    Scene * ret = thisObj->ParentScene();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_AddChild_EntityPtr_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    Entity* child = GetWeakObject<Entity>(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->AddChild(EntityPtr(child), change);
    return 0;
}

static duk_ret_t Entity_RemoveChild_EntityPtr_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    Entity* child = GetWeakObject<Entity>(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->RemoveChild(EntityPtr(child), change);
    return 0;
}

static duk_ret_t Entity_RemoveAllChildren_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 0);
    thisObj->RemoveAllChildren(change);
    return 0;
}

static duk_ret_t Entity_DetachChild_EntityPtr_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    Entity* child = GetWeakObject<Entity>(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->DetachChild(EntityPtr(child), change);
    return 0;
}

static duk_ret_t Entity_SetParent_EntityPtr_AttributeChange__Type(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    Entity* parent = GetWeakObject<Entity>(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->SetParent(EntityPtr(parent), change);
    return 0;
}

static duk_ret_t Entity_Parent(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    EntityPtr ret = thisObj->Parent();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_HasParent(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool ret = thisObj->HasParent();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Entity_NumChildren(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    uint ret = thisObj->NumChildren();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Child_uint(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    uint index = (uint)duk_require_number(ctx, 0);
    EntityPtr ret = thisObj->Child(index);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_ChildByName_String_bool(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String name(duk_require_string(ctx, 0));
    bool recursive = duk_require_boolean(ctx, 1);
    EntityPtr ret = thisObj->ChildByName(name, recursive);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Children_bool(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool recursive = duk_require_boolean(ctx, 0);
    EntityVector ret = thisObj->Children(recursive);
    PushWeakObjectArray(ctx, ret);
    return 1;
}

static duk_ret_t Entity_ShouldBeSerialized_bool_bool_bool(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool serializeTemporary = duk_require_boolean(ctx, 0);
    bool serializeLocal = duk_require_boolean(ctx, 1);
    bool serializeChildren = duk_require_boolean(ctx, 2);
    bool ret = thisObj->ShouldBeSerialized(serializeTemporary, serializeLocal, serializeChildren);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Component_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_string(ctx, 0))
        return Entity_Component_String(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return Entity_Component_u32(ctx);
    if (numArgs == 2 && duk_is_string(ctx, 0) && duk_is_string(ctx, 1))
        return Entity_Component_String_String(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_string(ctx, 1))
        return Entity_Component_u32_String(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_GetOrCreateComponent_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_string(ctx, 0) && duk_is_number(ctx, 1) && duk_is_boolean(ctx, 2))
        return Entity_GetOrCreateComponent_String_AttributeChange__Type_bool(ctx);
    if (numArgs == 4 && duk_is_string(ctx, 0) && duk_is_string(ctx, 1) && duk_is_number(ctx, 2) && duk_is_boolean(ctx, 3))
        return Entity_GetOrCreateComponent_String_String_AttributeChange__Type_bool(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_boolean(ctx, 2))
        return Entity_GetOrCreateComponent_u32_AttributeChange__Type_bool(ctx);
    if (numArgs == 4 && duk_is_number(ctx, 0) && duk_is_string(ctx, 1) && duk_is_number(ctx, 2) && duk_is_boolean(ctx, 3))
        return Entity_GetOrCreateComponent_u32_String_AttributeChange__Type_bool(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_GetOrCreateLocalComponent_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_string(ctx, 0))
        return Entity_GetOrCreateLocalComponent_String(ctx);
    if (numArgs == 2 && duk_is_string(ctx, 0) && duk_is_string(ctx, 1))
        return Entity_GetOrCreateLocalComponent_String_String(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_CreateComponent_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_string(ctx, 0) && duk_is_number(ctx, 1) && duk_is_boolean(ctx, 2))
        return Entity_CreateComponent_String_AttributeChange__Type_bool(ctx);
    if (numArgs == 4 && duk_is_string(ctx, 0) && duk_is_string(ctx, 1) && duk_is_number(ctx, 2) && duk_is_boolean(ctx, 3))
        return Entity_CreateComponent_String_String_AttributeChange__Type_bool(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_boolean(ctx, 2))
        return Entity_CreateComponent_u32_AttributeChange__Type_bool(ctx);
    if (numArgs == 4 && duk_is_number(ctx, 0) && duk_is_string(ctx, 1) && duk_is_number(ctx, 2) && duk_is_boolean(ctx, 3))
        return Entity_CreateComponent_u32_String_AttributeChange__Type_bool(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_CreateLocalComponent_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_string(ctx, 0))
        return Entity_CreateLocalComponent_String(ctx);
    if (numArgs == 2 && duk_is_string(ctx, 0) && duk_is_string(ctx, 1))
        return Entity_CreateLocalComponent_String_String(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_AddComponent_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 1))
        return Entity_AddComponent_ComponentPtr_AttributeChange__Type(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 2))
        return Entity_AddComponent_component_id_t_ComponentPtr_AttributeChange__Type(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_RemoveComponent_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 1))
        return Entity_RemoveComponent_ComponentPtr_AttributeChange__Type(ctx);
    if (numArgs == 2 && duk_is_string(ctx, 0) && duk_is_number(ctx, 1))
        return Entity_RemoveComponent_String_AttributeChange__Type(ctx);
    if (numArgs == 3 && duk_is_string(ctx, 0) && duk_is_string(ctx, 1) && duk_is_number(ctx, 2))
        return Entity_RemoveComponent_String_String_AttributeChange__Type(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_RemoveComponents_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_string(ctx, 0) && duk_is_number(ctx, 1))
        return Entity_RemoveComponents_String_AttributeChange__Type(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1))
        return Entity_RemoveComponents_u32_AttributeChange__Type(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_ComponentsOfType_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return Entity_ComponentsOfType_u32(ctx);
    if (numArgs == 1 && duk_is_string(ctx, 0))
        return Entity_ComponentsOfType_String(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static const duk_function_list_entry Entity_Functions[] = {
    {"SetGroup", Entity_SetGroup_String, 1}
    ,{"Group", Entity_Group, 0}
    ,{"EmitEnterView", Entity_EmitEnterView_IComponent, 1}
    ,{"EmitLeaveView", Entity_EmitLeaveView_IComponent, 1}
    ,{"ChangeComponentId", Entity_ChangeComponentId_component_id_t_component_id_t, 2}
    ,{"CreateComponentWithId", Entity_CreateComponentWithId_component_id_t_u32_String_AttributeChange__Type, 4}
    ,{"Components", Entity_Components, 0}
    ,{"NumComponents", Entity_NumComponents, 0}
    ,{"ComponentById", Entity_ComponentById_component_id_t, 1}
    ,{"Component", Entity_Component_Selector, DUK_VARARGS}
    ,{"GetOrCreateComponent", Entity_GetOrCreateComponent_Selector, DUK_VARARGS}
    ,{"GetOrCreateLocalComponent", Entity_GetOrCreateLocalComponent_Selector, DUK_VARARGS}
    ,{"CreateComponent", Entity_CreateComponent_Selector, DUK_VARARGS}
    ,{"CreateLocalComponent", Entity_CreateLocalComponent_Selector, DUK_VARARGS}
    ,{"AddComponent", Entity_AddComponent_Selector, DUK_VARARGS}
    ,{"RemoveComponent", Entity_RemoveComponent_Selector, DUK_VARARGS}
    ,{"RemoveComponentById", Entity_RemoveComponentById_component_id_t_AttributeChange__Type, 2}
    ,{"RemoveComponents", Entity_RemoveComponents_Selector, DUK_VARARGS}
    ,{"RemoveAllComponents", Entity_RemoveAllComponents_AttributeChange__Type, 1}
    ,{"ComponentsOfType", Entity_ComponentsOfType_Selector, DUK_VARARGS}
    ,{"Clone", Entity_Clone_bool_bool_String_AttributeChange__Type, 4}
    ,{"SerializeToXMLString", Entity_SerializeToXMLString_bool_bool_bool_bool, 4}
    ,{"SetName", Entity_SetName_String, 1}
    ,{"Name", Entity_Name, 0}
    ,{"SetDescription", Entity_SetDescription_String, 1}
    ,{"Description", Entity_Description, 0}
    ,{"RemoveAction", Entity_RemoveAction_String, 1}
    ,{"SetTemporary", Entity_SetTemporary_bool_AttributeChange__Type, 2}
    ,{"IsTemporary", Entity_IsTemporary, 0}
    ,{"IsLocal", Entity_IsLocal, 0}
    ,{"IsReplicated", Entity_IsReplicated, 0}
    ,{"IsUnacked", Entity_IsUnacked, 0}
    ,{"ToString", Entity_ToString, 0}
    ,{"Id", Entity_Id, 0}
    ,{"ParentScene", Entity_ParentScene, 0}
    ,{"AddChild", Entity_AddChild_EntityPtr_AttributeChange__Type, 2}
    ,{"RemoveChild", Entity_RemoveChild_EntityPtr_AttributeChange__Type, 2}
    ,{"RemoveAllChildren", Entity_RemoveAllChildren_AttributeChange__Type, 1}
    ,{"DetachChild", Entity_DetachChild_EntityPtr_AttributeChange__Type, 2}
    ,{"SetParent", Entity_SetParent_EntityPtr_AttributeChange__Type, 2}
    ,{"Parent", Entity_Parent, 0}
    ,{"HasParent", Entity_HasParent, 0}
    ,{"NumChildren", Entity_NumChildren, 0}
    ,{"Child", Entity_Child_uint, 1}
    ,{"ChildByName", Entity_ChildByName_String_bool, 2}
    ,{"Children", Entity_Children_bool, 1}
    ,{"ShouldBeSerialized", Entity_ShouldBeSerialized_bool_bool_bool, 3}
    ,{nullptr, nullptr, 0}
};

void Expose_Entity(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Entity_Functions);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, Entity_ID);
}

}
