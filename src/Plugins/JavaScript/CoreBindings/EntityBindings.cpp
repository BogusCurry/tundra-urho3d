// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "Scene/Entity.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Scene/Scene.h"
#include "Scene/Entity.h"
#include "Scene/IComponent.h"
#include "Scene/EntityAction.h"
#include "Framework/Framework.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{



static const char* Entity_ID = "Entity";

const char* SignalWrapper_Entity_ComponentAdded_ID = "SignalWrapper_Entity_ComponentAdded";

class SignalWrapper_Entity_ComponentAdded
{
public:
    SignalWrapper_Entity_ComponentAdded(Object* owner, Signal2< IComponent *, AttributeChange::Type >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal2< IComponent *, AttributeChange::Type >* signal_;
};

class SignalReceiver_Entity_ComponentAdded : public SignalReceiver
{
public:
    void OnSignal(IComponent * param0, AttributeChange::Type param1)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        duk_push_number(ctx, param1);
        duk_put_prop_index(ctx, -2, 1);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Entity_ComponentAdded_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Entity_ComponentAdded>(ctx, SignalWrapper_Entity_ComponentAdded_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_ComponentAdded_Connect(duk_context* ctx)
{
    SignalWrapper_Entity_ComponentAdded* wrapper = GetThisValueObject<SignalWrapper_Entity_ComponentAdded>(ctx, SignalWrapper_Entity_ComponentAdded_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Entity_ComponentAdded* receiver = new SignalReceiver_Entity_ComponentAdded();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Entity_ComponentAdded::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_ComponentAdded_Disconnect(duk_context* ctx)
{
    SignalWrapper_Entity_ComponentAdded* wrapper = GetThisValueObject<SignalWrapper_Entity_ComponentAdded>(ctx, SignalWrapper_Entity_ComponentAdded_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_ComponentAdded_Emit(duk_context* ctx)
{
    SignalWrapper_Entity_ComponentAdded* wrapper = GetThisValueObject<SignalWrapper_Entity_ComponentAdded>(ctx, SignalWrapper_Entity_ComponentAdded_ID);
    if (!wrapper->owner_) return 0;
    IComponent* param0 = GetWeakObject<IComponent>(ctx, 0);
    AttributeChange::Type param1 = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    wrapper->signal_->Emit(param0, param1);
    return 0;
}

static duk_ret_t Entity_Get_ComponentAdded(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    SignalWrapper_Entity_ComponentAdded* wrapper = new SignalWrapper_Entity_ComponentAdded(thisObj, &thisObj->ComponentAdded);
    PushValueObject(ctx, wrapper, SignalWrapper_Entity_ComponentAdded_ID, SignalWrapper_Entity_ComponentAdded_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Entity_ComponentAdded_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Entity_ComponentAdded_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Entity_ComponentAdded_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Entity_ComponentAdded_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Entity_ComponentAdded_Emit, 2);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Entity_ComponentRemoved_ID = "SignalWrapper_Entity_ComponentRemoved";

class SignalWrapper_Entity_ComponentRemoved
{
public:
    SignalWrapper_Entity_ComponentRemoved(Object* owner, Signal2< IComponent *, AttributeChange::Type >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal2< IComponent *, AttributeChange::Type >* signal_;
};

class SignalReceiver_Entity_ComponentRemoved : public SignalReceiver
{
public:
    void OnSignal(IComponent * param0, AttributeChange::Type param1)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        duk_push_number(ctx, param1);
        duk_put_prop_index(ctx, -2, 1);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Entity_ComponentRemoved_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Entity_ComponentRemoved>(ctx, SignalWrapper_Entity_ComponentRemoved_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_ComponentRemoved_Connect(duk_context* ctx)
{
    SignalWrapper_Entity_ComponentRemoved* wrapper = GetThisValueObject<SignalWrapper_Entity_ComponentRemoved>(ctx, SignalWrapper_Entity_ComponentRemoved_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Entity_ComponentRemoved* receiver = new SignalReceiver_Entity_ComponentRemoved();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Entity_ComponentRemoved::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_ComponentRemoved_Disconnect(duk_context* ctx)
{
    SignalWrapper_Entity_ComponentRemoved* wrapper = GetThisValueObject<SignalWrapper_Entity_ComponentRemoved>(ctx, SignalWrapper_Entity_ComponentRemoved_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_ComponentRemoved_Emit(duk_context* ctx)
{
    SignalWrapper_Entity_ComponentRemoved* wrapper = GetThisValueObject<SignalWrapper_Entity_ComponentRemoved>(ctx, SignalWrapper_Entity_ComponentRemoved_ID);
    if (!wrapper->owner_) return 0;
    IComponent* param0 = GetWeakObject<IComponent>(ctx, 0);
    AttributeChange::Type param1 = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    wrapper->signal_->Emit(param0, param1);
    return 0;
}

static duk_ret_t Entity_Get_ComponentRemoved(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    SignalWrapper_Entity_ComponentRemoved* wrapper = new SignalWrapper_Entity_ComponentRemoved(thisObj, &thisObj->ComponentRemoved);
    PushValueObject(ctx, wrapper, SignalWrapper_Entity_ComponentRemoved_ID, SignalWrapper_Entity_ComponentRemoved_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Entity_ComponentRemoved_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Entity_ComponentRemoved_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Entity_ComponentRemoved_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Entity_ComponentRemoved_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Entity_ComponentRemoved_Emit, 2);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Entity_EntityRemoved_ID = "SignalWrapper_Entity_EntityRemoved";

class SignalWrapper_Entity_EntityRemoved
{
public:
    SignalWrapper_Entity_EntityRemoved(Object* owner, Signal2< Entity *, AttributeChange::Type >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal2< Entity *, AttributeChange::Type >* signal_;
};

class SignalReceiver_Entity_EntityRemoved : public SignalReceiver
{
public:
    void OnSignal(Entity * param0, AttributeChange::Type param1)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        duk_push_number(ctx, param1);
        duk_put_prop_index(ctx, -2, 1);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Entity_EntityRemoved_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Entity_EntityRemoved>(ctx, SignalWrapper_Entity_EntityRemoved_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_EntityRemoved_Connect(duk_context* ctx)
{
    SignalWrapper_Entity_EntityRemoved* wrapper = GetThisValueObject<SignalWrapper_Entity_EntityRemoved>(ctx, SignalWrapper_Entity_EntityRemoved_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Entity_EntityRemoved* receiver = new SignalReceiver_Entity_EntityRemoved();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Entity_EntityRemoved::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_EntityRemoved_Disconnect(duk_context* ctx)
{
    SignalWrapper_Entity_EntityRemoved* wrapper = GetThisValueObject<SignalWrapper_Entity_EntityRemoved>(ctx, SignalWrapper_Entity_EntityRemoved_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_EntityRemoved_Emit(duk_context* ctx)
{
    SignalWrapper_Entity_EntityRemoved* wrapper = GetThisValueObject<SignalWrapper_Entity_EntityRemoved>(ctx, SignalWrapper_Entity_EntityRemoved_ID);
    if (!wrapper->owner_) return 0;
    Entity* param0 = GetWeakObject<Entity>(ctx, 0);
    AttributeChange::Type param1 = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    wrapper->signal_->Emit(param0, param1);
    return 0;
}

static duk_ret_t Entity_Get_EntityRemoved(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    SignalWrapper_Entity_EntityRemoved* wrapper = new SignalWrapper_Entity_EntityRemoved(thisObj, &thisObj->EntityRemoved);
    PushValueObject(ctx, wrapper, SignalWrapper_Entity_EntityRemoved_ID, SignalWrapper_Entity_EntityRemoved_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Entity_EntityRemoved_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Entity_EntityRemoved_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Entity_EntityRemoved_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Entity_EntityRemoved_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Entity_EntityRemoved_Emit, 2);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Entity_TemporaryStateToggled_ID = "SignalWrapper_Entity_TemporaryStateToggled";

class SignalWrapper_Entity_TemporaryStateToggled
{
public:
    SignalWrapper_Entity_TemporaryStateToggled(Object* owner, Signal2< Entity *, AttributeChange::Type >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal2< Entity *, AttributeChange::Type >* signal_;
};

class SignalReceiver_Entity_TemporaryStateToggled : public SignalReceiver
{
public:
    void OnSignal(Entity * param0, AttributeChange::Type param1)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        duk_push_number(ctx, param1);
        duk_put_prop_index(ctx, -2, 1);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Entity_TemporaryStateToggled_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Entity_TemporaryStateToggled>(ctx, SignalWrapper_Entity_TemporaryStateToggled_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_TemporaryStateToggled_Connect(duk_context* ctx)
{
    SignalWrapper_Entity_TemporaryStateToggled* wrapper = GetThisValueObject<SignalWrapper_Entity_TemporaryStateToggled>(ctx, SignalWrapper_Entity_TemporaryStateToggled_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Entity_TemporaryStateToggled* receiver = new SignalReceiver_Entity_TemporaryStateToggled();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Entity_TemporaryStateToggled::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_TemporaryStateToggled_Disconnect(duk_context* ctx)
{
    SignalWrapper_Entity_TemporaryStateToggled* wrapper = GetThisValueObject<SignalWrapper_Entity_TemporaryStateToggled>(ctx, SignalWrapper_Entity_TemporaryStateToggled_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_TemporaryStateToggled_Emit(duk_context* ctx)
{
    SignalWrapper_Entity_TemporaryStateToggled* wrapper = GetThisValueObject<SignalWrapper_Entity_TemporaryStateToggled>(ctx, SignalWrapper_Entity_TemporaryStateToggled_ID);
    if (!wrapper->owner_) return 0;
    Entity* param0 = GetWeakObject<Entity>(ctx, 0);
    AttributeChange::Type param1 = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    wrapper->signal_->Emit(param0, param1);
    return 0;
}

static duk_ret_t Entity_Get_TemporaryStateToggled(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    SignalWrapper_Entity_TemporaryStateToggled* wrapper = new SignalWrapper_Entity_TemporaryStateToggled(thisObj, &thisObj->TemporaryStateToggled);
    PushValueObject(ctx, wrapper, SignalWrapper_Entity_TemporaryStateToggled_ID, SignalWrapper_Entity_TemporaryStateToggled_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Entity_TemporaryStateToggled_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Entity_TemporaryStateToggled_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Entity_TemporaryStateToggled_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Entity_TemporaryStateToggled_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Entity_TemporaryStateToggled_Emit, 2);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Entity_EnterView_ID = "SignalWrapper_Entity_EnterView";

class SignalWrapper_Entity_EnterView
{
public:
    SignalWrapper_Entity_EnterView(Object* owner, Signal1< IComponent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< IComponent * >* signal_;
};

class SignalReceiver_Entity_EnterView : public SignalReceiver
{
public:
    void OnSignal(IComponent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Entity_EnterView_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Entity_EnterView>(ctx, SignalWrapper_Entity_EnterView_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_EnterView_Connect(duk_context* ctx)
{
    SignalWrapper_Entity_EnterView* wrapper = GetThisValueObject<SignalWrapper_Entity_EnterView>(ctx, SignalWrapper_Entity_EnterView_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Entity_EnterView* receiver = new SignalReceiver_Entity_EnterView();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Entity_EnterView::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_EnterView_Disconnect(duk_context* ctx)
{
    SignalWrapper_Entity_EnterView* wrapper = GetThisValueObject<SignalWrapper_Entity_EnterView>(ctx, SignalWrapper_Entity_EnterView_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_EnterView_Emit(duk_context* ctx)
{
    SignalWrapper_Entity_EnterView* wrapper = GetThisValueObject<SignalWrapper_Entity_EnterView>(ctx, SignalWrapper_Entity_EnterView_ID);
    if (!wrapper->owner_) return 0;
    IComponent* param0 = GetWeakObject<IComponent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t Entity_Get_EnterView(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    SignalWrapper_Entity_EnterView* wrapper = new SignalWrapper_Entity_EnterView(thisObj, &thisObj->EnterView);
    PushValueObject(ctx, wrapper, SignalWrapper_Entity_EnterView_ID, SignalWrapper_Entity_EnterView_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Entity_EnterView_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Entity_EnterView_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Entity_EnterView_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Entity_EnterView_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Entity_EnterView_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Entity_LeaveView_ID = "SignalWrapper_Entity_LeaveView";

class SignalWrapper_Entity_LeaveView
{
public:
    SignalWrapper_Entity_LeaveView(Object* owner, Signal1< IComponent * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< IComponent * >* signal_;
};

class SignalReceiver_Entity_LeaveView : public SignalReceiver
{
public:
    void OnSignal(IComponent * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Entity_LeaveView_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Entity_LeaveView>(ctx, SignalWrapper_Entity_LeaveView_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_LeaveView_Connect(duk_context* ctx)
{
    SignalWrapper_Entity_LeaveView* wrapper = GetThisValueObject<SignalWrapper_Entity_LeaveView>(ctx, SignalWrapper_Entity_LeaveView_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Entity_LeaveView* receiver = new SignalReceiver_Entity_LeaveView();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Entity_LeaveView::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_LeaveView_Disconnect(duk_context* ctx)
{
    SignalWrapper_Entity_LeaveView* wrapper = GetThisValueObject<SignalWrapper_Entity_LeaveView>(ctx, SignalWrapper_Entity_LeaveView_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_LeaveView_Emit(duk_context* ctx)
{
    SignalWrapper_Entity_LeaveView* wrapper = GetThisValueObject<SignalWrapper_Entity_LeaveView>(ctx, SignalWrapper_Entity_LeaveView_ID);
    if (!wrapper->owner_) return 0;
    IComponent* param0 = GetWeakObject<IComponent>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t Entity_Get_LeaveView(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    SignalWrapper_Entity_LeaveView* wrapper = new SignalWrapper_Entity_LeaveView(thisObj, &thisObj->LeaveView);
    PushValueObject(ctx, wrapper, SignalWrapper_Entity_LeaveView_ID, SignalWrapper_Entity_LeaveView_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Entity_LeaveView_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Entity_LeaveView_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Entity_LeaveView_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Entity_LeaveView_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Entity_LeaveView_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Entity_ParentChanged_ID = "SignalWrapper_Entity_ParentChanged";

class SignalWrapper_Entity_ParentChanged
{
public:
    SignalWrapper_Entity_ParentChanged(Object* owner, Signal3< Entity *, Entity *, AttributeChange::Type >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal3< Entity *, Entity *, AttributeChange::Type >* signal_;
};

class SignalReceiver_Entity_ParentChanged : public SignalReceiver
{
public:
    void OnSignal(Entity * param0, Entity * param1, AttributeChange::Type param2)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        PushWeakObject(ctx, param1);
        duk_put_prop_index(ctx, -2, 1);
        duk_push_number(ctx, param2);
        duk_put_prop_index(ctx, -2, 2);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Entity_ParentChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Entity_ParentChanged>(ctx, SignalWrapper_Entity_ParentChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_ParentChanged_Connect(duk_context* ctx)
{
    SignalWrapper_Entity_ParentChanged* wrapper = GetThisValueObject<SignalWrapper_Entity_ParentChanged>(ctx, SignalWrapper_Entity_ParentChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Entity_ParentChanged* receiver = new SignalReceiver_Entity_ParentChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Entity_ParentChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_ParentChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_Entity_ParentChanged* wrapper = GetThisValueObject<SignalWrapper_Entity_ParentChanged>(ctx, SignalWrapper_Entity_ParentChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Entity_ParentChanged_Emit(duk_context* ctx)
{
    SignalWrapper_Entity_ParentChanged* wrapper = GetThisValueObject<SignalWrapper_Entity_ParentChanged>(ctx, SignalWrapper_Entity_ParentChanged_ID);
    if (!wrapper->owner_) return 0;
    Entity* param0 = GetWeakObject<Entity>(ctx, 0);
    Entity* param1 = GetWeakObject<Entity>(ctx, 1);
    AttributeChange::Type param2 = (AttributeChange::Type)(int)duk_require_number(ctx, 2);
    wrapper->signal_->Emit(param0, param1, param2);
    return 0;
}

static duk_ret_t Entity_Get_ParentChanged(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    SignalWrapper_Entity_ParentChanged* wrapper = new SignalWrapper_Entity_ParentChanged(thisObj, &thisObj->ParentChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_Entity_ParentChanged_ID, SignalWrapper_Entity_ParentChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Entity_ParentChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Entity_ParentChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Entity_ParentChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Entity_ParentChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Entity_ParentChanged_Emit, 3);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t Entity_SetGroup_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String groupName = duk_require_string(ctx, 0);
    thisObj->SetGroup(groupName);
    return 0;
}

static duk_ret_t Entity_Group(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String ret = thisObj->Group();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Entity_EmitEnterView_IComponent(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    IComponent* camera = GetWeakObject<IComponent>(ctx, 0);
    thisObj->EmitEnterView(camera);
    return 0;
}

static duk_ret_t Entity_EmitLeaveView_IComponent(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    IComponent* camera = GetWeakObject<IComponent>(ctx, 0);
    thisObj->EmitLeaveView(camera);
    return 0;
}

static duk_ret_t Entity_ChangeComponentId_component_id_t_component_id_t(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    component_id_t old_id = (component_id_t)duk_require_number(ctx, 0);
    component_id_t new_id = (component_id_t)duk_require_number(ctx, 1);
    thisObj->ChangeComponentId(old_id, new_id);
    return 0;
}

static duk_ret_t Entity_CreateComponentWithId_component_id_t_u32_String_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    component_id_t compId = (component_id_t)duk_require_number(ctx, 0);
    u32 typeId = (u32)duk_require_number(ctx, 1);
    String name = duk_require_string(ctx, 2);
    AttributeChange::Type change = numArgs > 3 ? (AttributeChange::Type)(int)duk_require_number(ctx, 3) : AttributeChange::Default;
    ComponentPtr ret = thisObj->CreateComponentWithId(compId, typeId, name, change);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Components(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    const Entity::ComponentMap & ret = thisObj->Components();
    PushWeakObjectMap(ctx, ret);
    return 1;
}

static duk_ret_t Entity_NumComponents(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    uint ret = thisObj->NumComponents();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Entity_ComponentById_component_id_t(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    component_id_t id = (component_id_t)duk_require_number(ctx, 0);
    ComponentPtr ret = thisObj->ComponentById(id);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Component_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName = duk_require_string(ctx, 0);
    ComponentPtr ret = thisObj->Component(typeName);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Component_u32(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    ComponentPtr ret = thisObj->Component(typeId);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Component_String_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName = duk_require_string(ctx, 0);
    String name = duk_require_string(ctx, 1);
    ComponentPtr ret = thisObj->Component(typeName, name);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Component_u32_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    String name = duk_require_string(ctx, 1);
    ComponentPtr ret = thisObj->Component(typeId, name);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_GetOrCreateComponent_String_AttributeChange__Type_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName = duk_require_string(ctx, 0);
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    bool replicated = numArgs > 2 ? duk_require_boolean(ctx, 2) : true;
    ComponentPtr ret = thisObj->GetOrCreateComponent(typeName, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_GetOrCreateComponent_String_String_AttributeChange__Type_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName = duk_require_string(ctx, 0);
    String name = duk_require_string(ctx, 1);
    AttributeChange::Type change = numArgs > 2 ? (AttributeChange::Type)(int)duk_require_number(ctx, 2) : AttributeChange::Default;
    bool replicated = numArgs > 3 ? duk_require_boolean(ctx, 3) : true;
    ComponentPtr ret = thisObj->GetOrCreateComponent(typeName, name, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_GetOrCreateComponent_u32_AttributeChange__Type_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    bool replicated = numArgs > 2 ? duk_require_boolean(ctx, 2) : true;
    ComponentPtr ret = thisObj->GetOrCreateComponent(typeId, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_GetOrCreateComponent_u32_String_AttributeChange__Type_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    String name = duk_require_string(ctx, 1);
    AttributeChange::Type change = numArgs > 2 ? (AttributeChange::Type)(int)duk_require_number(ctx, 2) : AttributeChange::Default;
    bool replicated = numArgs > 3 ? duk_require_boolean(ctx, 3) : true;
    ComponentPtr ret = thisObj->GetOrCreateComponent(typeId, name, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_GetOrCreateLocalComponent_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName = duk_require_string(ctx, 0);
    ComponentPtr ret = thisObj->GetOrCreateLocalComponent(typeName);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_GetOrCreateLocalComponent_String_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName = duk_require_string(ctx, 0);
    String name = duk_require_string(ctx, 1);
    ComponentPtr ret = thisObj->GetOrCreateLocalComponent(typeName, name);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_CreateComponent_String_AttributeChange__Type_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName = duk_require_string(ctx, 0);
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    bool replicated = numArgs > 2 ? duk_require_boolean(ctx, 2) : true;
    ComponentPtr ret = thisObj->CreateComponent(typeName, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_CreateComponent_String_String_AttributeChange__Type_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName = duk_require_string(ctx, 0);
    String name = duk_require_string(ctx, 1);
    AttributeChange::Type change = numArgs > 2 ? (AttributeChange::Type)(int)duk_require_number(ctx, 2) : AttributeChange::Default;
    bool replicated = numArgs > 3 ? duk_require_boolean(ctx, 3) : true;
    ComponentPtr ret = thisObj->CreateComponent(typeName, name, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_CreateComponent_u32_AttributeChange__Type_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    bool replicated = numArgs > 2 ? duk_require_boolean(ctx, 2) : true;
    ComponentPtr ret = thisObj->CreateComponent(typeId, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_CreateComponent_u32_String_AttributeChange__Type_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    String name = duk_require_string(ctx, 1);
    AttributeChange::Type change = numArgs > 2 ? (AttributeChange::Type)(int)duk_require_number(ctx, 2) : AttributeChange::Default;
    bool replicated = numArgs > 3 ? duk_require_boolean(ctx, 3) : true;
    ComponentPtr ret = thisObj->CreateComponent(typeId, name, change, replicated);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_CreateLocalComponent_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName = duk_require_string(ctx, 0);
    ComponentPtr ret = thisObj->CreateLocalComponent(typeName);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_CreateLocalComponent_String_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName = duk_require_string(ctx, 0);
    String name = duk_require_string(ctx, 1);
    ComponentPtr ret = thisObj->CreateLocalComponent(typeName, name);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_AddComponent_ComponentPtr_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    SharedPtr<IComponent> component(GetWeakObject<IComponent>(ctx, 0));
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    thisObj->AddComponent(component, change);
    return 0;
}

static duk_ret_t Entity_AddComponent_component_id_t_ComponentPtr_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    component_id_t id = (component_id_t)duk_require_number(ctx, 0);
    SharedPtr<IComponent> component(GetWeakObject<IComponent>(ctx, 1));
    AttributeChange::Type change = numArgs > 2 ? (AttributeChange::Type)(int)duk_require_number(ctx, 2) : AttributeChange::Default;
    thisObj->AddComponent(id, component, change);
    return 0;
}

static duk_ret_t Entity_RemoveComponent_ComponentPtr_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    SharedPtr<IComponent> component(GetWeakObject<IComponent>(ctx, 0));
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    thisObj->RemoveComponent(component, change);
    return 0;
}

static duk_ret_t Entity_RemoveComponent_String_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName = duk_require_string(ctx, 0);
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    thisObj->RemoveComponent(typeName, change);
    return 0;
}

static duk_ret_t Entity_RemoveComponent_String_String_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName = duk_require_string(ctx, 0);
    String name = duk_require_string(ctx, 1);
    AttributeChange::Type change = numArgs > 2 ? (AttributeChange::Type)(int)duk_require_number(ctx, 2) : AttributeChange::Default;
    thisObj->RemoveComponent(typeName, name, change);
    return 0;
}

static duk_ret_t Entity_RemoveComponentById_component_id_t_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    component_id_t id = (component_id_t)duk_require_number(ctx, 0);
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    thisObj->RemoveComponentById(id, change);
    return 0;
}

static duk_ret_t Entity_RemoveComponents_String_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName = duk_require_string(ctx, 0);
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    uint ret = thisObj->RemoveComponents(typeName, change);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Entity_RemoveComponents_u32_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    uint ret = thisObj->RemoveComponents(typeId, change);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Entity_RemoveAllComponents_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    AttributeChange::Type change = numArgs > 0 ? (AttributeChange::Type)(int)duk_require_number(ctx, 0) : AttributeChange::Default;
    thisObj->RemoveAllComponents(change);
    return 0;
}

static duk_ret_t Entity_ComponentsOfType_u32(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    u32 typeId = (u32)duk_require_number(ctx, 0);
    Entity::ComponentVector ret = thisObj->ComponentsOfType(typeId);
    PushWeakObjectVector(ctx, ret);
    return 1;
}

static duk_ret_t Entity_ComponentsOfType_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String typeName = duk_require_string(ctx, 0);
    Entity::ComponentVector ret = thisObj->ComponentsOfType(typeName);
    PushWeakObjectVector(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Clone_bool_bool_String_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool createAsLocal = duk_require_boolean(ctx, 0);
    bool createAsTemporary = duk_require_boolean(ctx, 1);
    String cloneName = numArgs > 2 ? duk_require_string(ctx, 2) : "";
    AttributeChange::Type changeType = numArgs > 3 ? (AttributeChange::Type)(int)duk_require_number(ctx, 3) : AttributeChange::Default;
    EntityPtr ret = thisObj->Clone(createAsLocal, createAsTemporary, cloneName, changeType);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_SerializeToXMLString_bool_bool_bool_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool serializeTemporary = numArgs > 0 ? duk_require_boolean(ctx, 0) : false;
    bool serializeLocal = numArgs > 1 ? duk_require_boolean(ctx, 1) : true;
    bool serializeChildren = numArgs > 2 ? duk_require_boolean(ctx, 2) : true;
    bool createSceneElement = numArgs > 3 ? duk_require_boolean(ctx, 3) : false;
    String ret = thisObj->SerializeToXMLString(serializeTemporary, serializeLocal, serializeChildren, createSceneElement);
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Entity_SetName_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String name = duk_require_string(ctx, 0);
    thisObj->SetName(name);
    return 0;
}

static duk_ret_t Entity_Name(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String ret = thisObj->Name();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Entity_SetDescription_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String desc = duk_require_string(ctx, 0);
    thisObj->SetDescription(desc);
    return 0;
}

static duk_ret_t Entity_Description(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String ret = thisObj->Description();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Entity_Action_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String name = duk_require_string(ctx, 0);
    EntityAction * ret = thisObj->Action(name);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_RemoveAction_String(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String name = duk_require_string(ctx, 0);
    thisObj->RemoveAction(name);
    return 0;
}

static duk_ret_t Entity_SetTemporary_bool_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    thisObj->SetTemporary(enable, change);
    return 0;
}

static duk_ret_t Entity_IsTemporary(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool ret = thisObj->IsTemporary();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Entity_IsLocal(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool ret = thisObj->IsLocal();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Entity_IsReplicated(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool ret = thisObj->IsReplicated();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Entity_IsUnacked(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool ret = thisObj->IsUnacked();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Entity_ToString(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String ret = thisObj->ToString();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Entity_Id(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    entity_id_t ret = thisObj->Id();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Entity_GetFramework(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    Framework * ret = thisObj->GetFramework();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_ParentScene(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    Scene * ret = thisObj->ParentScene();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_AddChild_EntityPtr_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    SharedPtr<Entity> child(GetWeakObject<Entity>(ctx, 0));
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    thisObj->AddChild(child, change);
    return 0;
}

static duk_ret_t Entity_RemoveChild_EntityPtr_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    SharedPtr<Entity> child(GetWeakObject<Entity>(ctx, 0));
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    thisObj->RemoveChild(child, change);
    return 0;
}

static duk_ret_t Entity_RemoveAllChildren_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    AttributeChange::Type change = numArgs > 0 ? (AttributeChange::Type)(int)duk_require_number(ctx, 0) : AttributeChange::Default;
    thisObj->RemoveAllChildren(change);
    return 0;
}

static duk_ret_t Entity_DetachChild_EntityPtr_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    SharedPtr<Entity> child(GetWeakObject<Entity>(ctx, 0));
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    thisObj->DetachChild(child, change);
    return 0;
}

static duk_ret_t Entity_SetParent_EntityPtr_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    SharedPtr<Entity> parent(GetWeakObject<Entity>(ctx, 0));
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    thisObj->SetParent(parent, change);
    return 0;
}

static duk_ret_t Entity_CreateChild_entity_id_t_StringVector_AttributeChange__Type_bool_bool_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    entity_id_t id = numArgs > 0 ? (entity_id_t)duk_require_number(ctx, 0) : 0;
    StringVector components = numArgs > 1 ? GetStringVector(ctx, 1) : StringVector();
    AttributeChange::Type change = numArgs > 2 ? (AttributeChange::Type)(int)duk_require_number(ctx, 2) : AttributeChange::Default;
    bool replicated = numArgs > 3 ? duk_require_boolean(ctx, 3) : true;
    bool componentsReplicated = numArgs > 4 ? duk_require_boolean(ctx, 4) : true;
    bool temporary = numArgs > 5 ? duk_require_boolean(ctx, 5) : false;
    EntityPtr ret = thisObj->CreateChild(id, components, change, replicated, componentsReplicated, temporary);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_CreateLocalChild_StringVector_AttributeChange__Type_bool_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    StringVector components = numArgs > 0 ? GetStringVector(ctx, 0) : StringVector();
    AttributeChange::Type change = numArgs > 1 ? (AttributeChange::Type)(int)duk_require_number(ctx, 1) : AttributeChange::Default;
    bool componentsReplicated = numArgs > 2 ? duk_require_boolean(ctx, 2) : false;
    bool temporary = numArgs > 3 ? duk_require_boolean(ctx, 3) : false;
    EntityPtr ret = thisObj->CreateLocalChild(components, change, componentsReplicated, temporary);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Parent(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    EntityPtr ret = thisObj->Parent();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_HasParent(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool ret = thisObj->HasParent();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Entity_NumChildren(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    uint ret = thisObj->NumChildren();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Child_uint(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    uint index = (uint)duk_require_number(ctx, 0);
    EntityPtr ret = thisObj->Child(index);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_ChildByName_String_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    String name = duk_require_string(ctx, 0);
    bool recursive = numArgs > 1 ? duk_require_boolean(ctx, 1) : false;
    EntityPtr ret = thisObj->ChildByName(name, recursive);
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Children_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool recursive = numArgs > 0 ? duk_require_boolean(ctx, 0) : false;
    EntityVector ret = thisObj->Children(recursive);
    PushWeakObjectVector(ctx, ret);
    return 1;
}

static duk_ret_t Entity_ShouldBeSerialized_bool_bool_bool(duk_context* ctx)
{
    Entity* thisObj = GetThisWeakObject<Entity>(ctx);
    bool serializeTemporary = duk_require_boolean(ctx, 0);
    bool serializeLocal = duk_require_boolean(ctx, 1);
    bool serializeChildren = duk_require_boolean(ctx, 2);
    bool ret = thisObj->ShouldBeSerialized(serializeTemporary, serializeLocal, serializeChildren);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Entity_Component_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_string(ctx, 0) && duk_is_string(ctx, 1))
        return Entity_Component_String_String(ctx);
    if (numArgs == 2 && duk_is_number(ctx, 0) && duk_is_string(ctx, 1))
        return Entity_Component_u32_String(ctx);
    if (numArgs == 1 && duk_is_string(ctx, 0))
        return Entity_Component_String(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return Entity_Component_u32(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_GetOrCreateComponent_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs >= 2 && duk_is_number(ctx, 0) && duk_is_string(ctx, 1))
        return Entity_GetOrCreateComponent_u32_String_AttributeChange__Type_bool(ctx);
    if (numArgs >= 2 && duk_is_string(ctx, 0) && duk_is_string(ctx, 1))
        return Entity_GetOrCreateComponent_String_String_AttributeChange__Type_bool(ctx);
    if (numArgs >= 1 && duk_is_string(ctx, 0))
        return Entity_GetOrCreateComponent_String_AttributeChange__Type_bool(ctx);
    if (numArgs >= 1 && duk_is_number(ctx, 0))
        return Entity_GetOrCreateComponent_u32_AttributeChange__Type_bool(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_GetOrCreateLocalComponent_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_string(ctx, 0) && duk_is_string(ctx, 1))
        return Entity_GetOrCreateLocalComponent_String_String(ctx);
    if (numArgs == 1 && duk_is_string(ctx, 0))
        return Entity_GetOrCreateLocalComponent_String(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_CreateComponent_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs >= 2 && duk_is_number(ctx, 0) && duk_is_string(ctx, 1))
        return Entity_CreateComponent_u32_String_AttributeChange__Type_bool(ctx);
    if (numArgs >= 2 && duk_is_string(ctx, 0) && duk_is_string(ctx, 1))
        return Entity_CreateComponent_String_String_AttributeChange__Type_bool(ctx);
    if (numArgs >= 1 && duk_is_string(ctx, 0))
        return Entity_CreateComponent_String_AttributeChange__Type_bool(ctx);
    if (numArgs >= 1 && duk_is_number(ctx, 0))
        return Entity_CreateComponent_u32_AttributeChange__Type_bool(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_CreateLocalComponent_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && duk_is_string(ctx, 0) && duk_is_string(ctx, 1))
        return Entity_CreateLocalComponent_String_String(ctx);
    if (numArgs == 1 && duk_is_string(ctx, 0))
        return Entity_CreateLocalComponent_String(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_AddComponent_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs >= 2 && duk_is_number(ctx, 0))
        return Entity_AddComponent_component_id_t_ComponentPtr_AttributeChange__Type(ctx);
    if (numArgs >= 1)
        return Entity_AddComponent_ComponentPtr_AttributeChange__Type(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_RemoveComponent_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs >= 2 && duk_is_string(ctx, 0) && duk_is_string(ctx, 1))
        return Entity_RemoveComponent_String_String_AttributeChange__Type(ctx);
    if (numArgs >= 1)
        return Entity_RemoveComponent_ComponentPtr_AttributeChange__Type(ctx);
    if (numArgs >= 1 && duk_is_string(ctx, 0))
        return Entity_RemoveComponent_String_AttributeChange__Type(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_RemoveComponents_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs >= 1 && duk_is_number(ctx, 0))
        return Entity_RemoveComponents_u32_AttributeChange__Type(ctx);
    if (numArgs >= 1 && duk_is_string(ctx, 0))
        return Entity_RemoveComponents_String_AttributeChange__Type(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Entity_ComponentsOfType_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1 && duk_is_string(ctx, 0))
        return Entity_ComponentsOfType_String(ctx);
    if (numArgs == 1 && duk_is_number(ctx, 0))
        return Entity_ComponentsOfType_u32(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static const duk_function_list_entry Entity_Functions[] = {
    {"SetGroup", Entity_SetGroup_String, 1}
    ,{"Group", Entity_Group, 0}
    ,{"EmitEnterView", Entity_EmitEnterView_IComponent, 1}
    ,{"EmitLeaveView", Entity_EmitLeaveView_IComponent, 1}
    ,{"ChangeComponentId", Entity_ChangeComponentId_component_id_t_component_id_t, 2}
    ,{"CreateComponentWithId", Entity_CreateComponentWithId_component_id_t_u32_String_AttributeChange__Type, DUK_VARARGS}
    ,{"Components", Entity_Components, 0}
    ,{"NumComponents", Entity_NumComponents, 0}
    ,{"ComponentById", Entity_ComponentById_component_id_t, 1}
    ,{"Component", Entity_Component_Selector, DUK_VARARGS}
    ,{"GetOrCreateComponent", Entity_GetOrCreateComponent_Selector, DUK_VARARGS}
    ,{"GetOrCreateLocalComponent", Entity_GetOrCreateLocalComponent_Selector, DUK_VARARGS}
    ,{"CreateComponent", Entity_CreateComponent_Selector, DUK_VARARGS}
    ,{"CreateLocalComponent", Entity_CreateLocalComponent_Selector, DUK_VARARGS}
    ,{"AddComponent", Entity_AddComponent_Selector, DUK_VARARGS}
    ,{"RemoveComponent", Entity_RemoveComponent_Selector, DUK_VARARGS}
    ,{"RemoveComponentById", Entity_RemoveComponentById_component_id_t_AttributeChange__Type, DUK_VARARGS}
    ,{"RemoveComponents", Entity_RemoveComponents_Selector, DUK_VARARGS}
    ,{"RemoveAllComponents", Entity_RemoveAllComponents_AttributeChange__Type, DUK_VARARGS}
    ,{"ComponentsOfType", Entity_ComponentsOfType_Selector, DUK_VARARGS}
    ,{"Clone", Entity_Clone_bool_bool_String_AttributeChange__Type, DUK_VARARGS}
    ,{"SerializeToXMLString", Entity_SerializeToXMLString_bool_bool_bool_bool, DUK_VARARGS}
    ,{"SetName", Entity_SetName_String, 1}
    ,{"Name", Entity_Name, 0}
    ,{"SetDescription", Entity_SetDescription_String, 1}
    ,{"Description", Entity_Description, 0}
    ,{"Action", Entity_Action_String, 1}
    ,{"RemoveAction", Entity_RemoveAction_String, 1}
    ,{"SetTemporary", Entity_SetTemporary_bool_AttributeChange__Type, DUK_VARARGS}
    ,{"IsTemporary", Entity_IsTemporary, 0}
    ,{"IsLocal", Entity_IsLocal, 0}
    ,{"IsReplicated", Entity_IsReplicated, 0}
    ,{"IsUnacked", Entity_IsUnacked, 0}
    ,{"ToString", Entity_ToString, 0}
    ,{"Id", Entity_Id, 0}
    ,{"GetFramework", Entity_GetFramework, 0}
    ,{"ParentScene", Entity_ParentScene, 0}
    ,{"AddChild", Entity_AddChild_EntityPtr_AttributeChange__Type, DUK_VARARGS}
    ,{"RemoveChild", Entity_RemoveChild_EntityPtr_AttributeChange__Type, DUK_VARARGS}
    ,{"RemoveAllChildren", Entity_RemoveAllChildren_AttributeChange__Type, DUK_VARARGS}
    ,{"DetachChild", Entity_DetachChild_EntityPtr_AttributeChange__Type, DUK_VARARGS}
    ,{"SetParent", Entity_SetParent_EntityPtr_AttributeChange__Type, DUK_VARARGS}
    ,{"CreateChild", Entity_CreateChild_entity_id_t_StringVector_AttributeChange__Type_bool_bool_bool, DUK_VARARGS}
    ,{"CreateLocalChild", Entity_CreateLocalChild_StringVector_AttributeChange__Type_bool_bool, DUK_VARARGS}
    ,{"Parent", Entity_Parent, 0}
    ,{"HasParent", Entity_HasParent, 0}
    ,{"NumChildren", Entity_NumChildren, 0}
    ,{"Child", Entity_Child_uint, 1}
    ,{"ChildByName", Entity_ChildByName_String_bool, DUK_VARARGS}
    ,{"Children", Entity_Children_bool, DUK_VARARGS}
    ,{"ShouldBeSerialized", Entity_ShouldBeSerialized_bool_bool_bool, 3}
    ,{nullptr, nullptr, 0}
};

void Expose_Entity(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Entity_Functions);
    DefineProperty(ctx, "ComponentAdded", Entity_Get_ComponentAdded, nullptr);
    DefineProperty(ctx, "ComponentRemoved", Entity_Get_ComponentRemoved, nullptr);
    DefineProperty(ctx, "EntityRemoved", Entity_Get_EntityRemoved, nullptr);
    DefineProperty(ctx, "TemporaryStateToggled", Entity_Get_TemporaryStateToggled, nullptr);
    DefineProperty(ctx, "EnterView", Entity_Get_EnterView, nullptr);
    DefineProperty(ctx, "LeaveView", Entity_Get_LeaveView, nullptr);
    DefineProperty(ctx, "ParentChanged", Entity_Get_ParentChanged, nullptr);
    DefineProperty(ctx, "group", Entity_Group, Entity_SetGroup_String);
    DefineProperty(ctx, "components", Entity_Components, nullptr);
    DefineProperty(ctx, "numComponents", Entity_NumComponents, nullptr);
    DefineProperty(ctx, "name", Entity_Name, Entity_SetName_String);
    DefineProperty(ctx, "description", Entity_Description, Entity_SetDescription_String);
    DefineProperty(ctx, "temporary", Entity_IsTemporary, nullptr);
    DefineProperty(ctx, "local", Entity_IsLocal, nullptr);
    DefineProperty(ctx, "replicated", Entity_IsReplicated, nullptr);
    DefineProperty(ctx, "unacked", Entity_IsUnacked, nullptr);
    DefineProperty(ctx, "id", Entity_Id, nullptr);
    DefineProperty(ctx, "parent", Entity_Parent, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, Entity_ID);
}

}
