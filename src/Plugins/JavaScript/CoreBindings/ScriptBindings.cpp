// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "Script/Script.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Scene/Entity.h"
#include "Framework/Framework.h"
#include "Scene/Scene.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{



static const char* Script_ID = "Script";

const char* SignalWrapper_Script_ScriptAssetsChanged_ID = "SignalWrapper_Script_ScriptAssetsChanged";

class SignalWrapper_Script_ScriptAssetsChanged
{
public:
    SignalWrapper_Script_ScriptAssetsChanged(Object* owner, Signal2< Script *, const Vector< ScriptAssetPtr > & >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal2< Script *, const Vector< ScriptAssetPtr > & >* signal_;
};

class SignalReceiver_Script_ScriptAssetsChanged : public SignalReceiver
{
public:
    void OnSignal(Script * param0, const Vector< ScriptAssetPtr > & param1)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Script_ScriptAssetsChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Script_ScriptAssetsChanged>(ctx, SignalWrapper_Script_ScriptAssetsChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ScriptAssetsChanged_Connect(duk_context* ctx)
{
    SignalWrapper_Script_ScriptAssetsChanged* wrapper = GetThisValueObject<SignalWrapper_Script_ScriptAssetsChanged>(ctx, SignalWrapper_Script_ScriptAssetsChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Script_ScriptAssetsChanged* receiver = new SignalReceiver_Script_ScriptAssetsChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Script_ScriptAssetsChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ScriptAssetsChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_Script_ScriptAssetsChanged* wrapper = GetThisValueObject<SignalWrapper_Script_ScriptAssetsChanged>(ctx, SignalWrapper_Script_ScriptAssetsChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t Script_Get_ScriptAssetsChanged(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    SignalWrapper_Script_ScriptAssetsChanged* wrapper = new SignalWrapper_Script_ScriptAssetsChanged(thisObj, &thisObj->ScriptAssetsChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_Script_ScriptAssetsChanged_ID, SignalWrapper_Script_ScriptAssetsChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Script_ScriptAssetsChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Script_ScriptAssetsChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Script_ScriptAssetsChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Script_ScriptAssetsChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    return 1;
}

const char* SignalWrapper_Script_ApplicationNameChanged_ID = "SignalWrapper_Script_ApplicationNameChanged";

class SignalWrapper_Script_ApplicationNameChanged
{
public:
    SignalWrapper_Script_ApplicationNameChanged(Object* owner, Signal2< Script *, const String & >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal2< Script *, const String & >* signal_;
};

class SignalReceiver_Script_ApplicationNameChanged : public SignalReceiver
{
public:
    void OnSignal(Script * param0, const String & param1)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        duk_push_string(ctx, param1.CString());
        duk_put_prop_index(ctx, -2, 1);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Script_ApplicationNameChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Script_ApplicationNameChanged>(ctx, SignalWrapper_Script_ApplicationNameChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ApplicationNameChanged_Connect(duk_context* ctx)
{
    SignalWrapper_Script_ApplicationNameChanged* wrapper = GetThisValueObject<SignalWrapper_Script_ApplicationNameChanged>(ctx, SignalWrapper_Script_ApplicationNameChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Script_ApplicationNameChanged* receiver = new SignalReceiver_Script_ApplicationNameChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Script_ApplicationNameChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ApplicationNameChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_Script_ApplicationNameChanged* wrapper = GetThisValueObject<SignalWrapper_Script_ApplicationNameChanged>(ctx, SignalWrapper_Script_ApplicationNameChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ApplicationNameChanged_Emit(duk_context* ctx)
{
    SignalWrapper_Script_ApplicationNameChanged* wrapper = GetThisValueObject<SignalWrapper_Script_ApplicationNameChanged>(ctx, SignalWrapper_Script_ApplicationNameChanged_ID);
    if (!wrapper->owner_) return 0;
    Script* param0 = GetWeakObject<Script>(ctx, 0);
    String param1 = duk_require_string(ctx, 1);
    wrapper->signal_->Emit(param0, param1);
    return 0;
}

static duk_ret_t Script_Get_ApplicationNameChanged(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    SignalWrapper_Script_ApplicationNameChanged* wrapper = new SignalWrapper_Script_ApplicationNameChanged(thisObj, &thisObj->ApplicationNameChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_Script_ApplicationNameChanged_ID, SignalWrapper_Script_ApplicationNameChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Script_ApplicationNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Script_ApplicationNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Script_ApplicationNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Script_ApplicationNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Script_ApplicationNameChanged_Emit, 2);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Script_ClassNameChanged_ID = "SignalWrapper_Script_ClassNameChanged";

class SignalWrapper_Script_ClassNameChanged
{
public:
    SignalWrapper_Script_ClassNameChanged(Object* owner, Signal2< Script *, const String & >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal2< Script *, const String & >* signal_;
};

class SignalReceiver_Script_ClassNameChanged : public SignalReceiver
{
public:
    void OnSignal(Script * param0, const String & param1)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        duk_push_string(ctx, param1.CString());
        duk_put_prop_index(ctx, -2, 1);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Script_ClassNameChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Script_ClassNameChanged>(ctx, SignalWrapper_Script_ClassNameChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ClassNameChanged_Connect(duk_context* ctx)
{
    SignalWrapper_Script_ClassNameChanged* wrapper = GetThisValueObject<SignalWrapper_Script_ClassNameChanged>(ctx, SignalWrapper_Script_ClassNameChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Script_ClassNameChanged* receiver = new SignalReceiver_Script_ClassNameChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Script_ClassNameChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ClassNameChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_Script_ClassNameChanged* wrapper = GetThisValueObject<SignalWrapper_Script_ClassNameChanged>(ctx, SignalWrapper_Script_ClassNameChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ClassNameChanged_Emit(duk_context* ctx)
{
    SignalWrapper_Script_ClassNameChanged* wrapper = GetThisValueObject<SignalWrapper_Script_ClassNameChanged>(ctx, SignalWrapper_Script_ClassNameChanged_ID);
    if (!wrapper->owner_) return 0;
    Script* param0 = GetWeakObject<Script>(ctx, 0);
    String param1 = duk_require_string(ctx, 1);
    wrapper->signal_->Emit(param0, param1);
    return 0;
}

static duk_ret_t Script_Get_ClassNameChanged(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    SignalWrapper_Script_ClassNameChanged* wrapper = new SignalWrapper_Script_ClassNameChanged(thisObj, &thisObj->ClassNameChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_Script_ClassNameChanged_ID, SignalWrapper_Script_ClassNameChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Script_ClassNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Script_ClassNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Script_ClassNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Script_ClassNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Script_ClassNameChanged_Emit, 2);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Script_ComponentNameChanged_ID = "SignalWrapper_Script_ComponentNameChanged";

class SignalWrapper_Script_ComponentNameChanged
{
public:
    SignalWrapper_Script_ComponentNameChanged(Object* owner, Signal2< const String &, const String & >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal2< const String &, const String & >* signal_;
};

class SignalReceiver_Script_ComponentNameChanged : public SignalReceiver
{
public:
    void OnSignal(const String & param0, const String & param1)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        duk_push_string(ctx, param0.CString());
        duk_put_prop_index(ctx, -2, 0);
        duk_push_string(ctx, param1.CString());
        duk_put_prop_index(ctx, -2, 1);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Script_ComponentNameChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Script_ComponentNameChanged>(ctx, SignalWrapper_Script_ComponentNameChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ComponentNameChanged_Connect(duk_context* ctx)
{
    SignalWrapper_Script_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_Script_ComponentNameChanged>(ctx, SignalWrapper_Script_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Script_ComponentNameChanged* receiver = new SignalReceiver_Script_ComponentNameChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Script_ComponentNameChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ComponentNameChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_Script_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_Script_ComponentNameChanged>(ctx, SignalWrapper_Script_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ComponentNameChanged_Emit(duk_context* ctx)
{
    SignalWrapper_Script_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_Script_ComponentNameChanged>(ctx, SignalWrapper_Script_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    String param0 = duk_require_string(ctx, 0);
    String param1 = duk_require_string(ctx, 1);
    wrapper->signal_->Emit(param0, param1);
    return 0;
}

static duk_ret_t Script_Get_ComponentNameChanged(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    SignalWrapper_Script_ComponentNameChanged* wrapper = new SignalWrapper_Script_ComponentNameChanged(thisObj, &thisObj->ComponentNameChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_Script_ComponentNameChanged_ID, SignalWrapper_Script_ComponentNameChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Script_ComponentNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Script_ComponentNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Script_ComponentNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Script_ComponentNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Script_ComponentNameChanged_Emit, 2);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Script_ParentEntitySet_ID = "SignalWrapper_Script_ParentEntitySet";

class SignalWrapper_Script_ParentEntitySet
{
public:
    SignalWrapper_Script_ParentEntitySet(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_Script_ParentEntitySet : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Script_ParentEntitySet_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Script_ParentEntitySet>(ctx, SignalWrapper_Script_ParentEntitySet_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ParentEntitySet_Connect(duk_context* ctx)
{
    SignalWrapper_Script_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_Script_ParentEntitySet>(ctx, SignalWrapper_Script_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Script_ParentEntitySet* receiver = new SignalReceiver_Script_ParentEntitySet();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Script_ParentEntitySet::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ParentEntitySet_Disconnect(duk_context* ctx)
{
    SignalWrapper_Script_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_Script_ParentEntitySet>(ctx, SignalWrapper_Script_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ParentEntitySet_Emit(duk_context* ctx)
{
    SignalWrapper_Script_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_Script_ParentEntitySet>(ctx, SignalWrapper_Script_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t Script_Get_ParentEntitySet(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    SignalWrapper_Script_ParentEntitySet* wrapper = new SignalWrapper_Script_ParentEntitySet(thisObj, &thisObj->ParentEntitySet);
    PushValueObject(ctx, wrapper, SignalWrapper_Script_ParentEntitySet_ID, SignalWrapper_Script_ParentEntitySet_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Script_ParentEntitySet_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Script_ParentEntitySet_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Script_ParentEntitySet_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Script_ParentEntitySet_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Script_ParentEntitySet_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Script_ParentEntityAboutToBeDetached_ID = "SignalWrapper_Script_ParentEntityAboutToBeDetached";

class SignalWrapper_Script_ParentEntityAboutToBeDetached
{
public:
    SignalWrapper_Script_ParentEntityAboutToBeDetached(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_Script_ParentEntityAboutToBeDetached : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Script_ParentEntityAboutToBeDetached_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Script_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Script_ParentEntityAboutToBeDetached_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ParentEntityAboutToBeDetached_Connect(duk_context* ctx)
{
    SignalWrapper_Script_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_Script_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Script_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Script_ParentEntityAboutToBeDetached* receiver = new SignalReceiver_Script_ParentEntityAboutToBeDetached();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Script_ParentEntityAboutToBeDetached::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ParentEntityAboutToBeDetached_Disconnect(duk_context* ctx)
{
    SignalWrapper_Script_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_Script_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Script_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Script_ParentEntityAboutToBeDetached_Emit(duk_context* ctx)
{
    SignalWrapper_Script_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_Script_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Script_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t Script_Get_ParentEntityAboutToBeDetached(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    SignalWrapper_Script_ParentEntityAboutToBeDetached* wrapper = new SignalWrapper_Script_ParentEntityAboutToBeDetached(thisObj, &thisObj->ParentEntityAboutToBeDetached);
    PushValueObject(ctx, wrapper, SignalWrapper_Script_ParentEntityAboutToBeDetached_ID, SignalWrapper_Script_ParentEntityAboutToBeDetached_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Script_ParentEntityAboutToBeDetached_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Script_ParentEntityAboutToBeDetached_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Script_ParentEntityAboutToBeDetached_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Script_ParentEntityAboutToBeDetached_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Script_ParentEntityAboutToBeDetached_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t Script_SetScriptApplication_Script(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    Script* app = GetWeakObject<Script>(ctx, 0);
    thisObj->SetScriptApplication(app);
    return 0;
}

static duk_ret_t Script_ScriptApplication(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    Script * ret = thisObj->ScriptApplication();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Script_SetIsClientIsServer_bool_bool(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    bool isClient = duk_require_boolean(ctx, 0);
    bool isServer = duk_require_boolean(ctx, 1);
    thisObj->SetIsClientIsServer(isClient, isServer);
    return 0;
}

static duk_ret_t Script_Run_String(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    String name = numArgs > 0 ? duk_require_string(ctx, 0) : String();
    thisObj->Run(name);
    return 0;
}

static duk_ret_t Script_Unload_String(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    String name = numArgs > 0 ? duk_require_string(ctx, 0) : String();
    thisObj->Unload(name);
    return 0;
}

static duk_ret_t Script_ShouldRun(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    bool ret = thisObj->ShouldRun();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Script_TypeName(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    const String & ret = thisObj->TypeName();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Script_TypeId(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    u32 ret = thisObj->TypeId();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Script_Name(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    const String & ret = thisObj->Name();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Script_SetName_String(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    String name = duk_require_string(ctx, 0);
    thisObj->SetName(name);
    return 0;
}

static duk_ret_t Script_SetParentEntity_Entity(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    thisObj->SetParentEntity(entity);
    return 0;
}

static duk_ret_t Script_SetReplicated_bool(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    thisObj->SetReplicated(enable);
    return 0;
}

static duk_ret_t Script_GetFramework(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    Framework * ret = thisObj->GetFramework();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Script_IsReplicated(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    bool ret = thisObj->IsReplicated();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Script_IsLocal(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    bool ret = thisObj->IsLocal();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Script_IsUnacked(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    bool ret = thisObj->IsUnacked();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Script_SetUpdateMode_AttributeChange__Type(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    AttributeChange::Type defaultmode = (AttributeChange::Type)(int)duk_require_number(ctx, 0);
    thisObj->SetUpdateMode(defaultmode);
    return 0;
}

static duk_ret_t Script_UpdateMode(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    AttributeChange::Type ret = thisObj->UpdateMode();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Script_Id(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    component_id_t ret = thisObj->Id();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Script_SupportsDynamicAttributes(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    bool ret = thisObj->SupportsDynamicAttributes();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Script_NumAttributes(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    int ret = thisObj->NumAttributes();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Script_NumStaticAttributes(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    int ret = thisObj->NumStaticAttributes();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Script_EmitAttributeChanged_String_AttributeChange__Type(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    String attributeName = duk_require_string(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->EmitAttributeChanged(attributeName, change);
    return 0;
}

static duk_ret_t Script_ComponentChanged_AttributeChange__Type(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 0);
    thisObj->ComponentChanged(change);
    return 0;
}

static duk_ret_t Script_ParentEntity(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    Entity * ret = thisObj->ParentEntity();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Script_ParentScene(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    Scene * ret = thisObj->ParentScene();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Script_SetTemporary_bool(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    thisObj->SetTemporary(enable);
    return 0;
}

static duk_ret_t Script_IsTemporary(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    bool ret = thisObj->IsTemporary();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Script_ViewEnabled(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    bool ret = thisObj->ViewEnabled();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Script_AttributeNames(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    StringVector ret = thisObj->AttributeNames();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t Script_AttributeIds(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    StringVector ret = thisObj->AttributeIds();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t Script_ShouldBeSerialized_bool_bool(duk_context* ctx)
{
    Script* thisObj = GetThisWeakObject<Script>(ctx);
    bool serializeTemporary = duk_require_boolean(ctx, 0);
    bool serializeLocal = duk_require_boolean(ctx, 1);
    bool ret = thisObj->ShouldBeSerialized(serializeTemporary, serializeLocal);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Script_EnsureTypeNameWithoutPrefix_Static_String(duk_context* ctx)
{
    String tn = duk_require_string(ctx, 0);
    String ret = Script::EnsureTypeNameWithoutPrefix(tn);
    duk_push_string(ctx, ret.CString());
    return 1;
}

static const duk_function_list_entry Script_Functions[] = {
    {"SetScriptApplication", Script_SetScriptApplication_Script, 1}
    ,{"ScriptApplication", Script_ScriptApplication, 0}
    ,{"SetIsClientIsServer", Script_SetIsClientIsServer_bool_bool, 2}
    ,{"Run", Script_Run_String, DUK_VARARGS}
    ,{"Unload", Script_Unload_String, DUK_VARARGS}
    ,{"ShouldRun", Script_ShouldRun, 0}
    ,{"TypeName", Script_TypeName, 0}
    ,{"TypeId", Script_TypeId, 0}
    ,{"Name", Script_Name, 0}
    ,{"SetName", Script_SetName_String, 1}
    ,{"SetParentEntity", Script_SetParentEntity_Entity, 1}
    ,{"SetReplicated", Script_SetReplicated_bool, 1}
    ,{"GetFramework", Script_GetFramework, 0}
    ,{"IsReplicated", Script_IsReplicated, 0}
    ,{"IsLocal", Script_IsLocal, 0}
    ,{"IsUnacked", Script_IsUnacked, 0}
    ,{"SetUpdateMode", Script_SetUpdateMode_AttributeChange__Type, 1}
    ,{"UpdateMode", Script_UpdateMode, 0}
    ,{"Id", Script_Id, 0}
    ,{"SupportsDynamicAttributes", Script_SupportsDynamicAttributes, 0}
    ,{"NumAttributes", Script_NumAttributes, 0}
    ,{"NumStaticAttributes", Script_NumStaticAttributes, 0}
    ,{"EmitAttributeChanged", Script_EmitAttributeChanged_String_AttributeChange__Type, 2}
    ,{"ComponentChanged", Script_ComponentChanged_AttributeChange__Type, 1}
    ,{"ParentEntity", Script_ParentEntity, 0}
    ,{"ParentScene", Script_ParentScene, 0}
    ,{"SetTemporary", Script_SetTemporary_bool, 1}
    ,{"IsTemporary", Script_IsTemporary, 0}
    ,{"ViewEnabled", Script_ViewEnabled, 0}
    ,{"AttributeNames", Script_AttributeNames, 0}
    ,{"AttributeIds", Script_AttributeIds, 0}
    ,{"ShouldBeSerialized", Script_ShouldBeSerialized_bool_bool, 2}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry Script_StaticFunctions[] = {
    {"EnsureTypeNameWithoutPrefix", Script_EnsureTypeNameWithoutPrefix_Static_String, 1}
    ,{nullptr, nullptr, 0}
};

void Expose_Script(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Script_StaticFunctions);
    duk_push_number(ctx, 0);
    duk_put_prop_string(ctx, -2, "RunOnBoth");
    duk_push_number(ctx, 1);
    duk_put_prop_string(ctx, -2, "RunOnClient");
    duk_push_number(ctx, 2);
    duk_put_prop_string(ctx, -2, "RunOnServer");
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Script_Functions);
    DefineProperty(ctx, "ScriptAssetsChanged", Script_Get_ScriptAssetsChanged, nullptr);
    DefineProperty(ctx, "ApplicationNameChanged", Script_Get_ApplicationNameChanged, nullptr);
    DefineProperty(ctx, "ClassNameChanged", Script_Get_ClassNameChanged, nullptr);
    DefineProperty(ctx, "ComponentNameChanged", Script_Get_ComponentNameChanged, nullptr);
    DefineProperty(ctx, "ParentEntitySet", Script_Get_ParentEntitySet, nullptr);
    DefineProperty(ctx, "ParentEntityAboutToBeDetached", Script_Get_ParentEntityAboutToBeDetached, nullptr);
    DefineProperty(ctx, "typeName", Script_TypeName, nullptr);
    DefineProperty(ctx, "typeId", Script_TypeId, nullptr);
    DefineProperty(ctx, "name", Script_Name, Script_SetName_String);
    DefineProperty(ctx, "replicated", Script_IsReplicated, Script_SetReplicated_bool);
    DefineProperty(ctx, "local", Script_IsLocal, nullptr);
    DefineProperty(ctx, "unacked", Script_IsUnacked, nullptr);
    DefineProperty(ctx, "updateMode", Script_UpdateMode, Script_SetUpdateMode_AttributeChange__Type);
    DefineProperty(ctx, "id", Script_Id, nullptr);
    DefineProperty(ctx, "temporary", Script_IsTemporary, Script_SetTemporary_bool);
    DefineProperty(ctx, "viewEnabled", Script_ViewEnabled, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, Script_ID);
}

}
