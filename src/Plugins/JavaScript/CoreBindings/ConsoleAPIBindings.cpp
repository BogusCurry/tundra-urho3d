// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "Console/ConsoleAPI.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Framework/Framework.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{



static const char* ConsoleAPI_ID = "ConsoleAPI";

static duk_ret_t ConsoleAPI_UnregisterCommand_String(duk_context* ctx)
{
    ConsoleAPI* thisObj = GetThisWeakObject<ConsoleAPI>(ctx);
    String name = duk_require_string(ctx, 0);
    thisObj->UnregisterCommand(name);
    return 0;
}

static duk_ret_t ConsoleAPI_ExecuteCommand_String(duk_context* ctx)
{
    ConsoleAPI* thisObj = GetThisWeakObject<ConsoleAPI>(ctx);
    String command = duk_require_string(ctx, 0);
    thisObj->ExecuteCommand(command);
    return 0;
}

static duk_ret_t ConsoleAPI_ListCommands(duk_context* ctx)
{
    ConsoleAPI* thisObj = GetThisWeakObject<ConsoleAPI>(ctx);
    thisObj->ListCommands();
    return 0;
}

static duk_ret_t ConsoleAPI_AvailableCommands(duk_context* ctx)
{
    ConsoleAPI* thisObj = GetThisWeakObject<ConsoleAPI>(ctx);
    StringVector ret = thisObj->AvailableCommands();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t ConsoleAPI_SetConsoleVisible_bool(duk_context* ctx)
{
    ConsoleAPI* thisObj = GetThisWeakObject<ConsoleAPI>(ctx);
    bool visible = duk_require_boolean(ctx, 0);
    thisObj->SetConsoleVisible(visible);
    return 0;
}

static duk_ret_t ConsoleAPI_ToggleConsole(duk_context* ctx)
{
    ConsoleAPI* thisObj = GetThisWeakObject<ConsoleAPI>(ctx);
    thisObj->ToggleConsole();
    return 0;
}

static duk_ret_t ConsoleAPI_ClearConsole(duk_context* ctx)
{
    ConsoleAPI* thisObj = GetThisWeakObject<ConsoleAPI>(ctx);
    thisObj->ClearConsole();
    return 0;
}

static duk_ret_t ConsoleAPI_Print_String(duk_context* ctx)
{
    ConsoleAPI* thisObj = GetThisWeakObject<ConsoleAPI>(ctx);
    String message = duk_require_string(ctx, 0);
    thisObj->Print(message);
    return 0;
}

static duk_ret_t ConsoleAPI_SetLogLevel_String(duk_context* ctx)
{
    ConsoleAPI* thisObj = GetThisWeakObject<ConsoleAPI>(ctx);
    String level = duk_require_string(ctx, 0);
    thisObj->SetLogLevel(level);
    return 0;
}

static const duk_function_list_entry ConsoleAPI_Functions[] = {
    {"UnregisterCommand", ConsoleAPI_UnregisterCommand_String, 1}
    ,{"ExecuteCommand", ConsoleAPI_ExecuteCommand_String, 1}
    ,{"ListCommands", ConsoleAPI_ListCommands, 0}
    ,{"AvailableCommands", ConsoleAPI_AvailableCommands, 0}
    ,{"SetConsoleVisible", ConsoleAPI_SetConsoleVisible_bool, 1}
    ,{"ToggleConsole", ConsoleAPI_ToggleConsole, 0}
    ,{"ClearConsole", ConsoleAPI_ClearConsole, 0}
    ,{"Print", ConsoleAPI_Print_String, 1}
    ,{"SetLogLevel", ConsoleAPI_SetLogLevel_String, 1}
    ,{nullptr, nullptr, 0}
};

void Expose_ConsoleAPI(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, ConsoleAPI_Functions);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, ConsoleAPI_ID);
}

}
