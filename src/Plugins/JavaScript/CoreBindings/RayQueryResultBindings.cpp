// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "IRenderer.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Scene/Entity.h"
#include "Scene/IComponent.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{

static const char* float3_ID = "float3";
static const char* float2_ID = "float2";

static duk_ret_t float3_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<float3>(ctx, float3_ID);
    return 0;
}

static duk_ret_t float2_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<float2>(ctx, float2_ID);
    return 0;
}


static const char* RayQueryResult_ID = "RayQueryResult";

static duk_ret_t RayQueryResult_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    return 0;
}

static duk_ret_t RayQueryResult_Set_entity(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    thisObj->entity = entity;
    return 0;
}

static duk_ret_t RayQueryResult_Get_entity(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    PushWeakObject(ctx, thisObj->entity);
    return 1;
}

static duk_ret_t RayQueryResult_Set_component(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    IComponent* component = GetWeakObject<IComponent>(ctx, 0);
    thisObj->component = component;
    return 0;
}

static duk_ret_t RayQueryResult_Get_component(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    PushWeakObject(ctx, thisObj->component);
    return 1;
}

static duk_ret_t RayQueryResult_Set_pos(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    float3& pos = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->pos = pos;
    return 0;
}

static duk_ret_t RayQueryResult_Get_pos(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    PushValueObject<float3>(ctx, &thisObj->pos, float3_ID, nullptr, true);
    return 1;
}

static duk_ret_t RayQueryResult_Set_normal(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    float3& normal = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->normal = normal;
    return 0;
}

static duk_ret_t RayQueryResult_Get_normal(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    PushValueObject<float3>(ctx, &thisObj->normal, float3_ID, nullptr, true);
    return 1;
}

static duk_ret_t RayQueryResult_Set_submeshIndex(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    unsigned submeshIndex = (unsigned)duk_require_number(ctx, 0);
    thisObj->submeshIndex = submeshIndex;
    return 0;
}

static duk_ret_t RayQueryResult_Get_submeshIndex(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    duk_push_number(ctx, thisObj->submeshIndex);
    return 1;
}

static duk_ret_t RayQueryResult_Set_triangleIndex(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    unsigned triangleIndex = (unsigned)duk_require_number(ctx, 0);
    thisObj->triangleIndex = triangleIndex;
    return 0;
}

static duk_ret_t RayQueryResult_Get_triangleIndex(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    duk_push_number(ctx, thisObj->triangleIndex);
    return 1;
}

static duk_ret_t RayQueryResult_Set_uv(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    float2& uv = *GetCheckedValueObject<float2>(ctx, 0, float2_ID);
    thisObj->uv = uv;
    return 0;
}

static duk_ret_t RayQueryResult_Get_uv(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    PushValueObject<float2>(ctx, &thisObj->uv, float2_ID, nullptr, true);
    return 1;
}

static duk_ret_t RayQueryResult_Set_barycentricUV(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    float2& barycentricUV = *GetCheckedValueObject<float2>(ctx, 0, float2_ID);
    thisObj->barycentricUV = barycentricUV;
    return 0;
}

static duk_ret_t RayQueryResult_Get_barycentricUV(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    PushValueObject<float2>(ctx, &thisObj->barycentricUV, float2_ID, nullptr, true);
    return 1;
}

static duk_ret_t RayQueryResult_Set_t(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    float t = (float)duk_require_number(ctx, 0);
    thisObj->t = t;
    return 0;
}

static duk_ret_t RayQueryResult_Get_t(duk_context* ctx)
{
    RayQueryResult* thisObj = GetThisValueObject<RayQueryResult>(ctx, RayQueryResult_ID);
    duk_push_number(ctx, thisObj->t);
    return 1;
}

static duk_ret_t RayQueryResult_Ctor(duk_context* ctx)
{
    RayQueryResult* newObj = new RayQueryResult();
    PushConstructorResult<RayQueryResult>(ctx, newObj, RayQueryResult_ID, RayQueryResult_Finalizer);
    return 0;
}

void Expose_RayQueryResult(duk_context* ctx)
{
    duk_push_c_function(ctx, RayQueryResult_Ctor, DUK_VARARGS);
    duk_push_object(ctx);
    DefineProperty(ctx, "entity", RayQueryResult_Get_entity, RayQueryResult_Set_entity);
    DefineProperty(ctx, "component", RayQueryResult_Get_component, RayQueryResult_Set_component);
    DefineProperty(ctx, "pos", RayQueryResult_Get_pos, RayQueryResult_Set_pos);
    DefineProperty(ctx, "normal", RayQueryResult_Get_normal, RayQueryResult_Set_normal);
    DefineProperty(ctx, "submeshIndex", RayQueryResult_Get_submeshIndex, RayQueryResult_Set_submeshIndex);
    DefineProperty(ctx, "triangleIndex", RayQueryResult_Get_triangleIndex, RayQueryResult_Set_triangleIndex);
    DefineProperty(ctx, "uv", RayQueryResult_Get_uv, RayQueryResult_Set_uv);
    DefineProperty(ctx, "barycentricUV", RayQueryResult_Get_barycentricUV, RayQueryResult_Set_barycentricUV);
    DefineProperty(ctx, "t", RayQueryResult_Get_t, RayQueryResult_Set_t);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, RayQueryResult_ID);
}

}
