// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "BindingsHelpers.h"
#include "Framework/Framework.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Framework/FrameAPI.h"
#include "Scene/SceneAPI.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{



const char* Framework_ID = "Framework";

const char* SignalWrapper_Framework_ExitRequested_ID = "SignalWrapper_Framework_ExitRequested";

class SignalWrapper_Framework_ExitRequested
{
public:
    SignalWrapper_Framework_ExitRequested(Urho3D::Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    Urho3D::WeakPtr<Urho3D::Object> owner_;
    Signal0< void >* signal_;
};

duk_ret_t SignalWrapper_Framework_ExitRequested_Finalizer(duk_context* ctx)
{
    SignalWrapper_Framework_ExitRequested* obj = GetValueObject<SignalWrapper_Framework_ExitRequested>(ctx, 0, SignalWrapper_Framework_ExitRequested_ID);
    if (obj)
    {
        delete obj;
        SetValueObject(ctx, 0, 0, SignalWrapper_Framework_ExitRequested_ID);
    }
    return 0;
}

static duk_ret_t SignalWrapper_Framework_ExitRequested_Emit(duk_context* ctx)
{
    SignalWrapper_Framework_ExitRequested* wrapper = GetThisValueObject<SignalWrapper_Framework_ExitRequested>(ctx, SignalWrapper_Framework_ExitRequested_ID);
    if (!wrapper->owner_) return 0; // Check signal owner expiration
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t Framework_Get_ExitRequested(duk_context* ctx)
{
    Framework* thisObj = GetThisWeakObject<Framework>(ctx);
    SignalWrapper_Framework_ExitRequested* wrapper = new SignalWrapper_Framework_ExitRequested(thisObj, &thisObj->ExitRequested);
    PushValueObject(ctx, wrapper, SignalWrapper_Framework_ExitRequested_ID, SignalWrapper_Framework_ExitRequested_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Framework_ExitRequested_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t Framework_ParseWildCardFilename_String(duk_context* ctx)
{
    Framework* thisObj = GetThisWeakObject<Framework>(ctx);
    String input(duk_require_string(ctx, 0));
    String ret = thisObj->ParseWildCardFilename(input);
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Framework_HasCommandLineParameter_String(duk_context* ctx)
{
    Framework* thisObj = GetThisWeakObject<Framework>(ctx);
    String value(duk_require_string(ctx, 0));
    bool ret = thisObj->HasCommandLineParameter(value);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Framework_CommandLineParameters_String(duk_context* ctx)
{
    Framework* thisObj = GetThisWeakObject<Framework>(ctx);
    String key(duk_require_string(ctx, 0));
    Vector< String > ret = thisObj->CommandLineParameters(key);
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t Framework_ConfigFiles(duk_context* ctx)
{
    Framework* thisObj = GetThisWeakObject<Framework>(ctx);
    Vector< String > ret = thisObj->ConfigFiles();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t Framework_Exit(duk_context* ctx)
{
    Framework* thisObj = GetThisWeakObject<Framework>(ctx);
    thisObj->Exit();
    return 0;
}

static duk_ret_t Framework_ForceExit(duk_context* ctx)
{
    Framework* thisObj = GetThisWeakObject<Framework>(ctx);
    thisObj->ForceExit();
    return 0;
}

static duk_ret_t Framework_CancelExit(duk_context* ctx)
{
    Framework* thisObj = GetThisWeakObject<Framework>(ctx);
    thisObj->CancelExit();
    return 0;
}

static duk_ret_t Framework_IsHeadless(duk_context* ctx)
{
    Framework* thisObj = GetThisWeakObject<Framework>(ctx);
    bool ret = thisObj->IsHeadless();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Framework_Frame(duk_context* ctx)
{
    Framework* thisObj = GetThisWeakObject<Framework>(ctx);
    FrameAPI * ret = thisObj->Frame();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Framework_Scene(duk_context* ctx)
{
    Framework* thisObj = GetThisWeakObject<Framework>(ctx);
    SceneAPI * ret = thisObj->Scene();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Framework_OrganizationName_Static(duk_context* ctx)
{
    const String & ret = Framework::OrganizationName();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Framework_ApplicationName_Static(duk_context* ctx)
{
    const String & ret = Framework::ApplicationName();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Framework_VersionString_Static(duk_context* ctx)
{
    const String & ret = Framework::VersionString();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Framework_Instance_Static(duk_context* ctx)
{
    Framework * ret = Framework::Instance();
    PushWeakObject(ctx, ret);
    return 1;
}

static const duk_function_list_entry Framework_Functions[] = {
    {"ParseWildCardFilename", Framework_ParseWildCardFilename_String, 1}
    ,{"HasCommandLineParameter", Framework_HasCommandLineParameter_String, 1}
    ,{"CommandLineParameters", Framework_CommandLineParameters_String, 1}
    ,{"ConfigFiles", Framework_ConfigFiles, 0}
    ,{"Exit", Framework_Exit, 0}
    ,{"ForceExit", Framework_ForceExit, 0}
    ,{"CancelExit", Framework_CancelExit, 0}
    ,{"IsHeadless", Framework_IsHeadless, 0}
    ,{"Frame", Framework_Frame, 0}
    ,{"Scene", Framework_Scene, 0}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry Framework_StaticFunctions[] = {
    {"OrganizationName", Framework_OrganizationName_Static, 0}
    ,{"ApplicationName", Framework_ApplicationName_Static, 0}
    ,{"VersionString", Framework_VersionString_Static, 0}
    ,{"Instance", Framework_Instance_Static, 0}
    ,{nullptr, nullptr, 0}
};

void Expose_Framework(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Framework_StaticFunctions);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Framework_Functions);
    DefineProperty(ctx, "exitRequested", Framework_Get_ExitRequested, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, Framework_ID);
}

}
