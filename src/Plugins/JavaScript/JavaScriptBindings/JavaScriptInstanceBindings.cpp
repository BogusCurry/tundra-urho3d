// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "JavaScriptInstance.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif



using namespace Tundra;
using namespace std;

namespace JSBindings
{



static const char* JavaScriptInstance_ID = "JavaScriptInstance";

const char* SignalWrapper_JavaScriptInstance_ScriptEvaluated_ID = "SignalWrapper_JavaScriptInstance_ScriptEvaluated";

class SignalWrapper_JavaScriptInstance_ScriptEvaluated
{
public:
    SignalWrapper_JavaScriptInstance_ScriptEvaluated(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_JavaScriptInstance_ScriptEvaluated : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_JavaScriptInstance_ScriptEvaluated_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_JavaScriptInstance_ScriptEvaluated>(ctx, SignalWrapper_JavaScriptInstance_ScriptEvaluated_ID);
    return 0;
}

static duk_ret_t SignalWrapper_JavaScriptInstance_ScriptEvaluated_Connect(duk_context* ctx)
{
    SignalWrapper_JavaScriptInstance_ScriptEvaluated* wrapper = GetThisValueObject<SignalWrapper_JavaScriptInstance_ScriptEvaluated>(ctx, SignalWrapper_JavaScriptInstance_ScriptEvaluated_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_JavaScriptInstance_ScriptEvaluated* receiver = new SignalReceiver_JavaScriptInstance_ScriptEvaluated();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_JavaScriptInstance_ScriptEvaluated::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    int numArgs = duk_get_top(ctx);
    duk_push_number(ctx, (size_t)wrapper->signal_);
    duk_insert(ctx, 0);
    duk_push_global_object(ctx);
    duk_get_prop_string(ctx, -1, "_ConnectSignal");
    duk_remove(ctx, -2);
    duk_insert(ctx, 0);
    duk_pcall(ctx, numArgs + 1);
    duk_pop(ctx);
    return 0;
}

static duk_ret_t SignalWrapper_JavaScriptInstance_ScriptEvaluated_Disconnect(duk_context* ctx)
{
    SignalWrapper_JavaScriptInstance_ScriptEvaluated* wrapper = GetThisValueObject<SignalWrapper_JavaScriptInstance_ScriptEvaluated>(ctx, SignalWrapper_JavaScriptInstance_ScriptEvaluated_ID);
    if (!wrapper->owner_) return 0;
    int numArgs = duk_get_top(ctx);
    duk_push_number(ctx, (size_t)wrapper->signal_);
    duk_insert(ctx, 0);
    duk_push_global_object(ctx);
    duk_get_prop_string(ctx, -1, "_DisconnectSignal");
    duk_remove(ctx, -2);
    duk_insert(ctx, 0);
    duk_pcall(ctx, numArgs + 1);
    if (duk_get_boolean(ctx, -1))
    {
        HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
        signalReceivers.Erase(wrapper->signal_);
    }
    duk_pop(ctx);
    return 0;
}

static duk_ret_t SignalWrapper_JavaScriptInstance_ScriptEvaluated_Emit(duk_context* ctx)
{
    SignalWrapper_JavaScriptInstance_ScriptEvaluated* wrapper = GetThisValueObject<SignalWrapper_JavaScriptInstance_ScriptEvaluated>(ctx, SignalWrapper_JavaScriptInstance_ScriptEvaluated_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t JavaScriptInstance_Get_ScriptEvaluated(duk_context* ctx)
{
    JavaScriptInstance* thisObj = GetThisWeakObject<JavaScriptInstance>(ctx);
    SignalWrapper_JavaScriptInstance_ScriptEvaluated* wrapper = new SignalWrapper_JavaScriptInstance_ScriptEvaluated(thisObj, &thisObj->ScriptEvaluated);
    PushValueObject(ctx, wrapper, SignalWrapper_JavaScriptInstance_ScriptEvaluated_ID, SignalWrapper_JavaScriptInstance_ScriptEvaluated_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_JavaScriptInstance_ScriptEvaluated_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_JavaScriptInstance_ScriptEvaluated_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_JavaScriptInstance_ScriptEvaluated_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_JavaScriptInstance_ScriptUnloading_ID = "SignalWrapper_JavaScriptInstance_ScriptUnloading";

class SignalWrapper_JavaScriptInstance_ScriptUnloading
{
public:
    SignalWrapper_JavaScriptInstance_ScriptUnloading(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_JavaScriptInstance_ScriptUnloading : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_JavaScriptInstance_ScriptUnloading_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_JavaScriptInstance_ScriptUnloading>(ctx, SignalWrapper_JavaScriptInstance_ScriptUnloading_ID);
    return 0;
}

static duk_ret_t SignalWrapper_JavaScriptInstance_ScriptUnloading_Connect(duk_context* ctx)
{
    SignalWrapper_JavaScriptInstance_ScriptUnloading* wrapper = GetThisValueObject<SignalWrapper_JavaScriptInstance_ScriptUnloading>(ctx, SignalWrapper_JavaScriptInstance_ScriptUnloading_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_JavaScriptInstance_ScriptUnloading* receiver = new SignalReceiver_JavaScriptInstance_ScriptUnloading();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_JavaScriptInstance_ScriptUnloading::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    int numArgs = duk_get_top(ctx);
    duk_push_number(ctx, (size_t)wrapper->signal_);
    duk_insert(ctx, 0);
    duk_push_global_object(ctx);
    duk_get_prop_string(ctx, -1, "_ConnectSignal");
    duk_remove(ctx, -2);
    duk_insert(ctx, 0);
    duk_pcall(ctx, numArgs + 1);
    duk_pop(ctx);
    return 0;
}

static duk_ret_t SignalWrapper_JavaScriptInstance_ScriptUnloading_Disconnect(duk_context* ctx)
{
    SignalWrapper_JavaScriptInstance_ScriptUnloading* wrapper = GetThisValueObject<SignalWrapper_JavaScriptInstance_ScriptUnloading>(ctx, SignalWrapper_JavaScriptInstance_ScriptUnloading_ID);
    if (!wrapper->owner_) return 0;
    int numArgs = duk_get_top(ctx);
    duk_push_number(ctx, (size_t)wrapper->signal_);
    duk_insert(ctx, 0);
    duk_push_global_object(ctx);
    duk_get_prop_string(ctx, -1, "_DisconnectSignal");
    duk_remove(ctx, -2);
    duk_insert(ctx, 0);
    duk_pcall(ctx, numArgs + 1);
    if (duk_get_boolean(ctx, -1))
    {
        HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
        signalReceivers.Erase(wrapper->signal_);
    }
    duk_pop(ctx);
    return 0;
}

static duk_ret_t SignalWrapper_JavaScriptInstance_ScriptUnloading_Emit(duk_context* ctx)
{
    SignalWrapper_JavaScriptInstance_ScriptUnloading* wrapper = GetThisValueObject<SignalWrapper_JavaScriptInstance_ScriptUnloading>(ctx, SignalWrapper_JavaScriptInstance_ScriptUnloading_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t JavaScriptInstance_Get_ScriptUnloading(duk_context* ctx)
{
    JavaScriptInstance* thisObj = GetThisWeakObject<JavaScriptInstance>(ctx);
    SignalWrapper_JavaScriptInstance_ScriptUnloading* wrapper = new SignalWrapper_JavaScriptInstance_ScriptUnloading(thisObj, &thisObj->ScriptUnloading);
    PushValueObject(ctx, wrapper, SignalWrapper_JavaScriptInstance_ScriptUnloading_ID, SignalWrapper_JavaScriptInstance_ScriptUnloading_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_JavaScriptInstance_ScriptUnloading_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_JavaScriptInstance_ScriptUnloading_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_JavaScriptInstance_ScriptUnloading_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t JavaScriptInstance_Evaluate_String(duk_context* ctx)
{
    JavaScriptInstance* thisObj = GetThisWeakObject<JavaScriptInstance>(ctx);
    String script = duk_require_string(ctx, 0);
    bool ret = thisObj->Evaluate(script);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t JavaScriptInstance_Execute_String(duk_context* ctx)
{
    JavaScriptInstance* thisObj = GetThisWeakObject<JavaScriptInstance>(ctx);
    String functionName = duk_require_string(ctx, 0);
    bool ret = thisObj->Execute(functionName);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t JavaScriptInstance_IncludeFile_String(duk_context* ctx)
{
    JavaScriptInstance* thisObj = GetThisWeakObject<JavaScriptInstance>(ctx);
    String file = duk_require_string(ctx, 0);
    thisObj->IncludeFile(file);
    return 0;
}

static duk_ret_t JavaScriptInstance_IsEvaluated(duk_context* ctx)
{
    JavaScriptInstance* thisObj = GetThisWeakObject<JavaScriptInstance>(ctx);
    bool ret = thisObj->IsEvaluated();
    duk_push_boolean(ctx, ret);
    return 1;
}

static const duk_function_list_entry JavaScriptInstance_Functions[] = {
    {"Evaluate", JavaScriptInstance_Evaluate_String, 1}
    ,{"Execute", JavaScriptInstance_Execute_String, 1}
    ,{"IncludeFile", JavaScriptInstance_IncludeFile_String, 1}
    ,{"IsEvaluated", JavaScriptInstance_IsEvaluated, 0}
    ,{nullptr, nullptr, 0}
};

void Expose_JavaScriptInstance(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, JavaScriptInstance_Functions);
    DefineProperty(ctx, "scriptEvaluated", JavaScriptInstance_Get_ScriptEvaluated, nullptr);
    DefineProperty(ctx, "scriptUnloading", JavaScriptInstance_Get_ScriptUnloading, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, JavaScriptInstance_ID);
}

}
