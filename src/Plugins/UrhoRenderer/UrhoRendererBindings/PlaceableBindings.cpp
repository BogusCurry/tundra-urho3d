// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "Placeable.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Entity.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{

static const char* float3_ID = "float3";
static const char* Quat_ID = "Quat";
static const char* float3x3_ID = "float3x3";
static const char* float3x4_ID = "float3x4";
static const char* float4x4_ID = "float4x4";

static duk_ret_t float3x4_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<float3x4>(ctx, float3x4_ID);
    return 0;
}

static duk_ret_t float3_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<float3>(ctx, float3_ID);
    return 0;
}

static duk_ret_t Quat_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<Quat>(ctx, Quat_ID);
    return 0;
}


static const char* Placeable_ID = "Placeable";

const char* SignalWrapper_Placeable_AboutToBeDestroyed_ID = "SignalWrapper_Placeable_AboutToBeDestroyed";

class SignalWrapper_Placeable_AboutToBeDestroyed
{
public:
    SignalWrapper_Placeable_AboutToBeDestroyed(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_Placeable_AboutToBeDestroyed : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Placeable_AboutToBeDestroyed_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Placeable_AboutToBeDestroyed>(ctx, SignalWrapper_Placeable_AboutToBeDestroyed_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Placeable_AboutToBeDestroyed_Connect(duk_context* ctx)
{
    SignalWrapper_Placeable_AboutToBeDestroyed* wrapper = GetThisValueObject<SignalWrapper_Placeable_AboutToBeDestroyed>(ctx, SignalWrapper_Placeable_AboutToBeDestroyed_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Placeable_AboutToBeDestroyed* receiver = new SignalReceiver_Placeable_AboutToBeDestroyed();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Placeable_AboutToBeDestroyed::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Placeable_AboutToBeDestroyed_Disconnect(duk_context* ctx)
{
    SignalWrapper_Placeable_AboutToBeDestroyed* wrapper = GetThisValueObject<SignalWrapper_Placeable_AboutToBeDestroyed>(ctx, SignalWrapper_Placeable_AboutToBeDestroyed_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Placeable_AboutToBeDestroyed_Emit(duk_context* ctx)
{
    SignalWrapper_Placeable_AboutToBeDestroyed* wrapper = GetThisValueObject<SignalWrapper_Placeable_AboutToBeDestroyed>(ctx, SignalWrapper_Placeable_AboutToBeDestroyed_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t Placeable_Get_AboutToBeDestroyed(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    SignalWrapper_Placeable_AboutToBeDestroyed* wrapper = new SignalWrapper_Placeable_AboutToBeDestroyed(thisObj, &thisObj->AboutToBeDestroyed);
    PushValueObject(ctx, wrapper, SignalWrapper_Placeable_AboutToBeDestroyed_ID, SignalWrapper_Placeable_AboutToBeDestroyed_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Placeable_AboutToBeDestroyed_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_AboutToBeDestroyed_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_AboutToBeDestroyed_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_AboutToBeDestroyed_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_AboutToBeDestroyed_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Placeable_TransformChanged_ID = "SignalWrapper_Placeable_TransformChanged";

class SignalWrapper_Placeable_TransformChanged
{
public:
    SignalWrapper_Placeable_TransformChanged(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_Placeable_TransformChanged : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Placeable_TransformChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Placeable_TransformChanged>(ctx, SignalWrapper_Placeable_TransformChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Placeable_TransformChanged_Connect(duk_context* ctx)
{
    SignalWrapper_Placeable_TransformChanged* wrapper = GetThisValueObject<SignalWrapper_Placeable_TransformChanged>(ctx, SignalWrapper_Placeable_TransformChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Placeable_TransformChanged* receiver = new SignalReceiver_Placeable_TransformChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Placeable_TransformChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Placeable_TransformChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_Placeable_TransformChanged* wrapper = GetThisValueObject<SignalWrapper_Placeable_TransformChanged>(ctx, SignalWrapper_Placeable_TransformChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Placeable_TransformChanged_Emit(duk_context* ctx)
{
    SignalWrapper_Placeable_TransformChanged* wrapper = GetThisValueObject<SignalWrapper_Placeable_TransformChanged>(ctx, SignalWrapper_Placeable_TransformChanged_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t Placeable_Get_TransformChanged(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    SignalWrapper_Placeable_TransformChanged* wrapper = new SignalWrapper_Placeable_TransformChanged(thisObj, &thisObj->TransformChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_Placeable_TransformChanged_ID, SignalWrapper_Placeable_TransformChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Placeable_TransformChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_TransformChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_TransformChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_TransformChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_TransformChanged_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Placeable_ComponentNameChanged_ID = "SignalWrapper_Placeable_ComponentNameChanged";

class SignalWrapper_Placeable_ComponentNameChanged
{
public:
    SignalWrapper_Placeable_ComponentNameChanged(Object* owner, Signal2< const String &, const String & >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal2< const String &, const String & >* signal_;
};

class SignalReceiver_Placeable_ComponentNameChanged : public SignalReceiver
{
public:
    void OnSignal(const String & param0, const String & param1)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        duk_push_string(ctx, param0.CString());
        duk_put_prop_index(ctx, -2, 0);
        duk_push_string(ctx, param1.CString());
        duk_put_prop_index(ctx, -2, 1);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Placeable_ComponentNameChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Placeable_ComponentNameChanged>(ctx, SignalWrapper_Placeable_ComponentNameChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Placeable_ComponentNameChanged_Connect(duk_context* ctx)
{
    SignalWrapper_Placeable_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_Placeable_ComponentNameChanged>(ctx, SignalWrapper_Placeable_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Placeable_ComponentNameChanged* receiver = new SignalReceiver_Placeable_ComponentNameChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Placeable_ComponentNameChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Placeable_ComponentNameChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_Placeable_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_Placeable_ComponentNameChanged>(ctx, SignalWrapper_Placeable_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Placeable_ComponentNameChanged_Emit(duk_context* ctx)
{
    SignalWrapper_Placeable_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_Placeable_ComponentNameChanged>(ctx, SignalWrapper_Placeable_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    String param0 = duk_require_string(ctx, 0);
    String param1 = duk_require_string(ctx, 1);
    wrapper->signal_->Emit(param0, param1);
    return 0;
}

static duk_ret_t Placeable_Get_ComponentNameChanged(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    SignalWrapper_Placeable_ComponentNameChanged* wrapper = new SignalWrapper_Placeable_ComponentNameChanged(thisObj, &thisObj->ComponentNameChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_Placeable_ComponentNameChanged_ID, SignalWrapper_Placeable_ComponentNameChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Placeable_ComponentNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_ComponentNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_ComponentNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_ComponentNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_ComponentNameChanged_Emit, 2);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Placeable_ParentEntitySet_ID = "SignalWrapper_Placeable_ParentEntitySet";

class SignalWrapper_Placeable_ParentEntitySet
{
public:
    SignalWrapper_Placeable_ParentEntitySet(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_Placeable_ParentEntitySet : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Placeable_ParentEntitySet_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Placeable_ParentEntitySet>(ctx, SignalWrapper_Placeable_ParentEntitySet_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Placeable_ParentEntitySet_Connect(duk_context* ctx)
{
    SignalWrapper_Placeable_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_Placeable_ParentEntitySet>(ctx, SignalWrapper_Placeable_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Placeable_ParentEntitySet* receiver = new SignalReceiver_Placeable_ParentEntitySet();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Placeable_ParentEntitySet::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Placeable_ParentEntitySet_Disconnect(duk_context* ctx)
{
    SignalWrapper_Placeable_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_Placeable_ParentEntitySet>(ctx, SignalWrapper_Placeable_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Placeable_ParentEntitySet_Emit(duk_context* ctx)
{
    SignalWrapper_Placeable_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_Placeable_ParentEntitySet>(ctx, SignalWrapper_Placeable_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t Placeable_Get_ParentEntitySet(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    SignalWrapper_Placeable_ParentEntitySet* wrapper = new SignalWrapper_Placeable_ParentEntitySet(thisObj, &thisObj->ParentEntitySet);
    PushValueObject(ctx, wrapper, SignalWrapper_Placeable_ParentEntitySet_ID, SignalWrapper_Placeable_ParentEntitySet_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Placeable_ParentEntitySet_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_ParentEntitySet_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_ParentEntitySet_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_ParentEntitySet_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_ParentEntitySet_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Placeable_ParentEntityAboutToBeDetached_ID = "SignalWrapper_Placeable_ParentEntityAboutToBeDetached";

class SignalWrapper_Placeable_ParentEntityAboutToBeDetached
{
public:
    SignalWrapper_Placeable_ParentEntityAboutToBeDetached(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_Placeable_ParentEntityAboutToBeDetached : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Placeable_ParentEntityAboutToBeDetached_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Placeable_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Placeable_ParentEntityAboutToBeDetached_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Placeable_ParentEntityAboutToBeDetached_Connect(duk_context* ctx)
{
    SignalWrapper_Placeable_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_Placeable_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Placeable_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Placeable_ParentEntityAboutToBeDetached* receiver = new SignalReceiver_Placeable_ParentEntityAboutToBeDetached();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Placeable_ParentEntityAboutToBeDetached::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Placeable_ParentEntityAboutToBeDetached_Disconnect(duk_context* ctx)
{
    SignalWrapper_Placeable_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_Placeable_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Placeable_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Placeable_ParentEntityAboutToBeDetached_Emit(duk_context* ctx)
{
    SignalWrapper_Placeable_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_Placeable_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Placeable_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t Placeable_Get_ParentEntityAboutToBeDetached(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    SignalWrapper_Placeable_ParentEntityAboutToBeDetached* wrapper = new SignalWrapper_Placeable_ParentEntityAboutToBeDetached(thisObj, &thisObj->ParentEntityAboutToBeDetached);
    PushValueObject(ctx, wrapper, SignalWrapper_Placeable_ParentEntityAboutToBeDetached_ID, SignalWrapper_Placeable_ParentEntityAboutToBeDetached_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Placeable_ParentEntityAboutToBeDetached_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_ParentEntityAboutToBeDetached_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_ParentEntityAboutToBeDetached_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_ParentEntityAboutToBeDetached_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Placeable_ParentEntityAboutToBeDetached_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t Placeable_SetPosition_float_float_float(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    thisObj->SetPosition(x, y, z);
    return 0;
}

static duk_ret_t Placeable_SetPosition_float3(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3& pos = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->SetPosition(pos);
    return 0;
}

static duk_ret_t Placeable_SetOrientation_Quat(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Quat& q = *GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    thisObj->SetOrientation(q);
    return 0;
}

static duk_ret_t Placeable_SetOrientationAndScale_float3x3(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3x3& rotAndScale = *GetCheckedValueObject<float3x3>(ctx, 0, float3x3_ID);
    thisObj->SetOrientationAndScale(rotAndScale);
    return 0;
}

static duk_ret_t Placeable_SetOrientationAndScale_Quat_float3(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Quat& q = *GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    float3& scale = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    thisObj->SetOrientationAndScale(q, scale);
    return 0;
}

static duk_ret_t Placeable_SetScale_float_float_float(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float x = (float)duk_require_number(ctx, 0);
    float y = (float)duk_require_number(ctx, 1);
    float z = (float)duk_require_number(ctx, 2);
    thisObj->SetScale(x, y, z);
    return 0;
}

static duk_ret_t Placeable_SetScale_float3(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3& scale = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->SetScale(scale);
    return 0;
}

static duk_ret_t Placeable_SetTransform_float3x3_float3(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3x3& tm = *GetCheckedValueObject<float3x3>(ctx, 0, float3x3_ID);
    float3& pos = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    thisObj->SetTransform(tm, pos);
    return 0;
}

static duk_ret_t Placeable_SetTransform_float3x4(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3x4& tm = *GetCheckedValueObject<float3x4>(ctx, 0, float3x4_ID);
    thisObj->SetTransform(tm);
    return 0;
}

static duk_ret_t Placeable_SetTransform_float4x4(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float4x4& tm = *GetCheckedValueObject<float4x4>(ctx, 0, float4x4_ID);
    thisObj->SetTransform(tm);
    return 0;
}

static duk_ret_t Placeable_SetTransform_Quat_float3(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Quat& orientation = *GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    float3& pos = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    thisObj->SetTransform(orientation, pos);
    return 0;
}

static duk_ret_t Placeable_SetTransform_Quat_float3_float3(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Quat& orientation = *GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    float3& pos = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3& scale = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    thisObj->SetTransform(orientation, pos, scale);
    return 0;
}

static duk_ret_t Placeable_SetWorldTransform_float3x3_float3(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3x3& tm = *GetCheckedValueObject<float3x3>(ctx, 0, float3x3_ID);
    float3& pos = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    thisObj->SetWorldTransform(tm, pos);
    return 0;
}

static duk_ret_t Placeable_SetWorldTransform_float3x4(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3x4& tm = *GetCheckedValueObject<float3x4>(ctx, 0, float3x4_ID);
    thisObj->SetWorldTransform(tm);
    return 0;
}

static duk_ret_t Placeable_SetWorldTransform_float4x4(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float4x4& tm = *GetCheckedValueObject<float4x4>(ctx, 0, float4x4_ID);
    thisObj->SetWorldTransform(tm);
    return 0;
}

static duk_ret_t Placeable_SetWorldTransform_Quat_float3(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Quat& orientation = *GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    float3& pos = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    thisObj->SetWorldTransform(orientation, pos);
    return 0;
}

static duk_ret_t Placeable_SetWorldTransform_Quat_float3_float3(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Quat& orientation = *GetCheckedValueObject<Quat>(ctx, 0, Quat_ID);
    float3& pos = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3& scale = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    thisObj->SetWorldTransform(orientation, pos, scale);
    return 0;
}

static duk_ret_t Placeable_WorldTransform(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3x4 ret = thisObj->WorldTransform();
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t Placeable_WorldPosition(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3 ret = thisObj->WorldPosition();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t Placeable_WorldOrientation(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Quat ret = thisObj->WorldOrientation();
    PushValueObjectCopy<Quat>(ctx, ret, Quat_ID, Quat_Finalizer);
    return 1;
}

static duk_ret_t Placeable_WorldScale(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3 ret = thisObj->WorldScale();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t Placeable_Position(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3 ret = thisObj->Position();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t Placeable_Orientation(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Quat ret = thisObj->Orientation();
    PushValueObjectCopy<Quat>(ctx, ret, Quat_ID, Quat_Finalizer);
    return 1;
}

static duk_ret_t Placeable_Scale(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3 ret = thisObj->Scale();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t Placeable_LocalToWorld(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3x4 ret = thisObj->LocalToWorld();
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t Placeable_WorldToLocal(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3x4 ret = thisObj->WorldToLocal();
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t Placeable_LocalToParent(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3x4 ret = thisObj->LocalToParent();
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t Placeable_ParentToLocal(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    float3x4 ret = thisObj->ParentToLocal();
    PushValueObjectCopy<float3x4>(ctx, ret, float3x4_ID, float3x4_Finalizer);
    return 1;
}

static duk_ret_t Placeable_Show(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    thisObj->Show();
    return 0;
}

static duk_ret_t Placeable_Hide(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    thisObj->Hide();
    return 0;
}

static duk_ret_t Placeable_ToggleVisibility(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    thisObj->ToggleVisibility();
    return 0;
}

static duk_ret_t Placeable_SetParent_Entity_bool(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Entity* parent = GetWeakObject<Entity>(ctx, 0);
    bool preserveWorldTransform = duk_require_boolean(ctx, 1);
    thisObj->SetParent(parent, preserveWorldTransform);
    return 0;
}

static duk_ret_t Placeable_SetParent_Entity_String_bool(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Entity* parent = GetWeakObject<Entity>(ctx, 0);
    String boneName = duk_require_string(ctx, 1);
    bool preserveWorldTransform = duk_require_boolean(ctx, 2);
    thisObj->SetParent(parent, boneName, preserveWorldTransform);
    return 0;
}

static duk_ret_t Placeable_Children(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    EntityVector ret = thisObj->Children();
    PushWeakObjectVector(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_DumpNodeHierarhy(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    thisObj->DumpNodeHierarhy();
    return 0;
}

static duk_ret_t Placeable_ParentPlaceableEntity(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Entity * ret = thisObj->ParentPlaceableEntity();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_ParentPlaceableComponent(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Placeable * ret = thisObj->ParentPlaceableComponent();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_IsGrandparentOf_Entity(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    bool ret = thisObj->IsGrandparentOf(entity);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_IsGrandparentOf_Placeable(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Placeable* placeable = GetWeakObject<Placeable>(ctx, 0);
    bool ret = thisObj->IsGrandparentOf(placeable);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_IsGrandchildOf_Entity(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    bool ret = thisObj->IsGrandchildOf(entity);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_IsGrandchildOf_Placeable(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Placeable* placeable = GetWeakObject<Placeable>(ctx, 0);
    bool ret = thisObj->IsGrandchildOf(placeable);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_Grandchildren_Entity(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    EntityVector ret = thisObj->Grandchildren(entity);
    PushWeakObjectVector(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_TypeName(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    const String & ret = thisObj->TypeName();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Placeable_TypeId(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    u32 ret = thisObj->TypeId();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_Name(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    const String & ret = thisObj->Name();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Placeable_SetName_String(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    String name = duk_require_string(ctx, 0);
    thisObj->SetName(name);
    return 0;
}

static duk_ret_t Placeable_SetParentEntity_Entity(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    thisObj->SetParentEntity(entity);
    return 0;
}

static duk_ret_t Placeable_SetReplicated_bool(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    thisObj->SetReplicated(enable);
    return 0;
}

static duk_ret_t Placeable_IsReplicated(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    bool ret = thisObj->IsReplicated();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_IsLocal(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    bool ret = thisObj->IsLocal();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_IsUnacked(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    bool ret = thisObj->IsUnacked();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_SetUpdateMode_AttributeChange__Type(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    AttributeChange::Type defaultmode = (AttributeChange::Type)(int)duk_require_number(ctx, 0);
    thisObj->SetUpdateMode(defaultmode);
    return 0;
}

static duk_ret_t Placeable_UpdateMode(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    AttributeChange::Type ret = thisObj->UpdateMode();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_Id(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    component_id_t ret = thisObj->Id();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_SupportsDynamicAttributes(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    bool ret = thisObj->SupportsDynamicAttributes();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_NumAttributes(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    int ret = thisObj->NumAttributes();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_NumStaticAttributes(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    int ret = thisObj->NumStaticAttributes();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_EmitAttributeChanged_String_AttributeChange__Type(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    String attributeName = duk_require_string(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->EmitAttributeChanged(attributeName, change);
    return 0;
}

static duk_ret_t Placeable_ComponentChanged_AttributeChange__Type(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 0);
    thisObj->ComponentChanged(change);
    return 0;
}

static duk_ret_t Placeable_ParentEntity(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    Entity * ret = thisObj->ParentEntity();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_SetTemporary_bool(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    thisObj->SetTemporary(enable);
    return 0;
}

static duk_ret_t Placeable_IsTemporary(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    bool ret = thisObj->IsTemporary();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_ViewEnabled(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    bool ret = thisObj->ViewEnabled();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_AttributeNames(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    StringVector ret = thisObj->AttributeNames();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_AttributeIds(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    StringVector ret = thisObj->AttributeIds();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_ShouldBeSerialized_bool_bool(duk_context* ctx)
{
    Placeable* thisObj = GetThisWeakObject<Placeable>(ctx);
    bool serializeTemporary = duk_require_boolean(ctx, 0);
    bool serializeLocal = duk_require_boolean(ctx, 1);
    bool ret = thisObj->ShouldBeSerialized(serializeTemporary, serializeLocal);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Placeable_SetPosition_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return Placeable_SetPosition_float_float_float(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return Placeable_SetPosition_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Placeable_SetOrientationAndScale_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 2 && GetValueObject<Quat>(ctx, 0, Quat_ID) && GetValueObject<float3>(ctx, 1, float3_ID))
        return Placeable_SetOrientationAndScale_Quat_float3(ctx);
    if (numArgs == 1 && GetValueObject<float3x3>(ctx, 0, float3x3_ID))
        return Placeable_SetOrientationAndScale_float3x3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Placeable_SetScale_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_number(ctx, 0) && duk_is_number(ctx, 1) && duk_is_number(ctx, 2))
        return Placeable_SetScale_float_float_float(ctx);
    if (numArgs == 1 && GetValueObject<float3>(ctx, 0, float3_ID))
        return Placeable_SetScale_float3(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Placeable_SetTransform_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetValueObject<Quat>(ctx, 0, Quat_ID) && GetValueObject<float3>(ctx, 1, float3_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return Placeable_SetTransform_Quat_float3_float3(ctx);
    if (numArgs == 2 && GetValueObject<Quat>(ctx, 0, Quat_ID) && GetValueObject<float3>(ctx, 1, float3_ID))
        return Placeable_SetTransform_Quat_float3(ctx);
    if (numArgs == 2 && GetValueObject<float3x3>(ctx, 0, float3x3_ID) && GetValueObject<float3>(ctx, 1, float3_ID))
        return Placeable_SetTransform_float3x3_float3(ctx);
    if (numArgs == 1 && GetValueObject<float4x4>(ctx, 0, float4x4_ID))
        return Placeable_SetTransform_float4x4(ctx);
    if (numArgs == 1 && GetValueObject<float3x4>(ctx, 0, float3x4_ID))
        return Placeable_SetTransform_float3x4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Placeable_SetWorldTransform_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && GetValueObject<Quat>(ctx, 0, Quat_ID) && GetValueObject<float3>(ctx, 1, float3_ID) && GetValueObject<float3>(ctx, 2, float3_ID))
        return Placeable_SetWorldTransform_Quat_float3_float3(ctx);
    if (numArgs == 2 && GetValueObject<Quat>(ctx, 0, Quat_ID) && GetValueObject<float3>(ctx, 1, float3_ID))
        return Placeable_SetWorldTransform_Quat_float3(ctx);
    if (numArgs == 2 && GetValueObject<float3x3>(ctx, 0, float3x3_ID) && GetValueObject<float3>(ctx, 1, float3_ID))
        return Placeable_SetWorldTransform_float3x3_float3(ctx);
    if (numArgs == 1 && GetValueObject<float4x4>(ctx, 0, float4x4_ID))
        return Placeable_SetWorldTransform_float4x4(ctx);
    if (numArgs == 1 && GetValueObject<float3x4>(ctx, 0, float3x4_ID))
        return Placeable_SetWorldTransform_float3x4(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Placeable_SetParent_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_string(ctx, 1) && duk_is_boolean(ctx, 2))
        return Placeable_SetParent_Entity_String_bool(ctx);
    if (numArgs == 2 && duk_is_boolean(ctx, 1))
        return Placeable_SetParent_Entity_bool(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Placeable_IsGrandparentOf_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1)
        return Placeable_IsGrandparentOf_Placeable(ctx);
    if (numArgs == 1)
        return Placeable_IsGrandparentOf_Entity(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Placeable_IsGrandchildOf_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 1)
        return Placeable_IsGrandchildOf_Placeable(ctx);
    if (numArgs == 1)
        return Placeable_IsGrandchildOf_Entity(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static duk_ret_t Placeable_EnsureTypeNameWithoutPrefix_Static_String(duk_context* ctx)
{
    String tn = duk_require_string(ctx, 0);
    String ret = Placeable::EnsureTypeNameWithoutPrefix(tn);
    duk_push_string(ctx, ret.CString());
    return 1;
}

static const duk_function_list_entry Placeable_Functions[] = {
    {"SetPosition", Placeable_SetPosition_Selector, DUK_VARARGS}
    ,{"SetOrientation", Placeable_SetOrientation_Quat, 1}
    ,{"SetOrientationAndScale", Placeable_SetOrientationAndScale_Selector, DUK_VARARGS}
    ,{"SetScale", Placeable_SetScale_Selector, DUK_VARARGS}
    ,{"SetTransform", Placeable_SetTransform_Selector, DUK_VARARGS}
    ,{"SetWorldTransform", Placeable_SetWorldTransform_Selector, DUK_VARARGS}
    ,{"WorldTransform", Placeable_WorldTransform, 0}
    ,{"WorldPosition", Placeable_WorldPosition, 0}
    ,{"WorldOrientation", Placeable_WorldOrientation, 0}
    ,{"WorldScale", Placeable_WorldScale, 0}
    ,{"Position", Placeable_Position, 0}
    ,{"Orientation", Placeable_Orientation, 0}
    ,{"Scale", Placeable_Scale, 0}
    ,{"LocalToWorld", Placeable_LocalToWorld, 0}
    ,{"WorldToLocal", Placeable_WorldToLocal, 0}
    ,{"LocalToParent", Placeable_LocalToParent, 0}
    ,{"ParentToLocal", Placeable_ParentToLocal, 0}
    ,{"Show", Placeable_Show, 0}
    ,{"Hide", Placeable_Hide, 0}
    ,{"ToggleVisibility", Placeable_ToggleVisibility, 0}
    ,{"SetParent", Placeable_SetParent_Selector, DUK_VARARGS}
    ,{"Children", Placeable_Children, 0}
    ,{"DumpNodeHierarhy", Placeable_DumpNodeHierarhy, 0}
    ,{"ParentPlaceableEntity", Placeable_ParentPlaceableEntity, 0}
    ,{"ParentPlaceableComponent", Placeable_ParentPlaceableComponent, 0}
    ,{"IsGrandparentOf", Placeable_IsGrandparentOf_Selector, DUK_VARARGS}
    ,{"IsGrandchildOf", Placeable_IsGrandchildOf_Selector, DUK_VARARGS}
    ,{"Grandchildren", Placeable_Grandchildren_Entity, 1}
    ,{"TypeName", Placeable_TypeName, 0}
    ,{"TypeId", Placeable_TypeId, 0}
    ,{"Name", Placeable_Name, 0}
    ,{"SetName", Placeable_SetName_String, 1}
    ,{"SetParentEntity", Placeable_SetParentEntity_Entity, 1}
    ,{"SetReplicated", Placeable_SetReplicated_bool, 1}
    ,{"IsReplicated", Placeable_IsReplicated, 0}
    ,{"IsLocal", Placeable_IsLocal, 0}
    ,{"IsUnacked", Placeable_IsUnacked, 0}
    ,{"SetUpdateMode", Placeable_SetUpdateMode_AttributeChange__Type, 1}
    ,{"UpdateMode", Placeable_UpdateMode, 0}
    ,{"Id", Placeable_Id, 0}
    ,{"SupportsDynamicAttributes", Placeable_SupportsDynamicAttributes, 0}
    ,{"NumAttributes", Placeable_NumAttributes, 0}
    ,{"NumStaticAttributes", Placeable_NumStaticAttributes, 0}
    ,{"EmitAttributeChanged", Placeable_EmitAttributeChanged_String_AttributeChange__Type, 2}
    ,{"ComponentChanged", Placeable_ComponentChanged_AttributeChange__Type, 1}
    ,{"ParentEntity", Placeable_ParentEntity, 0}
    ,{"SetTemporary", Placeable_SetTemporary_bool, 1}
    ,{"IsTemporary", Placeable_IsTemporary, 0}
    ,{"ViewEnabled", Placeable_ViewEnabled, 0}
    ,{"AttributeNames", Placeable_AttributeNames, 0}
    ,{"AttributeIds", Placeable_AttributeIds, 0}
    ,{"ShouldBeSerialized", Placeable_ShouldBeSerialized_bool_bool, 2}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry Placeable_StaticFunctions[] = {
    {"EnsureTypeNameWithoutPrefix", Placeable_EnsureTypeNameWithoutPrefix_Static_String, 1}
    ,{nullptr, nullptr, 0}
};

void Expose_Placeable(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Placeable_StaticFunctions);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Placeable_Functions);
    DefineProperty(ctx, "AboutToBeDestroyed", Placeable_Get_AboutToBeDestroyed, nullptr);
    DefineProperty(ctx, "TransformChanged", Placeable_Get_TransformChanged, nullptr);
    DefineProperty(ctx, "ComponentNameChanged", Placeable_Get_ComponentNameChanged, nullptr);
    DefineProperty(ctx, "ParentEntitySet", Placeable_Get_ParentEntitySet, nullptr);
    DefineProperty(ctx, "ParentEntityAboutToBeDetached", Placeable_Get_ParentEntityAboutToBeDetached, nullptr);
    DefineProperty(ctx, "typeName", Placeable_TypeName, nullptr);
    DefineProperty(ctx, "typeId", Placeable_TypeId, nullptr);
    DefineProperty(ctx, "name", Placeable_Name, Placeable_SetName_String);
    DefineProperty(ctx, "replicated", Placeable_IsReplicated, Placeable_SetReplicated_bool);
    DefineProperty(ctx, "local", Placeable_IsLocal, nullptr);
    DefineProperty(ctx, "unacked", Placeable_IsUnacked, nullptr);
    DefineProperty(ctx, "updateMode", Placeable_UpdateMode, Placeable_SetUpdateMode_AttributeChange__Type);
    DefineProperty(ctx, "id", Placeable_Id, nullptr);
    DefineProperty(ctx, "temporary", Placeable_IsTemporary, Placeable_SetTemporary_bool);
    DefineProperty(ctx, "viewEnabled", Placeable_ViewEnabled, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, Placeable_ID);
}

}
