// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "Fog.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Entity.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{



static const char* Fog_ID = "Fog";

const char* SignalWrapper_Fog_ComponentNameChanged_ID = "SignalWrapper_Fog_ComponentNameChanged";

class SignalWrapper_Fog_ComponentNameChanged
{
public:
    SignalWrapper_Fog_ComponentNameChanged(Object* owner, Signal2< const String &, const String & >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal2< const String &, const String & >* signal_;
};

class SignalReceiver_Fog_ComponentNameChanged : public SignalReceiver
{
public:
    void OnSignal(const String & param0, const String & param1)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        duk_push_string(ctx, param0.CString());
        duk_put_prop_index(ctx, -2, 0);
        duk_push_string(ctx, param1.CString());
        duk_put_prop_index(ctx, -2, 1);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Fog_ComponentNameChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Fog_ComponentNameChanged>(ctx, SignalWrapper_Fog_ComponentNameChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Fog_ComponentNameChanged_Connect(duk_context* ctx)
{
    SignalWrapper_Fog_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_Fog_ComponentNameChanged>(ctx, SignalWrapper_Fog_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Fog_ComponentNameChanged* receiver = new SignalReceiver_Fog_ComponentNameChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Fog_ComponentNameChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Fog_ComponentNameChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_Fog_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_Fog_ComponentNameChanged>(ctx, SignalWrapper_Fog_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Fog_ComponentNameChanged_Emit(duk_context* ctx)
{
    SignalWrapper_Fog_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_Fog_ComponentNameChanged>(ctx, SignalWrapper_Fog_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    String param0 = duk_require_string(ctx, 0);
    String param1 = duk_require_string(ctx, 1);
    wrapper->signal_->Emit(param0, param1);
    return 0;
}

static duk_ret_t Fog_Get_ComponentNameChanged(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    SignalWrapper_Fog_ComponentNameChanged* wrapper = new SignalWrapper_Fog_ComponentNameChanged(thisObj, &thisObj->ComponentNameChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_Fog_ComponentNameChanged_ID, SignalWrapper_Fog_ComponentNameChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Fog_ComponentNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Fog_ComponentNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Fog_ComponentNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Fog_ComponentNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Fog_ComponentNameChanged_Emit, 2);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Fog_ParentEntitySet_ID = "SignalWrapper_Fog_ParentEntitySet";

class SignalWrapper_Fog_ParentEntitySet
{
public:
    SignalWrapper_Fog_ParentEntitySet(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_Fog_ParentEntitySet : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Fog_ParentEntitySet_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Fog_ParentEntitySet>(ctx, SignalWrapper_Fog_ParentEntitySet_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Fog_ParentEntitySet_Connect(duk_context* ctx)
{
    SignalWrapper_Fog_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_Fog_ParentEntitySet>(ctx, SignalWrapper_Fog_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Fog_ParentEntitySet* receiver = new SignalReceiver_Fog_ParentEntitySet();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Fog_ParentEntitySet::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Fog_ParentEntitySet_Disconnect(duk_context* ctx)
{
    SignalWrapper_Fog_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_Fog_ParentEntitySet>(ctx, SignalWrapper_Fog_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Fog_ParentEntitySet_Emit(duk_context* ctx)
{
    SignalWrapper_Fog_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_Fog_ParentEntitySet>(ctx, SignalWrapper_Fog_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t Fog_Get_ParentEntitySet(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    SignalWrapper_Fog_ParentEntitySet* wrapper = new SignalWrapper_Fog_ParentEntitySet(thisObj, &thisObj->ParentEntitySet);
    PushValueObject(ctx, wrapper, SignalWrapper_Fog_ParentEntitySet_ID, SignalWrapper_Fog_ParentEntitySet_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Fog_ParentEntitySet_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Fog_ParentEntitySet_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Fog_ParentEntitySet_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Fog_ParentEntitySet_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Fog_ParentEntitySet_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Fog_ParentEntityAboutToBeDetached_ID = "SignalWrapper_Fog_ParentEntityAboutToBeDetached";

class SignalWrapper_Fog_ParentEntityAboutToBeDetached
{
public:
    SignalWrapper_Fog_ParentEntityAboutToBeDetached(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_Fog_ParentEntityAboutToBeDetached : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Fog_ParentEntityAboutToBeDetached_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Fog_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Fog_ParentEntityAboutToBeDetached_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Fog_ParentEntityAboutToBeDetached_Connect(duk_context* ctx)
{
    SignalWrapper_Fog_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_Fog_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Fog_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Fog_ParentEntityAboutToBeDetached* receiver = new SignalReceiver_Fog_ParentEntityAboutToBeDetached();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Fog_ParentEntityAboutToBeDetached::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Fog_ParentEntityAboutToBeDetached_Disconnect(duk_context* ctx)
{
    SignalWrapper_Fog_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_Fog_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Fog_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Fog_ParentEntityAboutToBeDetached_Emit(duk_context* ctx)
{
    SignalWrapper_Fog_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_Fog_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Fog_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t Fog_Get_ParentEntityAboutToBeDetached(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    SignalWrapper_Fog_ParentEntityAboutToBeDetached* wrapper = new SignalWrapper_Fog_ParentEntityAboutToBeDetached(thisObj, &thisObj->ParentEntityAboutToBeDetached);
    PushValueObject(ctx, wrapper, SignalWrapper_Fog_ParentEntityAboutToBeDetached_ID, SignalWrapper_Fog_ParentEntityAboutToBeDetached_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Fog_ParentEntityAboutToBeDetached_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Fog_ParentEntityAboutToBeDetached_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Fog_ParentEntityAboutToBeDetached_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Fog_ParentEntityAboutToBeDetached_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Fog_ParentEntityAboutToBeDetached_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t Fog_TypeName(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    const String & ret = thisObj->TypeName();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Fog_TypeId(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    u32 ret = thisObj->TypeId();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Fog_Name(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    const String & ret = thisObj->Name();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Fog_SetName_String(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    String name = duk_require_string(ctx, 0);
    thisObj->SetName(name);
    return 0;
}

static duk_ret_t Fog_SetParentEntity_Entity(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    thisObj->SetParentEntity(entity);
    return 0;
}

static duk_ret_t Fog_SetReplicated_bool(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    thisObj->SetReplicated(enable);
    return 0;
}

static duk_ret_t Fog_IsReplicated(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    bool ret = thisObj->IsReplicated();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Fog_IsLocal(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    bool ret = thisObj->IsLocal();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Fog_IsUnacked(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    bool ret = thisObj->IsUnacked();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Fog_SetUpdateMode_AttributeChange__Type(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    AttributeChange::Type defaultmode = (AttributeChange::Type)(int)duk_require_number(ctx, 0);
    thisObj->SetUpdateMode(defaultmode);
    return 0;
}

static duk_ret_t Fog_UpdateMode(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    AttributeChange::Type ret = thisObj->UpdateMode();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Fog_Id(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    component_id_t ret = thisObj->Id();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Fog_SupportsDynamicAttributes(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    bool ret = thisObj->SupportsDynamicAttributes();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Fog_NumAttributes(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    int ret = thisObj->NumAttributes();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Fog_NumStaticAttributes(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    int ret = thisObj->NumStaticAttributes();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Fog_EmitAttributeChanged_String_AttributeChange__Type(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    String attributeName = duk_require_string(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->EmitAttributeChanged(attributeName, change);
    return 0;
}

static duk_ret_t Fog_ComponentChanged_AttributeChange__Type(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 0);
    thisObj->ComponentChanged(change);
    return 0;
}

static duk_ret_t Fog_ParentEntity(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    Entity * ret = thisObj->ParentEntity();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Fog_SetTemporary_bool(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    thisObj->SetTemporary(enable);
    return 0;
}

static duk_ret_t Fog_IsTemporary(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    bool ret = thisObj->IsTemporary();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Fog_ViewEnabled(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    bool ret = thisObj->ViewEnabled();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Fog_AttributeNames(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    StringVector ret = thisObj->AttributeNames();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t Fog_AttributeIds(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    StringVector ret = thisObj->AttributeIds();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t Fog_ShouldBeSerialized_bool_bool(duk_context* ctx)
{
    Fog* thisObj = GetThisWeakObject<Fog>(ctx);
    bool serializeTemporary = duk_require_boolean(ctx, 0);
    bool serializeLocal = duk_require_boolean(ctx, 1);
    bool ret = thisObj->ShouldBeSerialized(serializeTemporary, serializeLocal);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Fog_EnsureTypeNameWithoutPrefix_Static_String(duk_context* ctx)
{
    String tn = duk_require_string(ctx, 0);
    String ret = Fog::EnsureTypeNameWithoutPrefix(tn);
    duk_push_string(ctx, ret.CString());
    return 1;
}

static const duk_function_list_entry Fog_Functions[] = {
    {"TypeName", Fog_TypeName, 0}
    ,{"TypeId", Fog_TypeId, 0}
    ,{"Name", Fog_Name, 0}
    ,{"SetName", Fog_SetName_String, 1}
    ,{"SetParentEntity", Fog_SetParentEntity_Entity, 1}
    ,{"SetReplicated", Fog_SetReplicated_bool, 1}
    ,{"IsReplicated", Fog_IsReplicated, 0}
    ,{"IsLocal", Fog_IsLocal, 0}
    ,{"IsUnacked", Fog_IsUnacked, 0}
    ,{"SetUpdateMode", Fog_SetUpdateMode_AttributeChange__Type, 1}
    ,{"UpdateMode", Fog_UpdateMode, 0}
    ,{"Id", Fog_Id, 0}
    ,{"SupportsDynamicAttributes", Fog_SupportsDynamicAttributes, 0}
    ,{"NumAttributes", Fog_NumAttributes, 0}
    ,{"NumStaticAttributes", Fog_NumStaticAttributes, 0}
    ,{"EmitAttributeChanged", Fog_EmitAttributeChanged_String_AttributeChange__Type, 2}
    ,{"ComponentChanged", Fog_ComponentChanged_AttributeChange__Type, 1}
    ,{"ParentEntity", Fog_ParentEntity, 0}
    ,{"SetTemporary", Fog_SetTemporary_bool, 1}
    ,{"IsTemporary", Fog_IsTemporary, 0}
    ,{"ViewEnabled", Fog_ViewEnabled, 0}
    ,{"AttributeNames", Fog_AttributeNames, 0}
    ,{"AttributeIds", Fog_AttributeIds, 0}
    ,{"ShouldBeSerialized", Fog_ShouldBeSerialized_bool_bool, 2}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry Fog_StaticFunctions[] = {
    {"EnsureTypeNameWithoutPrefix", Fog_EnsureTypeNameWithoutPrefix_Static_String, 1}
    ,{nullptr, nullptr, 0}
};

void Expose_Fog(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Fog_StaticFunctions);
    duk_push_number(ctx, 0);
    duk_put_prop_string(ctx, -2, "None");
    duk_push_number(ctx, 1);
    duk_put_prop_string(ctx, -2, "Exponentially");
    duk_push_number(ctx, 2);
    duk_put_prop_string(ctx, -2, "ExponentiallySquare");
    duk_push_number(ctx, 3);
    duk_put_prop_string(ctx, -2, "Linear");
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Fog_Functions);
    DefineProperty(ctx, "ComponentNameChanged", Fog_Get_ComponentNameChanged, nullptr);
    DefineProperty(ctx, "ParentEntitySet", Fog_Get_ParentEntitySet, nullptr);
    DefineProperty(ctx, "ParentEntityAboutToBeDetached", Fog_Get_ParentEntityAboutToBeDetached, nullptr);
    DefineProperty(ctx, "typeName", Fog_TypeName, nullptr);
    DefineProperty(ctx, "typeId", Fog_TypeId, nullptr);
    DefineProperty(ctx, "name", Fog_Name, Fog_SetName_String);
    DefineProperty(ctx, "replicated", Fog_IsReplicated, Fog_SetReplicated_bool);
    DefineProperty(ctx, "local", Fog_IsLocal, nullptr);
    DefineProperty(ctx, "unacked", Fog_IsUnacked, nullptr);
    DefineProperty(ctx, "updateMode", Fog_UpdateMode, Fog_SetUpdateMode_AttributeChange__Type);
    DefineProperty(ctx, "id", Fog_Id, nullptr);
    DefineProperty(ctx, "temporary", Fog_IsTemporary, Fog_SetTemporary_bool);
    DefineProperty(ctx, "viewEnabled", Fog_ViewEnabled, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, Fog_ID);
}

}
