// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "AnimationController.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Entity.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{



static const char* AnimationController_ID = "AnimationController";

const char* SignalWrapper_AnimationController_AnimationFinished_ID = "SignalWrapper_AnimationController_AnimationFinished";

class SignalWrapper_AnimationController_AnimationFinished
{
public:
    SignalWrapper_AnimationController_AnimationFinished(Object* owner, Signal1< const String &>* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< const String &>* signal_;
};

class SignalReceiver_AnimationController_AnimationFinished : public SignalReceiver
{
public:
    void OnSignal(const String & param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        duk_push_string(ctx, param0.CString());
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_AnimationController_AnimationFinished_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_AnimationController_AnimationFinished>(ctx, SignalWrapper_AnimationController_AnimationFinished_ID);
    return 0;
}

static duk_ret_t SignalWrapper_AnimationController_AnimationFinished_Connect(duk_context* ctx)
{
    SignalWrapper_AnimationController_AnimationFinished* wrapper = GetThisValueObject<SignalWrapper_AnimationController_AnimationFinished>(ctx, SignalWrapper_AnimationController_AnimationFinished_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_AnimationController_AnimationFinished* receiver = new SignalReceiver_AnimationController_AnimationFinished();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_AnimationController_AnimationFinished::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AnimationController_AnimationFinished_Disconnect(duk_context* ctx)
{
    SignalWrapper_AnimationController_AnimationFinished* wrapper = GetThisValueObject<SignalWrapper_AnimationController_AnimationFinished>(ctx, SignalWrapper_AnimationController_AnimationFinished_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AnimationController_AnimationFinished_Emit(duk_context* ctx)
{
    SignalWrapper_AnimationController_AnimationFinished* wrapper = GetThisValueObject<SignalWrapper_AnimationController_AnimationFinished>(ctx, SignalWrapper_AnimationController_AnimationFinished_ID);
    if (!wrapper->owner_) return 0;
    String param0 = duk_require_string(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t AnimationController_Get_AnimationFinished(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    SignalWrapper_AnimationController_AnimationFinished* wrapper = new SignalWrapper_AnimationController_AnimationFinished(thisObj, &thisObj->AnimationFinished);
    PushValueObject(ctx, wrapper, SignalWrapper_AnimationController_AnimationFinished_ID, SignalWrapper_AnimationController_AnimationFinished_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_AnimationController_AnimationFinished_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_AnimationFinished_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_AnimationFinished_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_AnimationFinished_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_AnimationFinished_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_AnimationController_AnimationCycled_ID = "SignalWrapper_AnimationController_AnimationCycled";

class SignalWrapper_AnimationController_AnimationCycled
{
public:
    SignalWrapper_AnimationController_AnimationCycled(Object* owner, Signal1< const String &>* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< const String &>* signal_;
};

class SignalReceiver_AnimationController_AnimationCycled : public SignalReceiver
{
public:
    void OnSignal(const String & param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        duk_push_string(ctx, param0.CString());
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_AnimationController_AnimationCycled_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_AnimationController_AnimationCycled>(ctx, SignalWrapper_AnimationController_AnimationCycled_ID);
    return 0;
}

static duk_ret_t SignalWrapper_AnimationController_AnimationCycled_Connect(duk_context* ctx)
{
    SignalWrapper_AnimationController_AnimationCycled* wrapper = GetThisValueObject<SignalWrapper_AnimationController_AnimationCycled>(ctx, SignalWrapper_AnimationController_AnimationCycled_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_AnimationController_AnimationCycled* receiver = new SignalReceiver_AnimationController_AnimationCycled();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_AnimationController_AnimationCycled::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AnimationController_AnimationCycled_Disconnect(duk_context* ctx)
{
    SignalWrapper_AnimationController_AnimationCycled* wrapper = GetThisValueObject<SignalWrapper_AnimationController_AnimationCycled>(ctx, SignalWrapper_AnimationController_AnimationCycled_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AnimationController_AnimationCycled_Emit(duk_context* ctx)
{
    SignalWrapper_AnimationController_AnimationCycled* wrapper = GetThisValueObject<SignalWrapper_AnimationController_AnimationCycled>(ctx, SignalWrapper_AnimationController_AnimationCycled_ID);
    if (!wrapper->owner_) return 0;
    String param0 = duk_require_string(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t AnimationController_Get_AnimationCycled(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    SignalWrapper_AnimationController_AnimationCycled* wrapper = new SignalWrapper_AnimationController_AnimationCycled(thisObj, &thisObj->AnimationCycled);
    PushValueObject(ctx, wrapper, SignalWrapper_AnimationController_AnimationCycled_ID, SignalWrapper_AnimationController_AnimationCycled_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_AnimationController_AnimationCycled_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_AnimationCycled_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_AnimationCycled_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_AnimationCycled_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_AnimationCycled_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_AnimationController_ComponentNameChanged_ID = "SignalWrapper_AnimationController_ComponentNameChanged";

class SignalWrapper_AnimationController_ComponentNameChanged
{
public:
    SignalWrapper_AnimationController_ComponentNameChanged(Object* owner, Signal2< const String &, const String & >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal2< const String &, const String & >* signal_;
};

class SignalReceiver_AnimationController_ComponentNameChanged : public SignalReceiver
{
public:
    void OnSignal(const String & param0, const String & param1)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        duk_push_string(ctx, param0.CString());
        duk_put_prop_index(ctx, -2, 0);
        duk_push_string(ctx, param1.CString());
        duk_put_prop_index(ctx, -2, 1);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_AnimationController_ComponentNameChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_AnimationController_ComponentNameChanged>(ctx, SignalWrapper_AnimationController_ComponentNameChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_AnimationController_ComponentNameChanged_Connect(duk_context* ctx)
{
    SignalWrapper_AnimationController_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_AnimationController_ComponentNameChanged>(ctx, SignalWrapper_AnimationController_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_AnimationController_ComponentNameChanged* receiver = new SignalReceiver_AnimationController_ComponentNameChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_AnimationController_ComponentNameChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AnimationController_ComponentNameChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_AnimationController_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_AnimationController_ComponentNameChanged>(ctx, SignalWrapper_AnimationController_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AnimationController_ComponentNameChanged_Emit(duk_context* ctx)
{
    SignalWrapper_AnimationController_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_AnimationController_ComponentNameChanged>(ctx, SignalWrapper_AnimationController_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    String param0 = duk_require_string(ctx, 0);
    String param1 = duk_require_string(ctx, 1);
    wrapper->signal_->Emit(param0, param1);
    return 0;
}

static duk_ret_t AnimationController_Get_ComponentNameChanged(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    SignalWrapper_AnimationController_ComponentNameChanged* wrapper = new SignalWrapper_AnimationController_ComponentNameChanged(thisObj, &thisObj->ComponentNameChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_AnimationController_ComponentNameChanged_ID, SignalWrapper_AnimationController_ComponentNameChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_AnimationController_ComponentNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_ComponentNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_ComponentNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_ComponentNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_ComponentNameChanged_Emit, 2);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_AnimationController_ParentEntitySet_ID = "SignalWrapper_AnimationController_ParentEntitySet";

class SignalWrapper_AnimationController_ParentEntitySet
{
public:
    SignalWrapper_AnimationController_ParentEntitySet(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_AnimationController_ParentEntitySet : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_AnimationController_ParentEntitySet_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_AnimationController_ParentEntitySet>(ctx, SignalWrapper_AnimationController_ParentEntitySet_ID);
    return 0;
}

static duk_ret_t SignalWrapper_AnimationController_ParentEntitySet_Connect(duk_context* ctx)
{
    SignalWrapper_AnimationController_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_AnimationController_ParentEntitySet>(ctx, SignalWrapper_AnimationController_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_AnimationController_ParentEntitySet* receiver = new SignalReceiver_AnimationController_ParentEntitySet();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_AnimationController_ParentEntitySet::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AnimationController_ParentEntitySet_Disconnect(duk_context* ctx)
{
    SignalWrapper_AnimationController_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_AnimationController_ParentEntitySet>(ctx, SignalWrapper_AnimationController_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AnimationController_ParentEntitySet_Emit(duk_context* ctx)
{
    SignalWrapper_AnimationController_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_AnimationController_ParentEntitySet>(ctx, SignalWrapper_AnimationController_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t AnimationController_Get_ParentEntitySet(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    SignalWrapper_AnimationController_ParentEntitySet* wrapper = new SignalWrapper_AnimationController_ParentEntitySet(thisObj, &thisObj->ParentEntitySet);
    PushValueObject(ctx, wrapper, SignalWrapper_AnimationController_ParentEntitySet_ID, SignalWrapper_AnimationController_ParentEntitySet_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_AnimationController_ParentEntitySet_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_ParentEntitySet_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_ParentEntitySet_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_ParentEntitySet_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_ParentEntitySet_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_ID = "SignalWrapper_AnimationController_ParentEntityAboutToBeDetached";

class SignalWrapper_AnimationController_ParentEntityAboutToBeDetached
{
public:
    SignalWrapper_AnimationController_ParentEntityAboutToBeDetached(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_AnimationController_ParentEntityAboutToBeDetached : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_AnimationController_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_ID);
    return 0;
}

static duk_ret_t SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_Connect(duk_context* ctx)
{
    SignalWrapper_AnimationController_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_AnimationController_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_AnimationController_ParentEntityAboutToBeDetached* receiver = new SignalReceiver_AnimationController_ParentEntityAboutToBeDetached();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_AnimationController_ParentEntityAboutToBeDetached::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_Disconnect(duk_context* ctx)
{
    SignalWrapper_AnimationController_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_AnimationController_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_Emit(duk_context* ctx)
{
    SignalWrapper_AnimationController_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_AnimationController_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t AnimationController_Get_ParentEntityAboutToBeDetached(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    SignalWrapper_AnimationController_ParentEntityAboutToBeDetached* wrapper = new SignalWrapper_AnimationController_ParentEntityAboutToBeDetached(thisObj, &thisObj->ParentEntityAboutToBeDetached);
    PushValueObject(ctx, wrapper, SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_ID, SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_AnimationController_ParentEntityAboutToBeDetached_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t AnimationController_Update_float(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    float frametime = (float)duk_require_number(ctx, 0);
    thisObj->Update(frametime);
    return 0;
}

static duk_ret_t AnimationController_DrawSkeleton(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    thisObj->DrawSkeleton();
    return 0;
}

static duk_ret_t AnimationController_EnableAnimation_String_bool_float_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    bool looped = numArgs > 1 ? duk_require_boolean(ctx, 1) : true;
    float fadein = numArgs > 2 ? (float)duk_require_number(ctx, 2) : 0.0f;
    bool highPriority = numArgs > 3 ? duk_require_boolean(ctx, 3) : false;
    bool ret = thisObj->EnableAnimation(name, looped, fadein, highPriority);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_EnableExclusiveAnimation_String_bool_float_float_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    bool looped = duk_require_boolean(ctx, 1);
    float fadein = numArgs > 2 ? (float)duk_require_number(ctx, 2) : 0.0f;
    float fadeout = numArgs > 3 ? (float)duk_require_number(ctx, 3) : 0.0f;
    bool highPriority = numArgs > 4 ? duk_require_boolean(ctx, 4) : false;
    bool ret = thisObj->EnableExclusiveAnimation(name, looped, fadein, fadeout, highPriority);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_HasAnimationFinished_String(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    bool ret = thisObj->HasAnimationFinished(name);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_IsAnimationActive_String_bool(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    bool checkFadeout = numArgs > 1 ? duk_require_boolean(ctx, 1) : true;
    bool ret = thisObj->IsAnimationActive(name, checkFadeout);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_DisableAnimation_String_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    float fadeout = numArgs > 1 ? (float)duk_require_number(ctx, 1) : 0.0f;
    bool ret = thisObj->DisableAnimation(name, fadeout);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_DisableAllAnimations_float(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    float fadeout = numArgs > 0 ? (float)duk_require_number(ctx, 0) : 0.0f;
    thisObj->DisableAllAnimations(fadeout);
    return 0;
}

static duk_ret_t AnimationController_SetAnimationToEnd_String(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    thisObj->SetAnimationToEnd(name);
    return 0;
}

static duk_ret_t AnimationController_SetAnimationSpeed_String_float(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    float speedFactor = (float)duk_require_number(ctx, 1);
    bool ret = thisObj->SetAnimationSpeed(name, speedFactor);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_SetAnimationWeight_String_float(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    float weight = (float)duk_require_number(ctx, 1);
    bool ret = thisObj->SetAnimationWeight(name, weight);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_SetAnimationPriority_String_bool(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    bool highPriority = duk_require_boolean(ctx, 1);
    bool ret = thisObj->SetAnimationPriority(name, highPriority);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_SetAnimationTimePosition_String_float(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    float newPosition = (float)duk_require_number(ctx, 1);
    bool ret = thisObj->SetAnimationTimePosition(name, newPosition);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_SetAnimationRelativeTimePosition_String_float(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    float newPosition = (float)duk_require_number(ctx, 1);
    bool ret = thisObj->SetAnimationRelativeTimePosition(name, newPosition);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_SetAnimationAutoStop_String_bool(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    bool enable = duk_require_boolean(ctx, 1);
    bool ret = thisObj->SetAnimationAutoStop(name, enable);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_SetAnimationNumLoops_String_unsigned(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    unsigned repeats = (unsigned)duk_require_number(ctx, 1);
    bool ret = thisObj->SetAnimationNumLoops(name, repeats);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_AvailableAnimations(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    StringVector ret = thisObj->AvailableAnimations();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_ActiveAnimations(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    StringVector ret = thisObj->ActiveAnimations();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_AnimationLength_String(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    float ret = thisObj->AnimationLength(name);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_AnimationTimePosition_String(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    float ret = thisObj->AnimationTimePosition(name);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_AnimationRelativeTimePosition_String(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    float ret = thisObj->AnimationRelativeTimePosition(name);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_PlayAnim_String_String_String(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    String fadein = duk_require_string(ctx, 1);
    String exclusive = duk_require_string(ctx, 2);
    thisObj->PlayAnim(name, fadein, exclusive);
    return 0;
}

static duk_ret_t AnimationController_PlayLoopedAnim_String_String_String(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    String fadein = duk_require_string(ctx, 1);
    String exclusive = duk_require_string(ctx, 2);
    thisObj->PlayLoopedAnim(name, fadein, exclusive);
    return 0;
}

static duk_ret_t AnimationController_PlayReverseAnim_String_String_String(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    String fadein = duk_require_string(ctx, 1);
    String exclusive = duk_require_string(ctx, 2);
    thisObj->PlayReverseAnim(name, fadein, exclusive);
    return 0;
}

static duk_ret_t AnimationController_PlayAnimAutoStop_String_String_String(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    String fadein = duk_require_string(ctx, 1);
    String exclusive = duk_require_string(ctx, 2);
    thisObj->PlayAnimAutoStop(name, fadein, exclusive);
    return 0;
}

static duk_ret_t AnimationController_StopAnim_String_String(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    String fadeout = duk_require_string(ctx, 1);
    thisObj->StopAnim(name, fadeout);
    return 0;
}

static duk_ret_t AnimationController_StopAllAnims_String(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String fadeout = duk_require_string(ctx, 0);
    thisObj->StopAllAnims(fadeout);
    return 0;
}

static duk_ret_t AnimationController_SetAnimSpeed_String_String(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    String animspeed = duk_require_string(ctx, 1);
    thisObj->SetAnimSpeed(name, animspeed);
    return 0;
}

static duk_ret_t AnimationController_SetAnimWeight_String_String(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    String animweight = duk_require_string(ctx, 1);
    thisObj->SetAnimWeight(name, animweight);
    return 0;
}

static duk_ret_t AnimationController_TypeName(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    const String & ret = thisObj->TypeName();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t AnimationController_TypeId(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    u32 ret = thisObj->TypeId();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_Name(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    const String & ret = thisObj->Name();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t AnimationController_SetName_String(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String name = duk_require_string(ctx, 0);
    thisObj->SetName(name);
    return 0;
}

static duk_ret_t AnimationController_SetParentEntity_Entity(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    thisObj->SetParentEntity(entity);
    return 0;
}

static duk_ret_t AnimationController_SetReplicated_bool(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    thisObj->SetReplicated(enable);
    return 0;
}

static duk_ret_t AnimationController_SetAttribute_String_Variant_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String id = duk_require_string(ctx, 0);
    Variant value = GetVariant(ctx, 1);
    AttributeChange::Type change = numArgs > 2 ? (AttributeChange::Type)(int)duk_require_number(ctx, 2) : AttributeChange::Default;
    thisObj->SetAttribute(id, value, change);
    return 0;
}

static duk_ret_t AnimationController_GetAttribute_String(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String id = duk_require_string(ctx, 0);
    Variant ret = thisObj->GetAttribute(id);
    PushVariant(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_IsReplicated(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    bool ret = thisObj->IsReplicated();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_IsLocal(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    bool ret = thisObj->IsLocal();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_IsUnacked(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    bool ret = thisObj->IsUnacked();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_SetUpdateMode_AttributeChange__Type(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    AttributeChange::Type defaultmode = (AttributeChange::Type)(int)duk_require_number(ctx, 0);
    thisObj->SetUpdateMode(defaultmode);
    return 0;
}

static duk_ret_t AnimationController_UpdateMode(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    AttributeChange::Type ret = thisObj->UpdateMode();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_Id(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    component_id_t ret = thisObj->Id();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_SupportsDynamicAttributes(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    bool ret = thisObj->SupportsDynamicAttributes();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_NumAttributes(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    int ret = thisObj->NumAttributes();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_NumStaticAttributes(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    int ret = thisObj->NumStaticAttributes();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_EmitAttributeChanged_String_AttributeChange__Type(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    String attributeName = duk_require_string(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->EmitAttributeChanged(attributeName, change);
    return 0;
}

static duk_ret_t AnimationController_ComponentChanged_AttributeChange__Type(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 0);
    thisObj->ComponentChanged(change);
    return 0;
}

static duk_ret_t AnimationController_ParentEntity(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    Entity * ret = thisObj->ParentEntity();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_SetTemporary_bool(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    thisObj->SetTemporary(enable);
    return 0;
}

static duk_ret_t AnimationController_IsTemporary(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    bool ret = thisObj->IsTemporary();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_ViewEnabled(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    bool ret = thisObj->ViewEnabled();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_AttributeNames(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    StringVector ret = thisObj->AttributeNames();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_AttributeIds(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    StringVector ret = thisObj->AttributeIds();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_ShouldBeSerialized_bool_bool(duk_context* ctx)
{
    AnimationController* thisObj = GetThisWeakObject<AnimationController>(ctx);
    bool serializeTemporary = duk_require_boolean(ctx, 0);
    bool serializeLocal = duk_require_boolean(ctx, 1);
    bool ret = thisObj->ShouldBeSerialized(serializeTemporary, serializeLocal);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t AnimationController_EnsureTypeNameWithoutPrefix_Static_String(duk_context* ctx)
{
    String tn = duk_require_string(ctx, 0);
    String ret = AnimationController::EnsureTypeNameWithoutPrefix(tn);
    duk_push_string(ctx, ret.CString());
    return 1;
}

static const duk_function_list_entry AnimationController_Functions[] = {
    {"Update", AnimationController_Update_float, 1}
    ,{"DrawSkeleton", AnimationController_DrawSkeleton, 0}
    ,{"EnableAnimation", AnimationController_EnableAnimation_String_bool_float_bool, DUK_VARARGS}
    ,{"EnableExclusiveAnimation", AnimationController_EnableExclusiveAnimation_String_bool_float_float_bool, DUK_VARARGS}
    ,{"HasAnimationFinished", AnimationController_HasAnimationFinished_String, 1}
    ,{"IsAnimationActive", AnimationController_IsAnimationActive_String_bool, DUK_VARARGS}
    ,{"DisableAnimation", AnimationController_DisableAnimation_String_float, DUK_VARARGS}
    ,{"DisableAllAnimations", AnimationController_DisableAllAnimations_float, DUK_VARARGS}
    ,{"SetAnimationToEnd", AnimationController_SetAnimationToEnd_String, 1}
    ,{"SetAnimationSpeed", AnimationController_SetAnimationSpeed_String_float, 2}
    ,{"SetAnimationWeight", AnimationController_SetAnimationWeight_String_float, 2}
    ,{"SetAnimationPriority", AnimationController_SetAnimationPriority_String_bool, 2}
    ,{"SetAnimationTimePosition", AnimationController_SetAnimationTimePosition_String_float, 2}
    ,{"SetAnimationRelativeTimePosition", AnimationController_SetAnimationRelativeTimePosition_String_float, 2}
    ,{"SetAnimationAutoStop", AnimationController_SetAnimationAutoStop_String_bool, 2}
    ,{"SetAnimationNumLoops", AnimationController_SetAnimationNumLoops_String_unsigned, 2}
    ,{"AvailableAnimations", AnimationController_AvailableAnimations, 0}
    ,{"ActiveAnimations", AnimationController_ActiveAnimations, 0}
    ,{"AnimationLength", AnimationController_AnimationLength_String, 1}
    ,{"AnimationTimePosition", AnimationController_AnimationTimePosition_String, 1}
    ,{"AnimationRelativeTimePosition", AnimationController_AnimationRelativeTimePosition_String, 1}
    ,{"PlayAnim", AnimationController_PlayAnim_String_String_String, 3}
    ,{"PlayLoopedAnim", AnimationController_PlayLoopedAnim_String_String_String, 3}
    ,{"PlayReverseAnim", AnimationController_PlayReverseAnim_String_String_String, 3}
    ,{"PlayAnimAutoStop", AnimationController_PlayAnimAutoStop_String_String_String, 3}
    ,{"StopAnim", AnimationController_StopAnim_String_String, 2}
    ,{"StopAllAnims", AnimationController_StopAllAnims_String, 1}
    ,{"SetAnimSpeed", AnimationController_SetAnimSpeed_String_String, 2}
    ,{"SetAnimWeight", AnimationController_SetAnimWeight_String_String, 2}
    ,{"TypeName", AnimationController_TypeName, 0}
    ,{"TypeId", AnimationController_TypeId, 0}
    ,{"Name", AnimationController_Name, 0}
    ,{"SetName", AnimationController_SetName_String, 1}
    ,{"SetParentEntity", AnimationController_SetParentEntity_Entity, 1}
    ,{"SetReplicated", AnimationController_SetReplicated_bool, 1}
    ,{"SetAttribute", AnimationController_SetAttribute_String_Variant_AttributeChange__Type, DUK_VARARGS}
    ,{"GetAttribute", AnimationController_GetAttribute_String, 1}
    ,{"IsReplicated", AnimationController_IsReplicated, 0}
    ,{"IsLocal", AnimationController_IsLocal, 0}
    ,{"IsUnacked", AnimationController_IsUnacked, 0}
    ,{"SetUpdateMode", AnimationController_SetUpdateMode_AttributeChange__Type, 1}
    ,{"UpdateMode", AnimationController_UpdateMode, 0}
    ,{"Id", AnimationController_Id, 0}
    ,{"SupportsDynamicAttributes", AnimationController_SupportsDynamicAttributes, 0}
    ,{"NumAttributes", AnimationController_NumAttributes, 0}
    ,{"NumStaticAttributes", AnimationController_NumStaticAttributes, 0}
    ,{"EmitAttributeChanged", AnimationController_EmitAttributeChanged_String_AttributeChange__Type, 2}
    ,{"ComponentChanged", AnimationController_ComponentChanged_AttributeChange__Type, 1}
    ,{"ParentEntity", AnimationController_ParentEntity, 0}
    ,{"SetTemporary", AnimationController_SetTemporary_bool, 1}
    ,{"IsTemporary", AnimationController_IsTemporary, 0}
    ,{"ViewEnabled", AnimationController_ViewEnabled, 0}
    ,{"AttributeNames", AnimationController_AttributeNames, 0}
    ,{"AttributeIds", AnimationController_AttributeIds, 0}
    ,{"ShouldBeSerialized", AnimationController_ShouldBeSerialized_bool_bool, 2}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry AnimationController_StaticFunctions[] = {
    {"EnsureTypeNameWithoutPrefix", AnimationController_EnsureTypeNameWithoutPrefix_Static_String, 1}
    ,{nullptr, nullptr, 0}
};

void Expose_AnimationController(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, AnimationController_StaticFunctions);
    duk_push_number(ctx, 0);
    duk_put_prop_string(ctx, -2, "FadeInPhase");
    duk_push_number(ctx, 1);
    duk_put_prop_string(ctx, -2, "PlayPhase");
    duk_push_number(ctx, 2);
    duk_put_prop_string(ctx, -2, "FadeOutPhase");
    duk_push_number(ctx, 3);
    duk_put_prop_string(ctx, -2, "StopPhase");
    duk_push_number(ctx, 4);
    duk_put_prop_string(ctx, -2, "FreePhase");
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, AnimationController_Functions);
    DefineProperty(ctx, "AnimationFinished", AnimationController_Get_AnimationFinished, nullptr);
    DefineProperty(ctx, "AnimationCycled", AnimationController_Get_AnimationCycled, nullptr);
    DefineProperty(ctx, "ComponentNameChanged", AnimationController_Get_ComponentNameChanged, nullptr);
    DefineProperty(ctx, "ParentEntitySet", AnimationController_Get_ParentEntitySet, nullptr);
    DefineProperty(ctx, "ParentEntityAboutToBeDetached", AnimationController_Get_ParentEntityAboutToBeDetached, nullptr);
    DefineProperty(ctx, "typeName", AnimationController_TypeName, nullptr);
    DefineProperty(ctx, "typeId", AnimationController_TypeId, nullptr);
    DefineProperty(ctx, "name", AnimationController_Name, AnimationController_SetName_String);
    DefineProperty(ctx, "replicated", AnimationController_IsReplicated, AnimationController_SetReplicated_bool);
    DefineProperty(ctx, "local", AnimationController_IsLocal, nullptr);
    DefineProperty(ctx, "unacked", AnimationController_IsUnacked, nullptr);
    DefineProperty(ctx, "updateMode", AnimationController_UpdateMode, AnimationController_SetUpdateMode_AttributeChange__Type);
    DefineProperty(ctx, "id", AnimationController_Id, nullptr);
    DefineProperty(ctx, "temporary", AnimationController_IsTemporary, AnimationController_SetTemporary_bool);
    DefineProperty(ctx, "viewEnabled", AnimationController_ViewEnabled, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, AnimationController_ID);
}

}
