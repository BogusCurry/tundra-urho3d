// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "Terrain.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Entity.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{

static const char* float3_ID = "float3";

static duk_ret_t float3_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<float3>(ctx, float3_ID);
    return 0;
}


static const char* Terrain_ID = "Terrain";

const char* SignalWrapper_Terrain_TerrainRegenerated_ID = "SignalWrapper_Terrain_TerrainRegenerated";

class SignalWrapper_Terrain_TerrainRegenerated
{
public:
    SignalWrapper_Terrain_TerrainRegenerated(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_Terrain_TerrainRegenerated : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Terrain_TerrainRegenerated_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Terrain_TerrainRegenerated>(ctx, SignalWrapper_Terrain_TerrainRegenerated_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Terrain_TerrainRegenerated_Connect(duk_context* ctx)
{
    SignalWrapper_Terrain_TerrainRegenerated* wrapper = GetThisValueObject<SignalWrapper_Terrain_TerrainRegenerated>(ctx, SignalWrapper_Terrain_TerrainRegenerated_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Terrain_TerrainRegenerated* receiver = new SignalReceiver_Terrain_TerrainRegenerated();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Terrain_TerrainRegenerated::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Terrain_TerrainRegenerated_Disconnect(duk_context* ctx)
{
    SignalWrapper_Terrain_TerrainRegenerated* wrapper = GetThisValueObject<SignalWrapper_Terrain_TerrainRegenerated>(ctx, SignalWrapper_Terrain_TerrainRegenerated_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Terrain_TerrainRegenerated_Emit(duk_context* ctx)
{
    SignalWrapper_Terrain_TerrainRegenerated* wrapper = GetThisValueObject<SignalWrapper_Terrain_TerrainRegenerated>(ctx, SignalWrapper_Terrain_TerrainRegenerated_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t Terrain_Get_TerrainRegenerated(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    SignalWrapper_Terrain_TerrainRegenerated* wrapper = new SignalWrapper_Terrain_TerrainRegenerated(thisObj, &thisObj->TerrainRegenerated);
    PushValueObject(ctx, wrapper, SignalWrapper_Terrain_TerrainRegenerated_ID, SignalWrapper_Terrain_TerrainRegenerated_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Terrain_TerrainRegenerated_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_TerrainRegenerated_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_TerrainRegenerated_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_TerrainRegenerated_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_TerrainRegenerated_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Terrain_ComponentNameChanged_ID = "SignalWrapper_Terrain_ComponentNameChanged";

class SignalWrapper_Terrain_ComponentNameChanged
{
public:
    SignalWrapper_Terrain_ComponentNameChanged(Object* owner, Signal2< const String &, const String & >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal2< const String &, const String & >* signal_;
};

class SignalReceiver_Terrain_ComponentNameChanged : public SignalReceiver
{
public:
    void OnSignal(const String & param0, const String & param1)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        duk_push_string(ctx, param0.CString());
        duk_put_prop_index(ctx, -2, 0);
        duk_push_string(ctx, param1.CString());
        duk_put_prop_index(ctx, -2, 1);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Terrain_ComponentNameChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Terrain_ComponentNameChanged>(ctx, SignalWrapper_Terrain_ComponentNameChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Terrain_ComponentNameChanged_Connect(duk_context* ctx)
{
    SignalWrapper_Terrain_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_Terrain_ComponentNameChanged>(ctx, SignalWrapper_Terrain_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Terrain_ComponentNameChanged* receiver = new SignalReceiver_Terrain_ComponentNameChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Terrain_ComponentNameChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Terrain_ComponentNameChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_Terrain_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_Terrain_ComponentNameChanged>(ctx, SignalWrapper_Terrain_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Terrain_ComponentNameChanged_Emit(duk_context* ctx)
{
    SignalWrapper_Terrain_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_Terrain_ComponentNameChanged>(ctx, SignalWrapper_Terrain_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    String param0 = duk_require_string(ctx, 0);
    String param1 = duk_require_string(ctx, 1);
    wrapper->signal_->Emit(param0, param1);
    return 0;
}

static duk_ret_t Terrain_Get_ComponentNameChanged(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    SignalWrapper_Terrain_ComponentNameChanged* wrapper = new SignalWrapper_Terrain_ComponentNameChanged(thisObj, &thisObj->ComponentNameChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_Terrain_ComponentNameChanged_ID, SignalWrapper_Terrain_ComponentNameChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Terrain_ComponentNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_ComponentNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_ComponentNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_ComponentNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_ComponentNameChanged_Emit, 2);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Terrain_ParentEntitySet_ID = "SignalWrapper_Terrain_ParentEntitySet";

class SignalWrapper_Terrain_ParentEntitySet
{
public:
    SignalWrapper_Terrain_ParentEntitySet(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_Terrain_ParentEntitySet : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Terrain_ParentEntitySet_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Terrain_ParentEntitySet>(ctx, SignalWrapper_Terrain_ParentEntitySet_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Terrain_ParentEntitySet_Connect(duk_context* ctx)
{
    SignalWrapper_Terrain_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_Terrain_ParentEntitySet>(ctx, SignalWrapper_Terrain_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Terrain_ParentEntitySet* receiver = new SignalReceiver_Terrain_ParentEntitySet();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Terrain_ParentEntitySet::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Terrain_ParentEntitySet_Disconnect(duk_context* ctx)
{
    SignalWrapper_Terrain_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_Terrain_ParentEntitySet>(ctx, SignalWrapper_Terrain_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Terrain_ParentEntitySet_Emit(duk_context* ctx)
{
    SignalWrapper_Terrain_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_Terrain_ParentEntitySet>(ctx, SignalWrapper_Terrain_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t Terrain_Get_ParentEntitySet(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    SignalWrapper_Terrain_ParentEntitySet* wrapper = new SignalWrapper_Terrain_ParentEntitySet(thisObj, &thisObj->ParentEntitySet);
    PushValueObject(ctx, wrapper, SignalWrapper_Terrain_ParentEntitySet_ID, SignalWrapper_Terrain_ParentEntitySet_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Terrain_ParentEntitySet_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_ParentEntitySet_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_ParentEntitySet_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_ParentEntitySet_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_ParentEntitySet_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_Terrain_ParentEntityAboutToBeDetached_ID = "SignalWrapper_Terrain_ParentEntityAboutToBeDetached";

class SignalWrapper_Terrain_ParentEntityAboutToBeDetached
{
public:
    SignalWrapper_Terrain_ParentEntityAboutToBeDetached(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_Terrain_ParentEntityAboutToBeDetached : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_Terrain_ParentEntityAboutToBeDetached_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_Terrain_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Terrain_ParentEntityAboutToBeDetached_ID);
    return 0;
}

static duk_ret_t SignalWrapper_Terrain_ParentEntityAboutToBeDetached_Connect(duk_context* ctx)
{
    SignalWrapper_Terrain_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_Terrain_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Terrain_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_Terrain_ParentEntityAboutToBeDetached* receiver = new SignalReceiver_Terrain_ParentEntityAboutToBeDetached();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_Terrain_ParentEntityAboutToBeDetached::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Terrain_ParentEntityAboutToBeDetached_Disconnect(duk_context* ctx)
{
    SignalWrapper_Terrain_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_Terrain_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Terrain_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_Terrain_ParentEntityAboutToBeDetached_Emit(duk_context* ctx)
{
    SignalWrapper_Terrain_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_Terrain_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_Terrain_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t Terrain_Get_ParentEntityAboutToBeDetached(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    SignalWrapper_Terrain_ParentEntityAboutToBeDetached* wrapper = new SignalWrapper_Terrain_ParentEntityAboutToBeDetached(thisObj, &thisObj->ParentEntityAboutToBeDetached);
    PushValueObject(ctx, wrapper, SignalWrapper_Terrain_ParentEntityAboutToBeDetached_ID, SignalWrapper_Terrain_ParentEntityAboutToBeDetached_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_Terrain_ParentEntityAboutToBeDetached_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_ParentEntityAboutToBeDetached_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_ParentEntityAboutToBeDetached_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_ParentEntityAboutToBeDetached_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_Terrain_ParentEntityAboutToBeDetached_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t Terrain_GetTerrainHeightRange_float_float(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    float minHeight = (float)duk_require_number(ctx, 0);
    float maxHeight = (float)duk_require_number(ctx, 1);
    thisObj->GetTerrainHeightRange(minHeight, maxHeight);
    return 0;
}

static duk_ret_t Terrain_PatchExists_uint_uint(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    uint patchX = (uint)duk_require_number(ctx, 0);
    uint patchY = (uint)duk_require_number(ctx, 1);
    bool ret = thisObj->PatchExists(patchX, patchY);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_AllPatchesLoaded(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    bool ret = thisObj->AllPatchesLoaded();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_PatchWidth(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    uint ret = thisObj->PatchWidth();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_PatchHeight(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    uint ret = thisObj->PatchHeight();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_VerticesWidth(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    uint ret = thisObj->VerticesWidth();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_VerticesHeight(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    uint ret = thisObj->VerticesHeight();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_Destroy(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    thisObj->Destroy();
    return 0;
}

static duk_ret_t Terrain_GetPoint_uint_uint(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    uint x = (uint)duk_require_number(ctx, 0);
    uint y = (uint)duk_require_number(ctx, 1);
    float ret = thisObj->GetPoint(x, y);
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_SetPointHeight_uint_uint_float(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    uint x = (uint)duk_require_number(ctx, 0);
    uint y = (uint)duk_require_number(ctx, 1);
    float height = (float)duk_require_number(ctx, 2);
    thisObj->SetPointHeight(x, y, height);
    return 0;
}

static duk_ret_t Terrain_LoadFromImageFile_String_float_float(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    String filename = duk_require_string(ctx, 0);
    float offset = (float)duk_require_number(ctx, 1);
    float scale = (float)duk_require_number(ctx, 2);
    bool ret = thisObj->LoadFromImageFile(filename, offset, scale);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_DirtyAllTerrainPatches(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    thisObj->DirtyAllTerrainPatches();
    return 0;
}

static duk_ret_t Terrain_RegenerateDirtyTerrainPatches(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    thisObj->RegenerateDirtyTerrainPatches();
    return 0;
}

static duk_ret_t Terrain_GetTerrainMinHeight(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    float ret = thisObj->GetTerrainMinHeight();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_GetTerrainMaxHeight(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    float ret = thisObj->GetTerrainMaxHeight();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_Resize_uint_uint_uint_uint(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    uint newWidth = (uint)duk_require_number(ctx, 0);
    uint newHeight = (uint)duk_require_number(ctx, 1);
    uint oldPatchStartX = numArgs > 2 ? (uint)duk_require_number(ctx, 2) : 0;
    uint oldPatchStartY = numArgs > 3 ? (uint)duk_require_number(ctx, 3) : 0;
    thisObj->Resize(newWidth, newHeight, oldPatchStartX, oldPatchStartY);
    return 0;
}

static duk_ret_t Terrain_MakePatchFlat_uint_uint_float(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    uint patchX = (uint)duk_require_number(ctx, 0);
    uint patchY = (uint)duk_require_number(ctx, 1);
    float heightValue = (float)duk_require_number(ctx, 2);
    thisObj->MakePatchFlat(patchX, patchY, heightValue);
    return 0;
}

static duk_ret_t Terrain_TypeName(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    const String & ret = thisObj->TypeName();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Terrain_TypeId(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    u32 ret = thisObj->TypeId();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_Name(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    const String & ret = thisObj->Name();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t Terrain_SetName_String(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    String name = duk_require_string(ctx, 0);
    thisObj->SetName(name);
    return 0;
}

static duk_ret_t Terrain_SetParentEntity_Entity(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    thisObj->SetParentEntity(entity);
    return 0;
}

static duk_ret_t Terrain_SetReplicated_bool(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    thisObj->SetReplicated(enable);
    return 0;
}

static duk_ret_t Terrain_SetAttribute_String_Variant_AttributeChange__Type(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    String id = duk_require_string(ctx, 0);
    Variant value = GetVariant(ctx, 1);
    AttributeChange::Type change = numArgs > 2 ? (AttributeChange::Type)(int)duk_require_number(ctx, 2) : AttributeChange::Default;
    thisObj->SetAttribute(id, value, change);
    return 0;
}

static duk_ret_t Terrain_GetAttribute_String(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    String id = duk_require_string(ctx, 0);
    Variant ret = thisObj->GetAttribute(id);
    PushVariant(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_IsReplicated(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    bool ret = thisObj->IsReplicated();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_IsLocal(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    bool ret = thisObj->IsLocal();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_IsUnacked(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    bool ret = thisObj->IsUnacked();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_SetUpdateMode_AttributeChange__Type(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    AttributeChange::Type defaultmode = (AttributeChange::Type)(int)duk_require_number(ctx, 0);
    thisObj->SetUpdateMode(defaultmode);
    return 0;
}

static duk_ret_t Terrain_UpdateMode(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    AttributeChange::Type ret = thisObj->UpdateMode();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_Id(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    component_id_t ret = thisObj->Id();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_SupportsDynamicAttributes(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    bool ret = thisObj->SupportsDynamicAttributes();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_NumAttributes(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    int ret = thisObj->NumAttributes();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_NumStaticAttributes(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    int ret = thisObj->NumStaticAttributes();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_EmitAttributeChanged_String_AttributeChange__Type(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    String attributeName = duk_require_string(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->EmitAttributeChanged(attributeName, change);
    return 0;
}

static duk_ret_t Terrain_ComponentChanged_AttributeChange__Type(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 0);
    thisObj->ComponentChanged(change);
    return 0;
}

static duk_ret_t Terrain_ParentEntity(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    Entity * ret = thisObj->ParentEntity();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_SetTemporary_bool(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    thisObj->SetTemporary(enable);
    return 0;
}

static duk_ret_t Terrain_IsTemporary(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    bool ret = thisObj->IsTemporary();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_ViewEnabled(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    bool ret = thisObj->ViewEnabled();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_AttributeNames(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    StringVector ret = thisObj->AttributeNames();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_AttributeIds(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    StringVector ret = thisObj->AttributeIds();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_ShouldBeSerialized_bool_bool(duk_context* ctx)
{
    Terrain* thisObj = GetThisWeakObject<Terrain>(ctx);
    bool serializeTemporary = duk_require_boolean(ctx, 0);
    bool serializeLocal = duk_require_boolean(ctx, 1);
    bool ret = thisObj->ShouldBeSerialized(serializeTemporary, serializeLocal);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t Terrain_EnsureTypeNameWithoutPrefix_Static_String(duk_context* ctx)
{
    String tn = duk_require_string(ctx, 0);
    String ret = Terrain::EnsureTypeNameWithoutPrefix(tn);
    duk_push_string(ctx, ret.CString());
    return 1;
}

static const duk_function_list_entry Terrain_Functions[] = {
    {"GetTerrainHeightRange", Terrain_GetTerrainHeightRange_float_float, 2}
    ,{"PatchExists", Terrain_PatchExists_uint_uint, 2}
    ,{"AllPatchesLoaded", Terrain_AllPatchesLoaded, 0}
    ,{"PatchWidth", Terrain_PatchWidth, 0}
    ,{"PatchHeight", Terrain_PatchHeight, 0}
    ,{"VerticesWidth", Terrain_VerticesWidth, 0}
    ,{"VerticesHeight", Terrain_VerticesHeight, 0}
    ,{"Destroy", Terrain_Destroy, 0}
    ,{"GetPoint", Terrain_GetPoint_uint_uint, 2}
    ,{"SetPointHeight", Terrain_SetPointHeight_uint_uint_float, 3}
    ,{"LoadFromImageFile", Terrain_LoadFromImageFile_String_float_float, 3}
    ,{"DirtyAllTerrainPatches", Terrain_DirtyAllTerrainPatches, 0}
    ,{"RegenerateDirtyTerrainPatches", Terrain_RegenerateDirtyTerrainPatches, 0}
    ,{"GetTerrainMinHeight", Terrain_GetTerrainMinHeight, 0}
    ,{"GetTerrainMaxHeight", Terrain_GetTerrainMaxHeight, 0}
    ,{"Resize", Terrain_Resize_uint_uint_uint_uint, DUK_VARARGS}
    ,{"MakePatchFlat", Terrain_MakePatchFlat_uint_uint_float, 3}
    ,{"TypeName", Terrain_TypeName, 0}
    ,{"TypeId", Terrain_TypeId, 0}
    ,{"Name", Terrain_Name, 0}
    ,{"SetName", Terrain_SetName_String, 1}
    ,{"SetParentEntity", Terrain_SetParentEntity_Entity, 1}
    ,{"SetReplicated", Terrain_SetReplicated_bool, 1}
    ,{"SetAttribute", Terrain_SetAttribute_String_Variant_AttributeChange__Type, DUK_VARARGS}
    ,{"GetAttribute", Terrain_GetAttribute_String, 1}
    ,{"IsReplicated", Terrain_IsReplicated, 0}
    ,{"IsLocal", Terrain_IsLocal, 0}
    ,{"IsUnacked", Terrain_IsUnacked, 0}
    ,{"SetUpdateMode", Terrain_SetUpdateMode_AttributeChange__Type, 1}
    ,{"UpdateMode", Terrain_UpdateMode, 0}
    ,{"Id", Terrain_Id, 0}
    ,{"SupportsDynamicAttributes", Terrain_SupportsDynamicAttributes, 0}
    ,{"NumAttributes", Terrain_NumAttributes, 0}
    ,{"NumStaticAttributes", Terrain_NumStaticAttributes, 0}
    ,{"EmitAttributeChanged", Terrain_EmitAttributeChanged_String_AttributeChange__Type, 2}
    ,{"ComponentChanged", Terrain_ComponentChanged_AttributeChange__Type, 1}
    ,{"ParentEntity", Terrain_ParentEntity, 0}
    ,{"SetTemporary", Terrain_SetTemporary_bool, 1}
    ,{"IsTemporary", Terrain_IsTemporary, 0}
    ,{"ViewEnabled", Terrain_ViewEnabled, 0}
    ,{"AttributeNames", Terrain_AttributeNames, 0}
    ,{"AttributeIds", Terrain_AttributeIds, 0}
    ,{"ShouldBeSerialized", Terrain_ShouldBeSerialized_bool_bool, 2}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry Terrain_StaticFunctions[] = {
    {"EnsureTypeNameWithoutPrefix", Terrain_EnsureTypeNameWithoutPrefix_Static_String, 1}
    ,{nullptr, nullptr, 0}
};

void Expose_Terrain(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Terrain_StaticFunctions);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, Terrain_Functions);
    DefineProperty(ctx, "TerrainRegenerated", Terrain_Get_TerrainRegenerated, nullptr);
    DefineProperty(ctx, "ComponentNameChanged", Terrain_Get_ComponentNameChanged, nullptr);
    DefineProperty(ctx, "ParentEntitySet", Terrain_Get_ParentEntitySet, nullptr);
    DefineProperty(ctx, "ParentEntityAboutToBeDetached", Terrain_Get_ParentEntityAboutToBeDetached, nullptr);
    DefineProperty(ctx, "typeName", Terrain_TypeName, nullptr);
    DefineProperty(ctx, "typeId", Terrain_TypeId, nullptr);
    DefineProperty(ctx, "name", Terrain_Name, Terrain_SetName_String);
    DefineProperty(ctx, "replicated", Terrain_IsReplicated, Terrain_SetReplicated_bool);
    DefineProperty(ctx, "local", Terrain_IsLocal, nullptr);
    DefineProperty(ctx, "unacked", Terrain_IsUnacked, nullptr);
    DefineProperty(ctx, "updateMode", Terrain_UpdateMode, Terrain_SetUpdateMode_AttributeChange__Type);
    DefineProperty(ctx, "id", Terrain_Id, nullptr);
    DefineProperty(ctx, "temporary", Terrain_IsTemporary, Terrain_SetTemporary_bool);
    DefineProperty(ctx, "viewEnabled", Terrain_ViewEnabled, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, Terrain_ID);
}

}
