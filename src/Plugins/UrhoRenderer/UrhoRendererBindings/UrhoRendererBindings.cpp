// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "UrhoRenderer.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Entity.h"
#include "Camera.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{



static const char* UrhoRenderer_ID = "UrhoRenderer";

const char* SignalWrapper_UrhoRenderer_MainCameraChanged_ID = "SignalWrapper_UrhoRenderer_MainCameraChanged";

class SignalWrapper_UrhoRenderer_MainCameraChanged
{
public:
    SignalWrapper_UrhoRenderer_MainCameraChanged(Object* owner, Signal1< Entity * >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< Entity * >* signal_;
};

class SignalReceiver_UrhoRenderer_MainCameraChanged : public SignalReceiver
{
public:
    void OnSignal(Entity * param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_UrhoRenderer_MainCameraChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_UrhoRenderer_MainCameraChanged>(ctx, SignalWrapper_UrhoRenderer_MainCameraChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_UrhoRenderer_MainCameraChanged_Connect(duk_context* ctx)
{
    SignalWrapper_UrhoRenderer_MainCameraChanged* wrapper = GetThisValueObject<SignalWrapper_UrhoRenderer_MainCameraChanged>(ctx, SignalWrapper_UrhoRenderer_MainCameraChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_UrhoRenderer_MainCameraChanged* receiver = new SignalReceiver_UrhoRenderer_MainCameraChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_UrhoRenderer_MainCameraChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_UrhoRenderer_MainCameraChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_UrhoRenderer_MainCameraChanged* wrapper = GetThisValueObject<SignalWrapper_UrhoRenderer_MainCameraChanged>(ctx, SignalWrapper_UrhoRenderer_MainCameraChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_UrhoRenderer_MainCameraChanged_Emit(duk_context* ctx)
{
    SignalWrapper_UrhoRenderer_MainCameraChanged* wrapper = GetThisValueObject<SignalWrapper_UrhoRenderer_MainCameraChanged>(ctx, SignalWrapper_UrhoRenderer_MainCameraChanged_ID);
    if (!wrapper->owner_) return 0;
    Entity* param0 = GetWeakObject<Entity>(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t UrhoRenderer_Get_MainCameraChanged(duk_context* ctx)
{
    UrhoRenderer* thisObj = GetThisWeakObject<UrhoRenderer>(ctx);
    SignalWrapper_UrhoRenderer_MainCameraChanged* wrapper = new SignalWrapper_UrhoRenderer_MainCameraChanged(thisObj, &thisObj->MainCameraChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_UrhoRenderer_MainCameraChanged_ID, SignalWrapper_UrhoRenderer_MainCameraChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_UrhoRenderer_MainCameraChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_UrhoRenderer_MainCameraChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_UrhoRenderer_MainCameraChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_UrhoRenderer_MainCameraChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_UrhoRenderer_MainCameraChanged_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t UrhoRenderer_MainCamera(duk_context* ctx)
{
    UrhoRenderer* thisObj = GetThisWeakObject<UrhoRenderer>(ctx);
    Entity * ret = thisObj->MainCamera();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t UrhoRenderer_MainCameraComponent(duk_context* ctx)
{
    UrhoRenderer* thisObj = GetThisWeakObject<UrhoRenderer>(ctx);
    Camera * ret = thisObj->MainCameraComponent();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t UrhoRenderer_SetMainCamera_Entity(duk_context* ctx)
{
    UrhoRenderer* thisObj = GetThisWeakObject<UrhoRenderer>(ctx);
    Entity* mainCameraEntity = GetWeakObject<Entity>(ctx, 0);
    thisObj->SetMainCamera(mainCameraEntity);
    return 0;
}

static duk_ret_t UrhoRenderer_WindowWidth(duk_context* ctx)
{
    UrhoRenderer* thisObj = GetThisWeakObject<UrhoRenderer>(ctx);
    int ret = thisObj->WindowWidth();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t UrhoRenderer_WindowHeight(duk_context* ctx)
{
    UrhoRenderer* thisObj = GetThisWeakObject<UrhoRenderer>(ctx);
    int ret = thisObj->WindowHeight();
    duk_push_number(ctx, ret);
    return 1;
}

static const duk_function_list_entry UrhoRenderer_Functions[] = {
    {"MainCamera", UrhoRenderer_MainCamera, 0}
    ,{"MainCameraComponent", UrhoRenderer_MainCameraComponent, 0}
    ,{"SetMainCamera", UrhoRenderer_SetMainCamera_Entity, 1}
    ,{"WindowWidth", UrhoRenderer_WindowWidth, 0}
    ,{"WindowHeight", UrhoRenderer_WindowHeight, 0}
    ,{nullptr, nullptr, 0}
};

void Expose_UrhoRenderer(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, UrhoRenderer_Functions);
    DefineProperty(ctx, "MainCameraChanged", UrhoRenderer_Get_MainCameraChanged, nullptr);
    DefineProperty(ctx, "mainCamera", UrhoRenderer_MainCamera, UrhoRenderer_SetMainCamera_Entity);
    DefineProperty(ctx, "mainCameraComponent", UrhoRenderer_MainCameraComponent, nullptr);
    DefineProperty(ctx, "windowWidth", UrhoRenderer_WindowWidth, nullptr);
    DefineProperty(ctx, "windowHeight", UrhoRenderer_WindowHeight, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, UrhoRenderer_ID);
}

}
