// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "UserConnection.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Entity.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{



static const char* UserConnection_ID = "UserConnection";

static duk_ret_t UserConnection_Set_userID(duk_context* ctx)
{
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    u32 userID = (u32)duk_require_number(ctx, 0);
    thisObj->userID = userID;
    return 0;
}

static duk_ret_t UserConnection_Get_userID(duk_context* ctx)
{
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    duk_push_number(ctx, thisObj->userID);
    return 1;
}

static duk_ret_t UserConnection_Set_loginData(duk_context* ctx)
{
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    String loginData = duk_require_string(ctx, 0);
    thisObj->loginData = loginData;
    return 0;
}

static duk_ret_t UserConnection_Get_loginData(duk_context* ctx)
{
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    duk_push_string(ctx, thisObj->loginData.CString());
    return 1;
}

const char* SignalWrapper_UserConnection_ActionTriggered_ID = "SignalWrapper_UserConnection_ActionTriggered";

class SignalWrapper_UserConnection_ActionTriggered
{
public:
    SignalWrapper_UserConnection_ActionTriggered(Object* owner, Signal4< UserConnection *, Entity *, const String &, const StringVector &>* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal4< UserConnection *, Entity *, const String &, const StringVector &>* signal_;
};

class SignalReceiver_UserConnection_ActionTriggered : public SignalReceiver
{
public:
    void OnSignal(UserConnection * param0, Entity * param1, const String & param2, const StringVector & param3)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        PushWeakObject(ctx, param1);
        duk_put_prop_index(ctx, -2, 1);
        duk_push_string(ctx, param2.CString());
        duk_put_prop_index(ctx, -2, 2);
        PushStringVector(ctx, param3);
        duk_put_prop_index(ctx, -2, 3);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_UserConnection_ActionTriggered_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_UserConnection_ActionTriggered>(ctx, SignalWrapper_UserConnection_ActionTriggered_ID);
    return 0;
}

static duk_ret_t SignalWrapper_UserConnection_ActionTriggered_Connect(duk_context* ctx)
{
    SignalWrapper_UserConnection_ActionTriggered* wrapper = GetThisValueObject<SignalWrapper_UserConnection_ActionTriggered>(ctx, SignalWrapper_UserConnection_ActionTriggered_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_UserConnection_ActionTriggered* receiver = new SignalReceiver_UserConnection_ActionTriggered();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_UserConnection_ActionTriggered::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_UserConnection_ActionTriggered_Disconnect(duk_context* ctx)
{
    SignalWrapper_UserConnection_ActionTriggered* wrapper = GetThisValueObject<SignalWrapper_UserConnection_ActionTriggered>(ctx, SignalWrapper_UserConnection_ActionTriggered_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_UserConnection_ActionTriggered_Emit(duk_context* ctx)
{
    SignalWrapper_UserConnection_ActionTriggered* wrapper = GetThisValueObject<SignalWrapper_UserConnection_ActionTriggered>(ctx, SignalWrapper_UserConnection_ActionTriggered_ID);
    if (!wrapper->owner_) return 0;
    UserConnection* param0 = GetWeakObject<UserConnection>(ctx, 0);
    Entity* param1 = GetWeakObject<Entity>(ctx, 1);
    String param2 = duk_require_string(ctx, 2);
    StringVector param3 = GetStringVector(ctx, 3);
    wrapper->signal_->Emit(param0, param1, param2, param3);
    return 0;
}

static duk_ret_t UserConnection_Get_ActionTriggered(duk_context* ctx)
{
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    SignalWrapper_UserConnection_ActionTriggered* wrapper = new SignalWrapper_UserConnection_ActionTriggered(thisObj, &thisObj->ActionTriggered);
    PushValueObject(ctx, wrapper, SignalWrapper_UserConnection_ActionTriggered_ID, SignalWrapper_UserConnection_ActionTriggered_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_UserConnection_ActionTriggered_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_UserConnection_ActionTriggered_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_UserConnection_ActionTriggered_Emit, 4);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t UserConnection_ConnectionId(duk_context* ctx)
{
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    u32 ret = thisObj->ConnectionId();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t UserConnection_ConnectionType(duk_context* ctx)
{
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    String ret = thisObj->ConnectionType();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t UserConnection_Exec_Entity_String_StringVector(duk_context* ctx)
{
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    String action = duk_require_string(ctx, 1);
    StringVector params = GetStringVector(ctx, 2);
    thisObj->Exec(entity, action, params);
    return 0;
}

static duk_ret_t UserConnection_Exec_Entity_String_String_String_String(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    String action = duk_require_string(ctx, 1);
    String p1 = numArgs > 2 ? duk_require_string(ctx, 2) : "";
    String p2 = numArgs > 3 ? duk_require_string(ctx, 3) : "";
    String p3 = numArgs > 4 ? duk_require_string(ctx, 4) : "";
    thisObj->Exec(entity, action, p1, p2, p3);
    return 0;
}

static duk_ret_t UserConnection_LoginData(duk_context* ctx)
{
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    String ret = thisObj->LoginData();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t UserConnection_SetProperty_String_String(duk_context* ctx)
{
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    String key = duk_require_string(ctx, 0);
    String value = duk_require_string(ctx, 1);
    thisObj->SetProperty(key, value);
    return 0;
}

static duk_ret_t UserConnection_Property_String(duk_context* ctx)
{
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    String key = duk_require_string(ctx, 0);
    Variant ret = thisObj->Property(key);
    PushVariant(ctx, ret);
    return 1;
}

static duk_ret_t UserConnection_HasProperty_String(duk_context* ctx)
{
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    String key = duk_require_string(ctx, 0);
    bool ret = thisObj->HasProperty(key);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t UserConnection_DenyConnection_String(duk_context* ctx)
{
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    String reason = duk_require_string(ctx, 0);
    thisObj->DenyConnection(reason);
    return 0;
}

static duk_ret_t UserConnection_Disconnect(duk_context* ctx)
{
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    thisObj->Disconnect();
    return 0;
}

static duk_ret_t UserConnection_Close(duk_context* ctx)
{
    UserConnection* thisObj = GetThisWeakObject<UserConnection>(ctx);
    thisObj->Close();
    return 0;
}

static duk_ret_t UserConnection_Exec_Selector(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    if (numArgs == 3 && duk_is_string(ctx, 1) && duk_is_object(ctx, 2))
        return UserConnection_Exec_Entity_String_StringVector(ctx);
    if (numArgs >= 2 && duk_is_string(ctx, 1))
        return UserConnection_Exec_Entity_String_String_String_String(ctx);
    duk_error(ctx, DUK_ERR_ERROR, "Could not select function overload");
}

static const duk_function_list_entry UserConnection_Functions[] = {
    {"ConnectionId", UserConnection_ConnectionId, 0}
    ,{"ConnectionType", UserConnection_ConnectionType, 0}
    ,{"Exec", UserConnection_Exec_Selector, DUK_VARARGS}
    ,{"LoginData", UserConnection_LoginData, 0}
    ,{"SetProperty", UserConnection_SetProperty_String_String, 2}
    ,{"Property", UserConnection_Property_String, 1}
    ,{"HasProperty", UserConnection_HasProperty_String, 1}
    ,{"DenyConnection", UserConnection_DenyConnection_String, 1}
    ,{"Disconnect", UserConnection_Disconnect, 0}
    ,{"Close", UserConnection_Close, 0}
    ,{nullptr, nullptr, 0}
};

void Expose_UserConnection(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, UserConnection_Functions);
    DefineProperty(ctx, "userID", UserConnection_Get_userID, UserConnection_Set_userID);
    DefineProperty(ctx, "loginData", UserConnection_Get_loginData, UserConnection_Set_loginData);
    DefineProperty(ctx, "ActionTriggered", UserConnection_Get_ActionTriggered, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, UserConnection_ID);
}

}
