// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "SyncManager.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Entity.h"
#include "UserConnection.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{



static const char* SyncManager_ID = "SyncManager";

const char* SignalWrapper_SyncManager_SceneStateCreated_ID = "SignalWrapper_SyncManager_SceneStateCreated";

class SignalWrapper_SyncManager_SceneStateCreated
{
public:
    SignalWrapper_SyncManager_SceneStateCreated(Object* owner, Signal2< UserConnection *, SceneSyncState *>* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal2< UserConnection *, SceneSyncState *>* signal_;
};

class SignalReceiver_SyncManager_SceneStateCreated : public SignalReceiver
{
public:
    void OnSignal(UserConnection * param0, SceneSyncState * param1)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_SyncManager_SceneStateCreated_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_SyncManager_SceneStateCreated>(ctx, SignalWrapper_SyncManager_SceneStateCreated_ID);
    return 0;
}

static duk_ret_t SignalWrapper_SyncManager_SceneStateCreated_Connect(duk_context* ctx)
{
    SignalWrapper_SyncManager_SceneStateCreated* wrapper = GetThisValueObject<SignalWrapper_SyncManager_SceneStateCreated>(ctx, SignalWrapper_SyncManager_SceneStateCreated_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_SyncManager_SceneStateCreated* receiver = new SignalReceiver_SyncManager_SceneStateCreated();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_SyncManager_SceneStateCreated::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_SyncManager_SceneStateCreated_Disconnect(duk_context* ctx)
{
    SignalWrapper_SyncManager_SceneStateCreated* wrapper = GetThisValueObject<SignalWrapper_SyncManager_SceneStateCreated>(ctx, SignalWrapper_SyncManager_SceneStateCreated_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SyncManager_Get_SceneStateCreated(duk_context* ctx)
{
    SyncManager* thisObj = GetThisWeakObject<SyncManager>(ctx);
    SignalWrapper_SyncManager_SceneStateCreated* wrapper = new SignalWrapper_SyncManager_SceneStateCreated(thisObj, &thisObj->SceneStateCreated);
    PushValueObject(ctx, wrapper, SignalWrapper_SyncManager_SceneStateCreated_ID, SignalWrapper_SyncManager_SceneStateCreated_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_SyncManager_SceneStateCreated_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_SyncManager_SceneStateCreated_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_SyncManager_SceneStateCreated_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_SyncManager_SceneStateCreated_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    return 1;
}

static duk_ret_t SyncManager_SetUpdatePeriod_float(duk_context* ctx)
{
    SyncManager* thisObj = GetThisWeakObject<SyncManager>(ctx);
    float period = (float)duk_require_number(ctx, 0);
    thisObj->SetUpdatePeriod(period);
    return 0;
}

static duk_ret_t SyncManager_GetUpdatePeriod(duk_context* ctx)
{
    SyncManager* thisObj = GetThisWeakObject<SyncManager>(ctx);
    float ret = thisObj->GetUpdatePeriod();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t SyncManager_SetInterestManagementEnabled_bool(duk_context* ctx)
{
    SyncManager* thisObj = GetThisWeakObject<SyncManager>(ctx);
    bool enabled = duk_require_boolean(ctx, 0);
    thisObj->SetInterestManagementEnabled(enabled);
    return 0;
}

static duk_ret_t SyncManager_IsInterestManagementEnabled(duk_context* ctx)
{
    SyncManager* thisObj = GetThisWeakObject<SyncManager>(ctx);
    bool ret = thisObj->IsInterestManagementEnabled();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t SyncManager_SetObserver_EntityPtr(duk_context* ctx)
{
    SyncManager* thisObj = GetThisWeakObject<SyncManager>(ctx);
    SharedPtr<Entity> entity(GetWeakObject<Entity>(ctx, 0));
    thisObj->SetObserver(entity);
    return 0;
}

static duk_ret_t SyncManager_Observer(duk_context* ctx)
{
    SyncManager* thisObj = GetThisWeakObject<SyncManager>(ctx);
    EntityPtr ret = thisObj->Observer();
    PushWeakObject(ctx, ret.Get());
    return 1;
}

static duk_ret_t SyncManager_SetPriorityUpdatePeriod_float(duk_context* ctx)
{
    SyncManager* thisObj = GetThisWeakObject<SyncManager>(ctx);
    float period = (float)duk_require_number(ctx, 0);
    thisObj->SetPriorityUpdatePeriod(period);
    return 0;
}

static duk_ret_t SyncManager_PriorityUpdatePeriod(duk_context* ctx)
{
    SyncManager* thisObj = GetThisWeakObject<SyncManager>(ctx);
    float ret = thisObj->PriorityUpdatePeriod();
    duk_push_number(ctx, ret);
    return 1;
}

static const duk_function_list_entry SyncManager_Functions[] = {
    {"SetUpdatePeriod", SyncManager_SetUpdatePeriod_float, 1}
    ,{"GetUpdatePeriod", SyncManager_GetUpdatePeriod, 0}
    ,{"SetInterestManagementEnabled", SyncManager_SetInterestManagementEnabled_bool, 1}
    ,{"IsInterestManagementEnabled", SyncManager_IsInterestManagementEnabled, 0}
    ,{"SetObserver", SyncManager_SetObserver_EntityPtr, 1}
    ,{"Observer", SyncManager_Observer, 0}
    ,{"SetPriorityUpdatePeriod", SyncManager_SetPriorityUpdatePeriod_float, 1}
    ,{"PriorityUpdatePeriod", SyncManager_PriorityUpdatePeriod, 0}
    ,{nullptr, nullptr, 0}
};

void Expose_SyncManager(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, SyncManager_Functions);
    DefineProperty(ctx, "SceneStateCreated", SyncManager_Get_SceneStateCreated, nullptr);
    DefineProperty(ctx, "updatePeriod", SyncManager_GetUpdatePeriod, SyncManager_SetUpdatePeriod_float);
    DefineProperty(ctx, "interestManagementEnabled", SyncManager_IsInterestManagementEnabled, SyncManager_SetInterestManagementEnabled_bool);
    DefineProperty(ctx, "observer", SyncManager_Observer, SyncManager_SetObserver_EntityPtr);
    DefineProperty(ctx, "priorityUpdatePeriod", SyncManager_PriorityUpdatePeriod, SyncManager_SetPriorityUpdatePeriod_float);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, SyncManager_ID);
}

}
