// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "BulletPhysics.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif



using namespace Tundra;
using namespace std;

namespace JSBindings
{



static const char* BulletPhysics_ID = "BulletPhysics";

static duk_ret_t BulletPhysics_ForgetUnusedCacheShapes(duk_context* ctx)
{
    BulletPhysics* thisObj = GetThisWeakObject<BulletPhysics>(ctx);
    int ret = thisObj->ForgetUnusedCacheShapes();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t BulletPhysics_SetDefaultPhysicsUpdatePeriod_float(duk_context* ctx)
{
    BulletPhysics* thisObj = GetThisWeakObject<BulletPhysics>(ctx);
    float updatePeriod = (float)duk_require_number(ctx, 0);
    thisObj->SetDefaultPhysicsUpdatePeriod(updatePeriod);
    return 0;
}

static duk_ret_t BulletPhysics_DefaultPhysicsUpdatePeriod(duk_context* ctx)
{
    BulletPhysics* thisObj = GetThisWeakObject<BulletPhysics>(ctx);
    float ret = thisObj->DefaultPhysicsUpdatePeriod();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t BulletPhysics_SetDefaultMaxSubSteps_int(duk_context* ctx)
{
    BulletPhysics* thisObj = GetThisWeakObject<BulletPhysics>(ctx);
    int steps = (int)duk_require_number(ctx, 0);
    thisObj->SetDefaultMaxSubSteps(steps);
    return 0;
}

static duk_ret_t BulletPhysics_DefaultMaxSubSteps(duk_context* ctx)
{
    BulletPhysics* thisObj = GetThisWeakObject<BulletPhysics>(ctx);
    int ret = thisObj->DefaultMaxSubSteps();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t BulletPhysics_ToggleDebugGeometry(duk_context* ctx)
{
    BulletPhysics* thisObj = GetThisWeakObject<BulletPhysics>(ctx);
    thisObj->ToggleDebugGeometry();
    return 0;
}

static duk_ret_t BulletPhysics_StopPhysics(duk_context* ctx)
{
    BulletPhysics* thisObj = GetThisWeakObject<BulletPhysics>(ctx);
    thisObj->StopPhysics();
    return 0;
}

static duk_ret_t BulletPhysics_StartPhysics(duk_context* ctx)
{
    BulletPhysics* thisObj = GetThisWeakObject<BulletPhysics>(ctx);
    thisObj->StartPhysics();
    return 0;
}

static duk_ret_t BulletPhysics_AutoCollisionMesh(duk_context* ctx)
{
    BulletPhysics* thisObj = GetThisWeakObject<BulletPhysics>(ctx);
    thisObj->AutoCollisionMesh();
    return 0;
}

static duk_ret_t BulletPhysics_SetRunPhysics_bool(duk_context* ctx)
{
    BulletPhysics* thisObj = GetThisWeakObject<BulletPhysics>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    thisObj->SetRunPhysics(enable);
    return 0;
}

static const duk_function_list_entry BulletPhysics_Functions[] = {
    {"ForgetUnusedCacheShapes", BulletPhysics_ForgetUnusedCacheShapes, 0}
    ,{"SetDefaultPhysicsUpdatePeriod", BulletPhysics_SetDefaultPhysicsUpdatePeriod_float, 1}
    ,{"DefaultPhysicsUpdatePeriod", BulletPhysics_DefaultPhysicsUpdatePeriod, 0}
    ,{"SetDefaultMaxSubSteps", BulletPhysics_SetDefaultMaxSubSteps_int, 1}
    ,{"DefaultMaxSubSteps", BulletPhysics_DefaultMaxSubSteps, 0}
    ,{"ToggleDebugGeometry", BulletPhysics_ToggleDebugGeometry, 0}
    ,{"StopPhysics", BulletPhysics_StopPhysics, 0}
    ,{"StartPhysics", BulletPhysics_StartPhysics, 0}
    ,{"AutoCollisionMesh", BulletPhysics_AutoCollisionMesh, 0}
    ,{"SetRunPhysics", BulletPhysics_SetRunPhysics_bool, 1}
    ,{nullptr, nullptr, 0}
};

void Expose_BulletPhysics(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, BulletPhysics_Functions);
    DefineProperty(ctx, "defaultPhysicsUpdatePeriod", BulletPhysics_DefaultPhysicsUpdatePeriod, BulletPhysics_SetDefaultPhysicsUpdatePeriod_float);
    DefineProperty(ctx, "defaultMaxSubSteps", BulletPhysics_DefaultMaxSubSteps, BulletPhysics_SetDefaultMaxSubSteps_int);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, BulletPhysics_ID);
}

}
