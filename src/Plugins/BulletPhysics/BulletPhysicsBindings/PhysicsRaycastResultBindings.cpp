// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "PhysicsWorld.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "Entity.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{

static const char* float3_ID = "float3";

static duk_ret_t float3_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<float3>(ctx, float3_ID);
    return 0;
}


static const char* PhysicsRaycastResult_ID = "PhysicsRaycastResult";

static duk_ret_t PhysicsRaycastResult_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<PhysicsRaycastResult>(ctx, PhysicsRaycastResult_ID);
    return 0;
}

static duk_ret_t PhysicsRaycastResult_Set_entity(duk_context* ctx)
{
    PhysicsRaycastResult* thisObj = GetThisValueObject<PhysicsRaycastResult>(ctx, PhysicsRaycastResult_ID);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    thisObj->entity = entity;
    return 0;
}

static duk_ret_t PhysicsRaycastResult_Get_entity(duk_context* ctx)
{
    PhysicsRaycastResult* thisObj = GetThisValueObject<PhysicsRaycastResult>(ctx, PhysicsRaycastResult_ID);
    PushWeakObject(ctx, thisObj->entity);
    return 1;
}

static duk_ret_t PhysicsRaycastResult_Set_pos(duk_context* ctx)
{
    PhysicsRaycastResult* thisObj = GetThisValueObject<PhysicsRaycastResult>(ctx, PhysicsRaycastResult_ID);
    float3& pos = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->pos = pos;
    return 0;
}

static duk_ret_t PhysicsRaycastResult_Get_pos(duk_context* ctx)
{
    PhysicsRaycastResult* thisObj = GetThisValueObject<PhysicsRaycastResult>(ctx, PhysicsRaycastResult_ID);
    PushValueObject<float3>(ctx, &thisObj->pos, float3_ID, nullptr, true);
    return 1;
}

static duk_ret_t PhysicsRaycastResult_Set_normal(duk_context* ctx)
{
    PhysicsRaycastResult* thisObj = GetThisValueObject<PhysicsRaycastResult>(ctx, PhysicsRaycastResult_ID);
    float3& normal = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->normal = normal;
    return 0;
}

static duk_ret_t PhysicsRaycastResult_Get_normal(duk_context* ctx)
{
    PhysicsRaycastResult* thisObj = GetThisValueObject<PhysicsRaycastResult>(ctx, PhysicsRaycastResult_ID);
    PushValueObject<float3>(ctx, &thisObj->normal, float3_ID, nullptr, true);
    return 1;
}

static duk_ret_t PhysicsRaycastResult_Set_distance(duk_context* ctx)
{
    PhysicsRaycastResult* thisObj = GetThisValueObject<PhysicsRaycastResult>(ctx, PhysicsRaycastResult_ID);
    float distance = (float)duk_require_number(ctx, 0);
    thisObj->distance = distance;
    return 0;
}

static duk_ret_t PhysicsRaycastResult_Get_distance(duk_context* ctx)
{
    PhysicsRaycastResult* thisObj = GetThisValueObject<PhysicsRaycastResult>(ctx, PhysicsRaycastResult_ID);
    duk_push_number(ctx, thisObj->distance);
    return 1;
}

void Expose_PhysicsRaycastResult(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_object(ctx);
    DefineProperty(ctx, "entity", PhysicsRaycastResult_Get_entity, PhysicsRaycastResult_Set_entity);
    DefineProperty(ctx, "pos", PhysicsRaycastResult_Get_pos, PhysicsRaycastResult_Set_pos);
    DefineProperty(ctx, "normal", PhysicsRaycastResult_Get_normal, PhysicsRaycastResult_Set_normal);
    DefineProperty(ctx, "distance", PhysicsRaycastResult_Get_distance, PhysicsRaycastResult_Set_distance);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, PhysicsRaycastResult_ID);
}

}
