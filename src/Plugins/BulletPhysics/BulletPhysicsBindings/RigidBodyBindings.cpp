// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "RigidBody.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "PhysicsWorld.h"
#include "Entity.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{

static const char* float3_ID = "float3";

static duk_ret_t float3_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<float3>(ctx, float3_ID);
    return 0;
}


static const char* RigidBody_ID = "RigidBody";

const char* SignalWrapper_RigidBody_PhysicsCollision_ID = "SignalWrapper_RigidBody_PhysicsCollision";

class SignalWrapper_RigidBody_PhysicsCollision
{
public:
    SignalWrapper_RigidBody_PhysicsCollision(Object* owner, Signal6< Entity *, const float3 &, const float3 &, float , float , bool >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal6< Entity *, const float3 &, const float3 &, float , float , bool >* signal_;
};

class SignalReceiver_RigidBody_PhysicsCollision : public SignalReceiver
{
public:
    void OnSignal(Entity * param0, const float3 & param1, const float3 & param2, float param3, float param4, bool param5)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        PushValueObjectCopy<float3>(ctx, param1, float3_ID, float3_Finalizer);
        duk_put_prop_index(ctx, -2, 1);
        PushValueObjectCopy<float3>(ctx, param2, float3_ID, float3_Finalizer);
        duk_put_prop_index(ctx, -2, 2);
        duk_push_number(ctx, param3);
        duk_put_prop_index(ctx, -2, 3);
        duk_push_number(ctx, param4);
        duk_put_prop_index(ctx, -2, 4);
        duk_push_boolean(ctx, param5);
        duk_put_prop_index(ctx, -2, 5);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_RigidBody_PhysicsCollision_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_RigidBody_PhysicsCollision>(ctx, SignalWrapper_RigidBody_PhysicsCollision_ID);
    return 0;
}

static duk_ret_t SignalWrapper_RigidBody_PhysicsCollision_Connect(duk_context* ctx)
{
    SignalWrapper_RigidBody_PhysicsCollision* wrapper = GetThisValueObject<SignalWrapper_RigidBody_PhysicsCollision>(ctx, SignalWrapper_RigidBody_PhysicsCollision_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_RigidBody_PhysicsCollision* receiver = new SignalReceiver_RigidBody_PhysicsCollision();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_RigidBody_PhysicsCollision::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_RigidBody_PhysicsCollision_Disconnect(duk_context* ctx)
{
    SignalWrapper_RigidBody_PhysicsCollision* wrapper = GetThisValueObject<SignalWrapper_RigidBody_PhysicsCollision>(ctx, SignalWrapper_RigidBody_PhysicsCollision_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_RigidBody_PhysicsCollision_Emit(duk_context* ctx)
{
    SignalWrapper_RigidBody_PhysicsCollision* wrapper = GetThisValueObject<SignalWrapper_RigidBody_PhysicsCollision>(ctx, SignalWrapper_RigidBody_PhysicsCollision_ID);
    if (!wrapper->owner_) return 0;
    Entity* param0 = GetWeakObject<Entity>(ctx, 0);
    float3& param1 = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3& param2 = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float param3 = (float)duk_require_number(ctx, 3);
    float param4 = (float)duk_require_number(ctx, 4);
    bool param5 = duk_require_boolean(ctx, 5);
    wrapper->signal_->Emit(param0, param1, param2, param3, param4, param5);
    return 0;
}

static duk_ret_t RigidBody_Get_PhysicsCollision(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    SignalWrapper_RigidBody_PhysicsCollision* wrapper = new SignalWrapper_RigidBody_PhysicsCollision(thisObj, &thisObj->PhysicsCollision);
    PushValueObject(ctx, wrapper, SignalWrapper_RigidBody_PhysicsCollision_ID, SignalWrapper_RigidBody_PhysicsCollision_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_RigidBody_PhysicsCollision_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_PhysicsCollision_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_PhysicsCollision_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_PhysicsCollision_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_PhysicsCollision_Emit, 6);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_RigidBody_NewPhysicsCollision_ID = "SignalWrapper_RigidBody_NewPhysicsCollision";

class SignalWrapper_RigidBody_NewPhysicsCollision
{
public:
    SignalWrapper_RigidBody_NewPhysicsCollision(Object* owner, Signal5< Entity *, const float3 &, const float3 &, float , float >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal5< Entity *, const float3 &, const float3 &, float , float >* signal_;
};

class SignalReceiver_RigidBody_NewPhysicsCollision : public SignalReceiver
{
public:
    void OnSignal(Entity * param0, const float3 & param1, const float3 & param2, float param3, float param4)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        PushValueObjectCopy<float3>(ctx, param1, float3_ID, float3_Finalizer);
        duk_put_prop_index(ctx, -2, 1);
        PushValueObjectCopy<float3>(ctx, param2, float3_ID, float3_Finalizer);
        duk_put_prop_index(ctx, -2, 2);
        duk_push_number(ctx, param3);
        duk_put_prop_index(ctx, -2, 3);
        duk_push_number(ctx, param4);
        duk_put_prop_index(ctx, -2, 4);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_RigidBody_NewPhysicsCollision_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_RigidBody_NewPhysicsCollision>(ctx, SignalWrapper_RigidBody_NewPhysicsCollision_ID);
    return 0;
}

static duk_ret_t SignalWrapper_RigidBody_NewPhysicsCollision_Connect(duk_context* ctx)
{
    SignalWrapper_RigidBody_NewPhysicsCollision* wrapper = GetThisValueObject<SignalWrapper_RigidBody_NewPhysicsCollision>(ctx, SignalWrapper_RigidBody_NewPhysicsCollision_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_RigidBody_NewPhysicsCollision* receiver = new SignalReceiver_RigidBody_NewPhysicsCollision();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_RigidBody_NewPhysicsCollision::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_RigidBody_NewPhysicsCollision_Disconnect(duk_context* ctx)
{
    SignalWrapper_RigidBody_NewPhysicsCollision* wrapper = GetThisValueObject<SignalWrapper_RigidBody_NewPhysicsCollision>(ctx, SignalWrapper_RigidBody_NewPhysicsCollision_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_RigidBody_NewPhysicsCollision_Emit(duk_context* ctx)
{
    SignalWrapper_RigidBody_NewPhysicsCollision* wrapper = GetThisValueObject<SignalWrapper_RigidBody_NewPhysicsCollision>(ctx, SignalWrapper_RigidBody_NewPhysicsCollision_ID);
    if (!wrapper->owner_) return 0;
    Entity* param0 = GetWeakObject<Entity>(ctx, 0);
    float3& param1 = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float3& param2 = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float param3 = (float)duk_require_number(ctx, 3);
    float param4 = (float)duk_require_number(ctx, 4);
    wrapper->signal_->Emit(param0, param1, param2, param3, param4);
    return 0;
}

static duk_ret_t RigidBody_Get_NewPhysicsCollision(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    SignalWrapper_RigidBody_NewPhysicsCollision* wrapper = new SignalWrapper_RigidBody_NewPhysicsCollision(thisObj, &thisObj->NewPhysicsCollision);
    PushValueObject(ctx, wrapper, SignalWrapper_RigidBody_NewPhysicsCollision_ID, SignalWrapper_RigidBody_NewPhysicsCollision_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_RigidBody_NewPhysicsCollision_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_NewPhysicsCollision_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_NewPhysicsCollision_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_NewPhysicsCollision_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_NewPhysicsCollision_Emit, 5);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_RigidBody_ComponentNameChanged_ID = "SignalWrapper_RigidBody_ComponentNameChanged";

class SignalWrapper_RigidBody_ComponentNameChanged
{
public:
    SignalWrapper_RigidBody_ComponentNameChanged(Object* owner, Signal2< const String &, const String & >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal2< const String &, const String & >* signal_;
};

class SignalReceiver_RigidBody_ComponentNameChanged : public SignalReceiver
{
public:
    void OnSignal(const String & param0, const String & param1)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        duk_push_string(ctx, param0.CString());
        duk_put_prop_index(ctx, -2, 0);
        duk_push_string(ctx, param1.CString());
        duk_put_prop_index(ctx, -2, 1);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_RigidBody_ComponentNameChanged_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_RigidBody_ComponentNameChanged>(ctx, SignalWrapper_RigidBody_ComponentNameChanged_ID);
    return 0;
}

static duk_ret_t SignalWrapper_RigidBody_ComponentNameChanged_Connect(duk_context* ctx)
{
    SignalWrapper_RigidBody_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_RigidBody_ComponentNameChanged>(ctx, SignalWrapper_RigidBody_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_RigidBody_ComponentNameChanged* receiver = new SignalReceiver_RigidBody_ComponentNameChanged();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_RigidBody_ComponentNameChanged::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_RigidBody_ComponentNameChanged_Disconnect(duk_context* ctx)
{
    SignalWrapper_RigidBody_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_RigidBody_ComponentNameChanged>(ctx, SignalWrapper_RigidBody_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_RigidBody_ComponentNameChanged_Emit(duk_context* ctx)
{
    SignalWrapper_RigidBody_ComponentNameChanged* wrapper = GetThisValueObject<SignalWrapper_RigidBody_ComponentNameChanged>(ctx, SignalWrapper_RigidBody_ComponentNameChanged_ID);
    if (!wrapper->owner_) return 0;
    String param0 = duk_require_string(ctx, 0);
    String param1 = duk_require_string(ctx, 1);
    wrapper->signal_->Emit(param0, param1);
    return 0;
}

static duk_ret_t RigidBody_Get_ComponentNameChanged(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    SignalWrapper_RigidBody_ComponentNameChanged* wrapper = new SignalWrapper_RigidBody_ComponentNameChanged(thisObj, &thisObj->ComponentNameChanged);
    PushValueObject(ctx, wrapper, SignalWrapper_RigidBody_ComponentNameChanged_ID, SignalWrapper_RigidBody_ComponentNameChanged_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_RigidBody_ComponentNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_ComponentNameChanged_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_ComponentNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_ComponentNameChanged_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_ComponentNameChanged_Emit, 2);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_RigidBody_ParentEntitySet_ID = "SignalWrapper_RigidBody_ParentEntitySet";

class SignalWrapper_RigidBody_ParentEntitySet
{
public:
    SignalWrapper_RigidBody_ParentEntitySet(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_RigidBody_ParentEntitySet : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_RigidBody_ParentEntitySet_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_RigidBody_ParentEntitySet>(ctx, SignalWrapper_RigidBody_ParentEntitySet_ID);
    return 0;
}

static duk_ret_t SignalWrapper_RigidBody_ParentEntitySet_Connect(duk_context* ctx)
{
    SignalWrapper_RigidBody_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_RigidBody_ParentEntitySet>(ctx, SignalWrapper_RigidBody_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_RigidBody_ParentEntitySet* receiver = new SignalReceiver_RigidBody_ParentEntitySet();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_RigidBody_ParentEntitySet::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_RigidBody_ParentEntitySet_Disconnect(duk_context* ctx)
{
    SignalWrapper_RigidBody_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_RigidBody_ParentEntitySet>(ctx, SignalWrapper_RigidBody_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_RigidBody_ParentEntitySet_Emit(duk_context* ctx)
{
    SignalWrapper_RigidBody_ParentEntitySet* wrapper = GetThisValueObject<SignalWrapper_RigidBody_ParentEntitySet>(ctx, SignalWrapper_RigidBody_ParentEntitySet_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t RigidBody_Get_ParentEntitySet(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    SignalWrapper_RigidBody_ParentEntitySet* wrapper = new SignalWrapper_RigidBody_ParentEntitySet(thisObj, &thisObj->ParentEntitySet);
    PushValueObject(ctx, wrapper, SignalWrapper_RigidBody_ParentEntitySet_ID, SignalWrapper_RigidBody_ParentEntitySet_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_RigidBody_ParentEntitySet_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_ParentEntitySet_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_ParentEntitySet_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_ParentEntitySet_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_ParentEntitySet_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_ID = "SignalWrapper_RigidBody_ParentEntityAboutToBeDetached";

class SignalWrapper_RigidBody_ParentEntityAboutToBeDetached
{
public:
    SignalWrapper_RigidBody_ParentEntityAboutToBeDetached(Object* owner, Signal0< void >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal0< void >* signal_;
};

class SignalReceiver_RigidBody_ParentEntityAboutToBeDetached : public SignalReceiver
{
public:
    void OnSignal()
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + GetErrorString(ctx));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_RigidBody_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_ID);
    return 0;
}

static duk_ret_t SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_Connect(duk_context* ctx)
{
    SignalWrapper_RigidBody_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_RigidBody_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_RigidBody_ParentEntityAboutToBeDetached* receiver = new SignalReceiver_RigidBody_ParentEntityAboutToBeDetached();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_RigidBody_ParentEntityAboutToBeDetached::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_Disconnect(duk_context* ctx)
{
    SignalWrapper_RigidBody_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_RigidBody_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_Emit(duk_context* ctx)
{
    SignalWrapper_RigidBody_ParentEntityAboutToBeDetached* wrapper = GetThisValueObject<SignalWrapper_RigidBody_ParentEntityAboutToBeDetached>(ctx, SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_ID);
    if (!wrapper->owner_) return 0;
    wrapper->signal_->Emit();
    return 0;
}

static duk_ret_t RigidBody_Get_ParentEntityAboutToBeDetached(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    SignalWrapper_RigidBody_ParentEntityAboutToBeDetached* wrapper = new SignalWrapper_RigidBody_ParentEntityAboutToBeDetached(thisObj, &thisObj->ParentEntityAboutToBeDetached);
    PushValueObject(ctx, wrapper, SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_ID, SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_RigidBody_ParentEntityAboutToBeDetached_Emit, 0);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t RigidBody_SetClientExtrapolating_bool(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    bool isClientExtrapolating = duk_require_boolean(ctx, 0);
    thisObj->SetClientExtrapolating(isClientExtrapolating);
    return 0;
}

static duk_ret_t RigidBody_SetShapeFromVisibleMesh(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    bool ret = thisObj->SetShapeFromVisibleMesh();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_SetLinearVelocity_float3(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    float3& velocity = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->SetLinearVelocity(velocity);
    return 0;
}

static duk_ret_t RigidBody_GetLinearVelocity(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    float3 ret = thisObj->GetLinearVelocity();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t RigidBody_SetAngularVelocity_float3(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    float3& angularVelocity = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->SetAngularVelocity(angularVelocity);
    return 0;
}

static duk_ret_t RigidBody_GetAngularVelocity(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    float3 ret = thisObj->GetAngularVelocity();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t RigidBody_ApplyForce_float3_float3(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    float3& force = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3 position = numArgs > 1 ? *GetCheckedValueObject<float3>(ctx, 1, float3_ID) : float3::zero;
    thisObj->ApplyForce(force, position);
    return 0;
}

static duk_ret_t RigidBody_ApplyTorque_float3(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    float3& torque = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->ApplyTorque(torque);
    return 0;
}

static duk_ret_t RigidBody_ApplyImpulse_float3_float3(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    float3& impulse = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3 position = numArgs > 1 ? *GetCheckedValueObject<float3>(ctx, 1, float3_ID) : float3::zero;
    thisObj->ApplyImpulse(impulse, position);
    return 0;
}

static duk_ret_t RigidBody_ApplyTorqueImpulse_float3(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    float3& torqueImpulse = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->ApplyTorqueImpulse(torqueImpulse);
    return 0;
}

static duk_ret_t RigidBody_Activate(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    thisObj->Activate();
    return 0;
}

static duk_ret_t RigidBody_KeepActive(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    thisObj->KeepActive();
    return 0;
}

static duk_ret_t RigidBody_IsActive(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    bool ret = thisObj->IsActive();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_ResetForces(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    thisObj->ResetForces();
    return 0;
}

static duk_ret_t RigidBody_SetRotation_float3(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    float3& rotation = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->SetRotation(rotation);
    return 0;
}

static duk_ret_t RigidBody_Rotate_float3(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    float3& rotation = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->Rotate(rotation);
    return 0;
}

static duk_ret_t RigidBody_World(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    PhysicsWorld * ret = thisObj->World();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_HasAuthority(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    bool ret = thisObj->HasAuthority();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_IsPrimitiveShape(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    bool ret = thisObj->IsPrimitiveShape();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_TypeName(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    const String & ret = thisObj->TypeName();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t RigidBody_TypeId(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    u32 ret = thisObj->TypeId();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_Name(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    const String & ret = thisObj->Name();
    duk_push_string(ctx, ret.CString());
    return 1;
}

static duk_ret_t RigidBody_SetName_String(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    String name = duk_require_string(ctx, 0);
    thisObj->SetName(name);
    return 0;
}

static duk_ret_t RigidBody_SetParentEntity_Entity(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    Entity* entity = GetWeakObject<Entity>(ctx, 0);
    thisObj->SetParentEntity(entity);
    return 0;
}

static duk_ret_t RigidBody_SetReplicated_bool(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    thisObj->SetReplicated(enable);
    return 0;
}

static duk_ret_t RigidBody_IsReplicated(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    bool ret = thisObj->IsReplicated();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_IsLocal(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    bool ret = thisObj->IsLocal();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_IsUnacked(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    bool ret = thisObj->IsUnacked();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_SetUpdateMode_AttributeChange__Type(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    AttributeChange::Type defaultmode = (AttributeChange::Type)(int)duk_require_number(ctx, 0);
    thisObj->SetUpdateMode(defaultmode);
    return 0;
}

static duk_ret_t RigidBody_UpdateMode(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    AttributeChange::Type ret = thisObj->UpdateMode();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_Id(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    component_id_t ret = thisObj->Id();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_SupportsDynamicAttributes(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    bool ret = thisObj->SupportsDynamicAttributes();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_NumAttributes(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    int ret = thisObj->NumAttributes();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_NumStaticAttributes(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    int ret = thisObj->NumStaticAttributes();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_EmitAttributeChanged_String_AttributeChange__Type(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    String attributeName = duk_require_string(ctx, 0);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 1);
    thisObj->EmitAttributeChanged(attributeName, change);
    return 0;
}

static duk_ret_t RigidBody_ComponentChanged_AttributeChange__Type(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    AttributeChange::Type change = (AttributeChange::Type)(int)duk_require_number(ctx, 0);
    thisObj->ComponentChanged(change);
    return 0;
}

static duk_ret_t RigidBody_ParentEntity(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    Entity * ret = thisObj->ParentEntity();
    PushWeakObject(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_SetTemporary_bool(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    thisObj->SetTemporary(enable);
    return 0;
}

static duk_ret_t RigidBody_IsTemporary(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    bool ret = thisObj->IsTemporary();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_ViewEnabled(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    bool ret = thisObj->ViewEnabled();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_AttributeNames(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    StringVector ret = thisObj->AttributeNames();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_AttributeIds(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    StringVector ret = thisObj->AttributeIds();
    PushStringVector(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_ShouldBeSerialized_bool_bool(duk_context* ctx)
{
    RigidBody* thisObj = GetThisWeakObject<RigidBody>(ctx);
    bool serializeTemporary = duk_require_boolean(ctx, 0);
    bool serializeLocal = duk_require_boolean(ctx, 1);
    bool ret = thisObj->ShouldBeSerialized(serializeTemporary, serializeLocal);
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t RigidBody_EnsureTypeNameWithoutPrefix_Static_String(duk_context* ctx)
{
    String tn = duk_require_string(ctx, 0);
    String ret = RigidBody::EnsureTypeNameWithoutPrefix(tn);
    duk_push_string(ctx, ret.CString());
    return 1;
}

static const duk_function_list_entry RigidBody_Functions[] = {
    {"SetClientExtrapolating", RigidBody_SetClientExtrapolating_bool, 1}
    ,{"SetShapeFromVisibleMesh", RigidBody_SetShapeFromVisibleMesh, 0}
    ,{"SetLinearVelocity", RigidBody_SetLinearVelocity_float3, 1}
    ,{"GetLinearVelocity", RigidBody_GetLinearVelocity, 0}
    ,{"SetAngularVelocity", RigidBody_SetAngularVelocity_float3, 1}
    ,{"GetAngularVelocity", RigidBody_GetAngularVelocity, 0}
    ,{"ApplyForce", RigidBody_ApplyForce_float3_float3, DUK_VARARGS}
    ,{"ApplyTorque", RigidBody_ApplyTorque_float3, 1}
    ,{"ApplyImpulse", RigidBody_ApplyImpulse_float3_float3, DUK_VARARGS}
    ,{"ApplyTorqueImpulse", RigidBody_ApplyTorqueImpulse_float3, 1}
    ,{"Activate", RigidBody_Activate, 0}
    ,{"KeepActive", RigidBody_KeepActive, 0}
    ,{"IsActive", RigidBody_IsActive, 0}
    ,{"ResetForces", RigidBody_ResetForces, 0}
    ,{"SetRotation", RigidBody_SetRotation_float3, 1}
    ,{"Rotate", RigidBody_Rotate_float3, 1}
    ,{"World", RigidBody_World, 0}
    ,{"HasAuthority", RigidBody_HasAuthority, 0}
    ,{"IsPrimitiveShape", RigidBody_IsPrimitiveShape, 0}
    ,{"TypeName", RigidBody_TypeName, 0}
    ,{"TypeId", RigidBody_TypeId, 0}
    ,{"Name", RigidBody_Name, 0}
    ,{"SetName", RigidBody_SetName_String, 1}
    ,{"SetParentEntity", RigidBody_SetParentEntity_Entity, 1}
    ,{"SetReplicated", RigidBody_SetReplicated_bool, 1}
    ,{"IsReplicated", RigidBody_IsReplicated, 0}
    ,{"IsLocal", RigidBody_IsLocal, 0}
    ,{"IsUnacked", RigidBody_IsUnacked, 0}
    ,{"SetUpdateMode", RigidBody_SetUpdateMode_AttributeChange__Type, 1}
    ,{"UpdateMode", RigidBody_UpdateMode, 0}
    ,{"Id", RigidBody_Id, 0}
    ,{"SupportsDynamicAttributes", RigidBody_SupportsDynamicAttributes, 0}
    ,{"NumAttributes", RigidBody_NumAttributes, 0}
    ,{"NumStaticAttributes", RigidBody_NumStaticAttributes, 0}
    ,{"EmitAttributeChanged", RigidBody_EmitAttributeChanged_String_AttributeChange__Type, 2}
    ,{"ComponentChanged", RigidBody_ComponentChanged_AttributeChange__Type, 1}
    ,{"ParentEntity", RigidBody_ParentEntity, 0}
    ,{"SetTemporary", RigidBody_SetTemporary_bool, 1}
    ,{"IsTemporary", RigidBody_IsTemporary, 0}
    ,{"ViewEnabled", RigidBody_ViewEnabled, 0}
    ,{"AttributeNames", RigidBody_AttributeNames, 0}
    ,{"AttributeIds", RigidBody_AttributeIds, 0}
    ,{"ShouldBeSerialized", RigidBody_ShouldBeSerialized_bool_bool, 2}
    ,{nullptr, nullptr, 0}
};

static const duk_function_list_entry RigidBody_StaticFunctions[] = {
    {"EnsureTypeNameWithoutPrefix", RigidBody_EnsureTypeNameWithoutPrefix_Static_String, 1}
    ,{nullptr, nullptr, 0}
};

void Expose_RigidBody(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, RigidBody_StaticFunctions);
    duk_push_number(ctx, 0);
    duk_put_prop_string(ctx, -2, "Box");
    duk_push_number(ctx, 1);
    duk_put_prop_string(ctx, -2, "Sphere");
    duk_push_number(ctx, 2);
    duk_put_prop_string(ctx, -2, "Cylinder");
    duk_push_number(ctx, 3);
    duk_put_prop_string(ctx, -2, "Capsule");
    duk_push_number(ctx, 4);
    duk_put_prop_string(ctx, -2, "TriMesh");
    duk_push_number(ctx, 5);
    duk_put_prop_string(ctx, -2, "HeightField");
    duk_push_number(ctx, 6);
    duk_put_prop_string(ctx, -2, "ConvexHull");
    duk_push_number(ctx, 7);
    duk_put_prop_string(ctx, -2, "Cone");
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, RigidBody_Functions);
    DefineProperty(ctx, "PhysicsCollision", RigidBody_Get_PhysicsCollision, nullptr);
    DefineProperty(ctx, "NewPhysicsCollision", RigidBody_Get_NewPhysicsCollision, nullptr);
    DefineProperty(ctx, "ComponentNameChanged", RigidBody_Get_ComponentNameChanged, nullptr);
    DefineProperty(ctx, "ParentEntitySet", RigidBody_Get_ParentEntitySet, nullptr);
    DefineProperty(ctx, "ParentEntityAboutToBeDetached", RigidBody_Get_ParentEntityAboutToBeDetached, nullptr);
    DefineProperty(ctx, "typeName", RigidBody_TypeName, nullptr);
    DefineProperty(ctx, "typeId", RigidBody_TypeId, nullptr);
    DefineProperty(ctx, "name", RigidBody_Name, RigidBody_SetName_String);
    DefineProperty(ctx, "replicated", RigidBody_IsReplicated, RigidBody_SetReplicated_bool);
    DefineProperty(ctx, "local", RigidBody_IsLocal, nullptr);
    DefineProperty(ctx, "unacked", RigidBody_IsUnacked, nullptr);
    DefineProperty(ctx, "updateMode", RigidBody_UpdateMode, RigidBody_SetUpdateMode_AttributeChange__Type);
    DefineProperty(ctx, "id", RigidBody_Id, nullptr);
    DefineProperty(ctx, "temporary", RigidBody_IsTemporary, RigidBody_SetTemporary_bool);
    DefineProperty(ctx, "viewEnabled", RigidBody_ViewEnabled, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, RigidBody_ID);
}

}
