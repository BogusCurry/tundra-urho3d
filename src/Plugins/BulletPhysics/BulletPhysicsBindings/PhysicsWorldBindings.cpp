// For conditions of distribution and use, see copyright notice in LICENSE
// This file has been autogenerated with BindingsGenerator

#include "StableHeaders.h"
#include "CoreTypes.h"
#include "JavaScriptInstance.h"
#include "LoggingFunctions.h"
#include "PhysicsWorld.h"

#ifdef _MSC_VER
#pragma warning(disable: 4800)
#endif

#include "PhysicsWorld.h"
#include "Entity.h"


using namespace Tundra;
using namespace std;

namespace JSBindings
{

static const char* float3_ID = "float3";
static const char* PhysicsRaycastResult_ID = "PhysicsRaycastResult";

static duk_ret_t float3_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<float3>(ctx, float3_ID);
    return 0;
}

static duk_ret_t PhysicsRaycastResult_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<PhysicsRaycastResult>(ctx, PhysicsRaycastResult_ID);
    return 0;
}


static const char* PhysicsWorld_ID = "PhysicsWorld";

const char* SignalWrapper_PhysicsWorld_PhysicsCollision_ID = "SignalWrapper_PhysicsWorld_PhysicsCollision";

class SignalWrapper_PhysicsWorld_PhysicsCollision
{
public:
    SignalWrapper_PhysicsWorld_PhysicsCollision(Object* owner, Signal7< Entity *, Entity *, const float3 &, const float3 &, float , float , bool >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal7< Entity *, Entity *, const float3 &, const float3 &, float , float , bool >* signal_;
};

class SignalReceiver_PhysicsWorld_PhysicsCollision : public SignalReceiver
{
public:
    void OnSignal(Entity * param0, Entity * param1, const float3 & param2, const float3 & param3, float param4, float param5, bool param6)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        PushWeakObject(ctx, param1);
        duk_put_prop_index(ctx, -2, 1);
        PushValueObjectCopy<float3>(ctx, param2, float3_ID, float3_Finalizer);
        duk_put_prop_index(ctx, -2, 2);
        PushValueObjectCopy<float3>(ctx, param3, float3_ID, float3_Finalizer);
        duk_put_prop_index(ctx, -2, 3);
        duk_push_number(ctx, param4);
        duk_put_prop_index(ctx, -2, 4);
        duk_push_number(ctx, param5);
        duk_put_prop_index(ctx, -2, 5);
        duk_push_boolean(ctx, param6);
        duk_put_prop_index(ctx, -2, 6);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_PhysicsWorld_PhysicsCollision_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_PhysicsWorld_PhysicsCollision>(ctx, SignalWrapper_PhysicsWorld_PhysicsCollision_ID);
    return 0;
}

static duk_ret_t SignalWrapper_PhysicsWorld_PhysicsCollision_Connect(duk_context* ctx)
{
    SignalWrapper_PhysicsWorld_PhysicsCollision* wrapper = GetThisValueObject<SignalWrapper_PhysicsWorld_PhysicsCollision>(ctx, SignalWrapper_PhysicsWorld_PhysicsCollision_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_PhysicsWorld_PhysicsCollision* receiver = new SignalReceiver_PhysicsWorld_PhysicsCollision();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_PhysicsWorld_PhysicsCollision::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_PhysicsWorld_PhysicsCollision_Disconnect(duk_context* ctx)
{
    SignalWrapper_PhysicsWorld_PhysicsCollision* wrapper = GetThisValueObject<SignalWrapper_PhysicsWorld_PhysicsCollision>(ctx, SignalWrapper_PhysicsWorld_PhysicsCollision_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_PhysicsWorld_PhysicsCollision_Emit(duk_context* ctx)
{
    SignalWrapper_PhysicsWorld_PhysicsCollision* wrapper = GetThisValueObject<SignalWrapper_PhysicsWorld_PhysicsCollision>(ctx, SignalWrapper_PhysicsWorld_PhysicsCollision_ID);
    if (!wrapper->owner_) return 0;
    Entity* param0 = GetWeakObject<Entity>(ctx, 0);
    Entity* param1 = GetWeakObject<Entity>(ctx, 1);
    float3& param2 = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float3& param3 = *GetCheckedValueObject<float3>(ctx, 3, float3_ID);
    float param4 = (float)duk_require_number(ctx, 4);
    float param5 = (float)duk_require_number(ctx, 5);
    bool param6 = duk_require_boolean(ctx, 6);
    wrapper->signal_->Emit(param0, param1, param2, param3, param4, param5, param6);
    return 0;
}

static duk_ret_t PhysicsWorld_Get_PhysicsCollision(duk_context* ctx)
{
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    SignalWrapper_PhysicsWorld_PhysicsCollision* wrapper = new SignalWrapper_PhysicsWorld_PhysicsCollision(thisObj, &thisObj->PhysicsCollision);
    PushValueObject(ctx, wrapper, SignalWrapper_PhysicsWorld_PhysicsCollision_ID, SignalWrapper_PhysicsWorld_PhysicsCollision_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_PhysicsCollision_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_PhysicsCollision_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_PhysicsCollision_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_PhysicsCollision_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_PhysicsCollision_Emit, 7);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_PhysicsWorld_NewPhysicsCollision_ID = "SignalWrapper_PhysicsWorld_NewPhysicsCollision";

class SignalWrapper_PhysicsWorld_NewPhysicsCollision
{
public:
    SignalWrapper_PhysicsWorld_NewPhysicsCollision(Object* owner, Signal6< Entity *, Entity *, const float3 &, const float3 &, float , float >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal6< Entity *, Entity *, const float3 &, const float3 &, float , float >* signal_;
};

class SignalReceiver_PhysicsWorld_NewPhysicsCollision : public SignalReceiver
{
public:
    void OnSignal(Entity * param0, Entity * param1, const float3 & param2, const float3 & param3, float param4, float param5)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        PushWeakObject(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        PushWeakObject(ctx, param1);
        duk_put_prop_index(ctx, -2, 1);
        PushValueObjectCopy<float3>(ctx, param2, float3_ID, float3_Finalizer);
        duk_put_prop_index(ctx, -2, 2);
        PushValueObjectCopy<float3>(ctx, param3, float3_ID, float3_Finalizer);
        duk_put_prop_index(ctx, -2, 3);
        duk_push_number(ctx, param4);
        duk_put_prop_index(ctx, -2, 4);
        duk_push_number(ctx, param5);
        duk_put_prop_index(ctx, -2, 5);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_PhysicsWorld_NewPhysicsCollision_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_PhysicsWorld_NewPhysicsCollision>(ctx, SignalWrapper_PhysicsWorld_NewPhysicsCollision_ID);
    return 0;
}

static duk_ret_t SignalWrapper_PhysicsWorld_NewPhysicsCollision_Connect(duk_context* ctx)
{
    SignalWrapper_PhysicsWorld_NewPhysicsCollision* wrapper = GetThisValueObject<SignalWrapper_PhysicsWorld_NewPhysicsCollision>(ctx, SignalWrapper_PhysicsWorld_NewPhysicsCollision_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_PhysicsWorld_NewPhysicsCollision* receiver = new SignalReceiver_PhysicsWorld_NewPhysicsCollision();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_PhysicsWorld_NewPhysicsCollision::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_PhysicsWorld_NewPhysicsCollision_Disconnect(duk_context* ctx)
{
    SignalWrapper_PhysicsWorld_NewPhysicsCollision* wrapper = GetThisValueObject<SignalWrapper_PhysicsWorld_NewPhysicsCollision>(ctx, SignalWrapper_PhysicsWorld_NewPhysicsCollision_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_PhysicsWorld_NewPhysicsCollision_Emit(duk_context* ctx)
{
    SignalWrapper_PhysicsWorld_NewPhysicsCollision* wrapper = GetThisValueObject<SignalWrapper_PhysicsWorld_NewPhysicsCollision>(ctx, SignalWrapper_PhysicsWorld_NewPhysicsCollision_ID);
    if (!wrapper->owner_) return 0;
    Entity* param0 = GetWeakObject<Entity>(ctx, 0);
    Entity* param1 = GetWeakObject<Entity>(ctx, 1);
    float3& param2 = *GetCheckedValueObject<float3>(ctx, 2, float3_ID);
    float3& param3 = *GetCheckedValueObject<float3>(ctx, 3, float3_ID);
    float param4 = (float)duk_require_number(ctx, 4);
    float param5 = (float)duk_require_number(ctx, 5);
    wrapper->signal_->Emit(param0, param1, param2, param3, param4, param5);
    return 0;
}

static duk_ret_t PhysicsWorld_Get_NewPhysicsCollision(duk_context* ctx)
{
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    SignalWrapper_PhysicsWorld_NewPhysicsCollision* wrapper = new SignalWrapper_PhysicsWorld_NewPhysicsCollision(thisObj, &thisObj->NewPhysicsCollision);
    PushValueObject(ctx, wrapper, SignalWrapper_PhysicsWorld_NewPhysicsCollision_ID, SignalWrapper_PhysicsWorld_NewPhysicsCollision_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_NewPhysicsCollision_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_NewPhysicsCollision_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_NewPhysicsCollision_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_NewPhysicsCollision_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_NewPhysicsCollision_Emit, 6);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_PhysicsWorld_AboutToUpdate_ID = "SignalWrapper_PhysicsWorld_AboutToUpdate";

class SignalWrapper_PhysicsWorld_AboutToUpdate
{
public:
    SignalWrapper_PhysicsWorld_AboutToUpdate(Object* owner, Signal1< float >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< float >* signal_;
};

class SignalReceiver_PhysicsWorld_AboutToUpdate : public SignalReceiver
{
public:
    void OnSignal(float param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        duk_push_number(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_PhysicsWorld_AboutToUpdate_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_PhysicsWorld_AboutToUpdate>(ctx, SignalWrapper_PhysicsWorld_AboutToUpdate_ID);
    return 0;
}

static duk_ret_t SignalWrapper_PhysicsWorld_AboutToUpdate_Connect(duk_context* ctx)
{
    SignalWrapper_PhysicsWorld_AboutToUpdate* wrapper = GetThisValueObject<SignalWrapper_PhysicsWorld_AboutToUpdate>(ctx, SignalWrapper_PhysicsWorld_AboutToUpdate_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_PhysicsWorld_AboutToUpdate* receiver = new SignalReceiver_PhysicsWorld_AboutToUpdate();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_PhysicsWorld_AboutToUpdate::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_PhysicsWorld_AboutToUpdate_Disconnect(duk_context* ctx)
{
    SignalWrapper_PhysicsWorld_AboutToUpdate* wrapper = GetThisValueObject<SignalWrapper_PhysicsWorld_AboutToUpdate>(ctx, SignalWrapper_PhysicsWorld_AboutToUpdate_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_PhysicsWorld_AboutToUpdate_Emit(duk_context* ctx)
{
    SignalWrapper_PhysicsWorld_AboutToUpdate* wrapper = GetThisValueObject<SignalWrapper_PhysicsWorld_AboutToUpdate>(ctx, SignalWrapper_PhysicsWorld_AboutToUpdate_ID);
    if (!wrapper->owner_) return 0;
    float param0 = (float)duk_require_number(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t PhysicsWorld_Get_AboutToUpdate(duk_context* ctx)
{
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    SignalWrapper_PhysicsWorld_AboutToUpdate* wrapper = new SignalWrapper_PhysicsWorld_AboutToUpdate(thisObj, &thisObj->AboutToUpdate);
    PushValueObject(ctx, wrapper, SignalWrapper_PhysicsWorld_AboutToUpdate_ID, SignalWrapper_PhysicsWorld_AboutToUpdate_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_AboutToUpdate_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_AboutToUpdate_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_AboutToUpdate_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_AboutToUpdate_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_AboutToUpdate_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

const char* SignalWrapper_PhysicsWorld_Updated_ID = "SignalWrapper_PhysicsWorld_Updated";

class SignalWrapper_PhysicsWorld_Updated
{
public:
    SignalWrapper_PhysicsWorld_Updated(Object* owner, Signal1< float >* signal) :
        owner_(owner),
        signal_(signal)
    {
    }

    WeakPtr<Object> owner_;
    Signal1< float >* signal_;
};

class SignalReceiver_PhysicsWorld_Updated : public SignalReceiver
{
public:
    void OnSignal(float param0)
    {
        duk_context* ctx = ctx_;
        duk_push_global_object(ctx);
        duk_get_prop_string(ctx, -1, "_OnSignal");
        duk_remove(ctx, -2);
        duk_push_number(ctx, (size_t)key_);
        duk_push_array(ctx);
        duk_push_number(ctx, param0);
        duk_put_prop_index(ctx, -2, 0);
        bool success = duk_pcall(ctx, 2) == 0;
        if (!success) LogError("[JavaScript] OnSignal: " + String(duk_safe_to_string(ctx, -1)));
        duk_pop(ctx);
    }
};

static duk_ret_t SignalWrapper_PhysicsWorld_Updated_Finalizer(duk_context* ctx)
{
    FinalizeValueObject<SignalWrapper_PhysicsWorld_Updated>(ctx, SignalWrapper_PhysicsWorld_Updated_ID);
    return 0;
}

static duk_ret_t SignalWrapper_PhysicsWorld_Updated_Connect(duk_context* ctx)
{
    SignalWrapper_PhysicsWorld_Updated* wrapper = GetThisValueObject<SignalWrapper_PhysicsWorld_Updated>(ctx, SignalWrapper_PhysicsWorld_Updated_ID);
    if (!wrapper->owner_) return 0;
    HashMap<void*, SharedPtr<SignalReceiver> >& signalReceivers = JavaScriptInstance::InstanceFromContext(ctx)->SignalReceivers();
    if (signalReceivers.Find(wrapper->signal_) == signalReceivers.End())
    {
        SignalReceiver_PhysicsWorld_Updated* receiver = new SignalReceiver_PhysicsWorld_Updated();
        receiver->ctx_ = ctx;
        receiver->key_ = wrapper->signal_;
        wrapper->signal_->Connect(receiver, &SignalReceiver_PhysicsWorld_Updated::OnSignal);
        signalReceivers[wrapper->signal_] = receiver;
    }
    CallConnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_PhysicsWorld_Updated_Disconnect(duk_context* ctx)
{
    SignalWrapper_PhysicsWorld_Updated* wrapper = GetThisValueObject<SignalWrapper_PhysicsWorld_Updated>(ctx, SignalWrapper_PhysicsWorld_Updated_ID);
    if (!wrapper->owner_) return 0;
    CallDisconnectSignal(ctx, wrapper->signal_);
    return 0;
}

static duk_ret_t SignalWrapper_PhysicsWorld_Updated_Emit(duk_context* ctx)
{
    SignalWrapper_PhysicsWorld_Updated* wrapper = GetThisValueObject<SignalWrapper_PhysicsWorld_Updated>(ctx, SignalWrapper_PhysicsWorld_Updated_ID);
    if (!wrapper->owner_) return 0;
    float param0 = (float)duk_require_number(ctx, 0);
    wrapper->signal_->Emit(param0);
    return 0;
}

static duk_ret_t PhysicsWorld_Get_Updated(duk_context* ctx)
{
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    SignalWrapper_PhysicsWorld_Updated* wrapper = new SignalWrapper_PhysicsWorld_Updated(thisObj, &thisObj->Updated);
    PushValueObject(ctx, wrapper, SignalWrapper_PhysicsWorld_Updated_ID, SignalWrapper_PhysicsWorld_Updated_Finalizer, false);
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_Updated_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Connect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_Updated_Connect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "connect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_Updated_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "Disconnect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_Updated_Disconnect, DUK_VARARGS);
    duk_put_prop_string(ctx, -2, "disconnect");
    duk_push_c_function(ctx, SignalWrapper_PhysicsWorld_Updated_Emit, 1);
    duk_put_prop_string(ctx, -2, "Emit");
    return 1;
}

static duk_ret_t PhysicsWorld_SetPhysicsUpdatePeriod_float(duk_context* ctx)
{
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    float updatePeriod = (float)duk_require_number(ctx, 0);
    thisObj->SetPhysicsUpdatePeriod(updatePeriod);
    return 0;
}

static duk_ret_t PhysicsWorld_PhysicsUpdatePeriod(duk_context* ctx)
{
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    float ret = thisObj->PhysicsUpdatePeriod();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t PhysicsWorld_SetMaxSubSteps_int(duk_context* ctx)
{
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    int steps = (int)duk_require_number(ctx, 0);
    thisObj->SetMaxSubSteps(steps);
    return 0;
}

static duk_ret_t PhysicsWorld_MaxSubSteps(duk_context* ctx)
{
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    int ret = thisObj->MaxSubSteps();
    duk_push_number(ctx, ret);
    return 1;
}

static duk_ret_t PhysicsWorld_SetGravity_float3(duk_context* ctx)
{
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    float3& gravity = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    thisObj->SetGravity(gravity);
    return 0;
}

static duk_ret_t PhysicsWorld_Gravity(duk_context* ctx)
{
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    float3 ret = thisObj->Gravity();
    PushValueObjectCopy<float3>(ctx, ret, float3_ID, float3_Finalizer);
    return 1;
}

static duk_ret_t PhysicsWorld_SetDebugGeometryEnabled_bool(duk_context* ctx)
{
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    thisObj->SetDebugGeometryEnabled(enable);
    return 0;
}

static duk_ret_t PhysicsWorld_IsDebugGeometryEnabled(duk_context* ctx)
{
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    bool ret = thisObj->IsDebugGeometryEnabled();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t PhysicsWorld_SetRunning_bool(duk_context* ctx)
{
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    bool enable = duk_require_boolean(ctx, 0);
    thisObj->SetRunning(enable);
    return 0;
}

static duk_ret_t PhysicsWorld_IsRunning(duk_context* ctx)
{
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    bool ret = thisObj->IsRunning();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t PhysicsWorld_IsClient(duk_context* ctx)
{
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    bool ret = thisObj->IsClient();
    duk_push_boolean(ctx, ret);
    return 1;
}

static duk_ret_t PhysicsWorld_Raycast_float3_float3_float_int_int(duk_context* ctx)
{
    int numArgs = duk_get_top(ctx);
    PhysicsWorld* thisObj = GetThisWeakObject<PhysicsWorld>(ctx);
    float3& origin = *GetCheckedValueObject<float3>(ctx, 0, float3_ID);
    float3& direction = *GetCheckedValueObject<float3>(ctx, 1, float3_ID);
    float maxDistance = (float)duk_require_number(ctx, 2);
    int collisionGroup = numArgs > 3 ? (int)duk_require_number(ctx, 3) : -1;
    int collisionMask = numArgs > 4 ? (int)duk_require_number(ctx, 4) : -1;
    PhysicsRaycastResult ret = thisObj->Raycast(origin, direction, maxDistance, collisionGroup, collisionMask);
    PushValueObjectCopy<PhysicsRaycastResult>(ctx, ret, PhysicsRaycastResult_ID, PhysicsRaycastResult_Finalizer);
    return 1;
}

static const duk_function_list_entry PhysicsWorld_Functions[] = {
    {"SetPhysicsUpdatePeriod", PhysicsWorld_SetPhysicsUpdatePeriod_float, 1}
    ,{"PhysicsUpdatePeriod", PhysicsWorld_PhysicsUpdatePeriod, 0}
    ,{"SetMaxSubSteps", PhysicsWorld_SetMaxSubSteps_int, 1}
    ,{"MaxSubSteps", PhysicsWorld_MaxSubSteps, 0}
    ,{"SetGravity", PhysicsWorld_SetGravity_float3, 1}
    ,{"Gravity", PhysicsWorld_Gravity, 0}
    ,{"SetDebugGeometryEnabled", PhysicsWorld_SetDebugGeometryEnabled_bool, 1}
    ,{"IsDebugGeometryEnabled", PhysicsWorld_IsDebugGeometryEnabled, 0}
    ,{"SetRunning", PhysicsWorld_SetRunning_bool, 1}
    ,{"IsRunning", PhysicsWorld_IsRunning, 0}
    ,{"IsClient", PhysicsWorld_IsClient, 0}
    ,{"Raycast", PhysicsWorld_Raycast_float3_float3_float_int_int, DUK_VARARGS}
    ,{nullptr, nullptr, 0}
};

void Expose_PhysicsWorld(duk_context* ctx)
{
    duk_push_object(ctx);
    duk_push_object(ctx);
    duk_put_function_list(ctx, -1, PhysicsWorld_Functions);
    DefineProperty(ctx, "PhysicsCollision", PhysicsWorld_Get_PhysicsCollision, nullptr);
    DefineProperty(ctx, "NewPhysicsCollision", PhysicsWorld_Get_NewPhysicsCollision, nullptr);
    DefineProperty(ctx, "AboutToUpdate", PhysicsWorld_Get_AboutToUpdate, nullptr);
    DefineProperty(ctx, "Updated", PhysicsWorld_Get_Updated, nullptr);
    DefineProperty(ctx, "physicsUpdatePeriod", PhysicsWorld_PhysicsUpdatePeriod, PhysicsWorld_SetPhysicsUpdatePeriod_float);
    DefineProperty(ctx, "maxSubSteps", PhysicsWorld_MaxSubSteps, PhysicsWorld_SetMaxSubSteps_int);
    DefineProperty(ctx, "gravity", PhysicsWorld_Gravity, PhysicsWorld_SetGravity_float3);
    DefineProperty(ctx, "debugGeometryEnabled", PhysicsWorld_IsDebugGeometryEnabled, PhysicsWorld_SetDebugGeometryEnabled_bool);
    DefineProperty(ctx, "running", PhysicsWorld_IsRunning, PhysicsWorld_SetRunning_bool);
    DefineProperty(ctx, "client", PhysicsWorld_IsClient, nullptr);
    duk_put_prop_string(ctx, -2, "prototype");
    duk_put_global_string(ctx, PhysicsWorld_ID);
}

}
